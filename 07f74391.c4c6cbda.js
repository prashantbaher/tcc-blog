(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{152:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,b=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(n),O=a,d=p["".concat(b,".").concat(O)]||p[O]||m[O]||o;return n?r.a.createElement(d,i(i({ref:t},l),{},{components:n})):r.a.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,b=new Array(o);b[0]=O;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,b[1]=i;for(var l=2;l<o;l++)b[l]=n[l];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"},222:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/before_trim-c3395e353be09d3cc3e19a3267bbac93.png"},223:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/after_trim-063ed603a84f428b4089e7a2f98b0004.png"},57:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),o=(n(0),n(152)),b={id:"sw-sketch-macro-trim-entities",title:"Trim Sketch Entities"},i={unversionedId:"solidworks-macros/sw-sketch-macro-trim-entities",id:"solidworks-macros/sw-sketch-macro-trim-entities",isDocsHomePage:!1,title:"Trim Sketch Entities",description:"In this post, I tell you about how to Trim Sketch Entities using Solidworks VBA Macros in a Sketch.",source:"@site/docs\\solidworks-macros\\2019-11-19-trim-entities.md",slug:"/solidworks-macros/sw-sketch-macro-trim-entities",permalink:"/docs/solidworks-macros/sw-sketch-macro-trim-entities",version:"current",sidebar:"swvba",previous:{title:"Create a Chamfer",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-chamfer"},next:{title:"Extend Sketch Entities",permalink:"/docs/solidworks-macros/sw-sketch-macro-extend-entities"}},c=[{value:"Video of Code on YouTube",id:"video-of-code-on-youtube",children:[]},{value:"For Experience Macro Developer",id:"for-experience-macro-developer",children:[]},{value:"For Beginners Macro Developers",id:"for-beginners-macro-developers",children:[{value:"Understanding the Code",id:"understanding-the-code",children:[]},{value:"NOTE",id:"note",children:[]}]},{value:"VBA Language feature used in this post",id:"vba-language-feature-used-in-this-post",children:[]},{value:"Solidworks API Objects",id:"solidworks-api-objects",children:[]}],l={rightToc:c};function s(e){var t=e.components,b=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,b,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this post, I tell you about ",Object(o.b)("em",{parentName:"p"},"how to Trim Sketch Entities using Solidworks VBA Macros")," in a Sketch."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"video-of-code-on-youtube"},"Video of Code on YouTube"),Object(o.b)("p",null,"Please see below video how visually we ",Object(o.b)("em",{parentName:"p"},"Trim Sketch Entities")," in ",Object(o.b)("strong",{parentName:"p"},"Solidworks VBA macro"),"."),Object(o.b)("div",{class:"youtube-responsive-container"},Object(o.b)("iframe",{src:"https://www.youtube.com/embed/m1tPTzjK1Pc",frameborder:"0",allowfullscreen:!0})),Object(o.b)("p",null,"Please note that there are ",Object(o.b)("strong",{parentName:"p"},"no explaination")," given in the video. "),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Explaination")," of each line and why we write code this way is given in this post."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"for-experience-macro-developer"},"For Experience Macro Developer"),Object(o.b)("p",null,"If you are an experience ",Object(o.b)("strong",{parentName:"p"},"Solidworks Macro developer"),", then you are looking for a specific code sample."),Object(o.b)("p",null,"Below is the code for ",Object(o.b)("strong",{parentName:"p"},"Trim Sketch Entities")," from ",Object(o.b)("strong",{parentName:"p"},"Solidworks VBA Macro"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Boolean Variable\nDim BoolStatus As Boolean\n\n\' Select Line 1\nBoolStatus = swDoc.Extension.SelectByID2("Line1", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n\' Select Line 2\nBoolStatus = swDoc.Extension.SelectByID2("Line2", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n\' Trim Solidworks Sketch segment by "SketchTrim" method from Solidworks sketch manager\nBoolStatus = swSketchManager.SketchTrim(swSketchTrimChoice_e.swSketchTrimCorner, 0, 0, 0)\n')),Object(o.b)("p",null,"For ",Object(o.b)("strong",{parentName:"p"},"Trim")," Solidworks Sketch segment, first you need to ",Object(o.b)("strong",{parentName:"p"},"Create")," a variable of ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," type."),Object(o.b)("p",null,"After creating variable, you need to set the value of this ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," variable."),Object(o.b)("p",null,"For this you used ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method from ",Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method set the value of ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," type variable."),Object(o.b)("p",null,"If Trim is ",Object(o.b)("strong",{parentName:"p"},"successful")," then ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method return ",Object(o.b)("strong",{parentName:"p"},"True")," otherwise ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," returns ",Object(o.b)("strong",{parentName:"p"},"False"),"."),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method takes following parameters as explained:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Option")," : ",Object(o.b)("em",{parentName:"p"},"Sketch trim options as defined in ",Object(o.b)("inlineCode",{parentName:"em"},"swSketchTrimChoice_e")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"X")," : ",Object(o.b)("em",{parentName:"p"},"X pick location"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Y")," : ",Object(o.b)("em",{parentName:"p"},"Y pick location")))),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimChoice_e")," we have following options:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimClosest")," : This option Trim Closest selected Sketch Entity.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimCorner")," : This option Trim/Extend Corners of selected Sketch Entity.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimEntities")," : This option Trim/Delete selected Sketch Entity.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimEntityPoint")," : This option migth be Trim selected Sketch Point or Entity. (I did not know what it do!!!)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimInside")," : This option Trim selected Sketch Entity between ",Object(o.b)("strong",{parentName:"p"},"two boundaries"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimOutside")," : This option Keep selected Sketch Entity between ",Object(o.b)("strong",{parentName:"p"},"two boundaries")," and Trim outside of the boundaries.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimTwoEntities")," : This option Trim/Delete selected ",Object(o.b)("em",{parentName:"p"},"two Sketch Entities"),"."))),Object(o.b)("p",null,"If you want a more detail explaination then please read further otherwise this will help you to ",Object(o.b)("strong",{parentName:"p"},"Trim Sketch Entities From VBA Macro"),"."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"for-beginners-macro-developers"},"For Beginners Macro Developers"),Object(o.b)("p",null,"In this post, I tell you about ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method from ",Object(o.b)("strong",{parentName:"p"},"Solidworks")," ",Object(o.b)("inlineCode",{parentName:"p"},"SketchManager")," object."),Object(o.b)("p",null,"This method is ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"most updated"))," method, I found in ",Object(o.b)("em",{parentName:"p"},"Solidworks API Help"),". "),Object(o.b)("p",null,"So ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"use this method"))," if you want to ",Object(o.b)("em",{parentName:"p"},"Trim Sketches"),"."),Object(o.b)("p",null,"Below is the ",Object(o.b)("inlineCode",{parentName:"p"},"code")," sample for ",Object(o.b)("em",{parentName:"p"},"Trim Sketches"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n\n' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n\n' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n\n' Boolean Variable\nDim BoolStatus As Boolean\n\n' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n\n' Create Variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n\n' Main function of our VBA program\nSub main()\n\n  ' Set Solidworks variable to Solidworks application\n  Set swApp = Application.SldWorks\n  \n  ' Create string type variable for storing default part location\n  Dim defaultTemplate As String\n  ' Set value of this string type variable to \"Default part template\"\n  defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n\n  ' Set Solidworks document to new part document\n  Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n\n  ' Select Front Plane\n  BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n  ' Set Sketch manager for our sketch\n  Set swSketchManager = swDoc.SketchManager\n\n  ' Insert a sketch into selected plane\n  swSketchManager.InsertSketch True\n  \n  ' Set Sketch Segment value and Create Line 1\n  Set swSketchSegment = swSketchManager.CreateLine(0, 0, 0, 1, 0, 0)\n  \n  ' Set Sketch Segment value and Create Line 2\n  Set swSketchSegment = swSketchManager.CreateLine(1.5, 0, 0, 1.5, 1, 0)\n  \n  ' De-select the lines after creation\n  swDoc.ClearSelection2 True\n  \n  ' Select Line 1\n  BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n  ' Select Line 2\n  BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n  ' Trim selected Sketch Segments by \"SketchTrim\" method from Solidworks sketch manager\n  BoolStatus = swSketchManager.SketchTrim(swSketchTrimChoice_e.swSketchTrimCorner, 0.0, 0.0, 0.0)\n\n  ' De-select the Sketch Segment after Trim\n  swDoc.ClearSelection2 True\n  \n  ' Show Front View after Trim Sketch Segments\n  swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView\n  \n  ' Zoom to fit screen in Solidworks Window\n  swDoc.ViewZoomtofit2\n\nEnd Sub\n")),Object(o.b)("hr",null),Object(o.b)("h3",{id:"understanding-the-code"},"Understanding the Code"),Object(o.b)("p",null,"Now let us walk through ",Object(o.b)("em",{parentName:"p"},"each line")," in the above code, and ",Object(o.b)("strong",{parentName:"p"},"understand")," the meaning of every line."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n")),Object(o.b)("p",null,"This line forces us to define every variable we are going to use. "),Object(o.b)("p",null,"For more information please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),Object(o.b)("p",null,"In this line, we create a variable which we named as ",Object(o.b)("inlineCode",{parentName:"p"},"swApp")," and the type of this ",Object(o.b)("inlineCode",{parentName:"p"},"swApp")," variable is ",Object(o.b)("inlineCode",{parentName:"p"},"SldWorks.SldWorks"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),Object(o.b)("p",null,"In this line, we create a variable which we named as ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc")," and the type of this ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc")," variable is ",Object(o.b)("inlineCode",{parentName:"p"},"SldWorks.ModelDoc2"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Boolean Variable\nDim BoolStatus As Boolean\n")),Object(o.b)("p",null,"In this line, we create a variable named ",Object(o.b)("inlineCode",{parentName:"p"},"BoolStatus")," as ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," object type."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n")),Object(o.b)("p",null,"In above line, we create variable ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchManager")," for ",Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(o.b)("p",null,"As the name suggested, a ",Object(o.b)("strong",{parentName:"p"},"Sketch Manager")," holds variours methods and properties to manage ",Object(o.b)("em",{parentName:"p"},"Sketches"),"."),Object(o.b)("p",null,"To see methods and properties related to ",Object(o.b)("inlineCode",{parentName:"p"},"SketchManager")," object, please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this page")),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n")),Object(o.b)("p",null,"In this line, we Create a variable which we named as ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchSegment")," and the type of this ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchSegment")," variable is ",Object(o.b)("inlineCode",{parentName:"p"},"SldWorks.SketchSegment"),"."),Object(o.b)("p",null,"We create variable ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchSegment")," for ",Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Segments"),"."),Object(o.b)("p",null,"To see methods and properties related to ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchSegment")," object, please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this page")),"."),Object(o.b)("p",null,"These all are our global variables."),Object(o.b)("p",null,"As you can see in code sample, they are ",Object(o.b)("strong",{parentName:"p"},"Solidworks API Objects"),"."),Object(o.b)("p",null,"So basically I group all the ",Object(o.b)("strong",{parentName:"p"},"Solidworks API Objects")," in one place."),Object(o.b)("p",null,"I have also place ",Object(o.b)("inlineCode",{parentName:"p"},"boolean")," type object at top also, because after certain point we will ",Object(o.b)("em",{parentName:"p"},"need")," this variable frequently."),Object(o.b)("p",null,"Thus, I have started placing it here."),Object(o.b)("p",null,"Next is our ",Object(o.b)("inlineCode",{parentName:"p"},"Sub")," procedure which has name of ",Object(o.b)("inlineCode",{parentName:"p"},"main"),". "),Object(o.b)("p",null,"This procedure hold all the ",Object(o.b)("em",{parentName:"p"},"statements (instructions)")," we give to computer."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks variable to Solidworks application\nSet swApp = Application.SldWorks\n")),Object(o.b)("p",null,"In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create string type variable for storing default part location\nDim defaultTemplate As String\n' Set value of this string type variable to \"Default part template\"\ndefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n")),Object(o.b)("p",null,"In 1st statement of above example, we are defining a variable of ",Object(o.b)("inlineCode",{parentName:"p"},"string")," type and named it as ",Object(o.b)("inlineCode",{parentName:"p"},"defaultTemplate"),"."),Object(o.b)("p",null,"This variable ",Object(o.b)("inlineCode",{parentName:"p"},"defaultTemplate"),", hold the location the location of ",Object(o.b)("strong",{parentName:"p"},"Default Part Template"),"."),Object(o.b)("p",null,"In 2nd line of above example. we assign value to our newly define ",Object(o.b)("inlineCode",{parentName:"p"},"defaultTemplate")," variable."),Object(o.b)("p",null,"We assign the value by using a ",Object(o.b)("em",{parentName:"p"},"Method")," named ",Object(o.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()"),". "),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()")," method is a part of our main Solidworks variable ",Object(o.b)("inlineCode",{parentName:"p"},"swApp"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks document to new part document\nSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n")),Object(o.b)("p",null,"In this line, we set the value of our ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc")," variable to new document."),Object(o.b)("p",null,"For ",Object(o.b)("strong",{parentName:"p"},"detailed information")," about these lines please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(o.b)("p",null,"I have discussed them ",Object(o.b)("strong",{parentName:"p"},"thoroghly")," in ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post, so do checkout this post if you don't understand above code."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Select Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(o.b)("p",null,"In above line, we select the ",Object(o.b)("em",{parentName:"p"},"front plane")," by using ",Object(o.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(o.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(o.b)("p",null,"For more information about selection method please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch manager for our sketch\nSet swSketchManager = swDoc.SketchManager\n")),Object(o.b)("p",null,"In above line, we set the sketch manager variable to current document's sketch manager."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Insert a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(o.b)("p",null,"In above line, we use ",Object(o.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(o.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(o.b)("inlineCode",{parentName:"p"},"True")," value."),Object(o.b)("p",null,"This method allows us to insert a sketch in selected plane."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch Segment value and Create Line 1\nSet swSketchSegment = swSketchManager.CreateLine(0, 0, 0, 1, 0, 0)\n")),Object(o.b)("p",null,"In above line, we set the value of Solidworks Sketch Segment variable ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchSegment")," by ",Object(o.b)("inlineCode",{parentName:"p"},"CreateLine")," method from ",Object(o.b)("em",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"CreateLine")," method creates Lines between 2 given points."),Object(o.b)("p",null,"For more information about ",Object(o.b)("inlineCode",{parentName:"p"},"CreateLine")," method, you can read my ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-line"}),"Solidworks Sketch Macros - Create Line"))," post."),Object(o.b)("p",null,"This post describe all the parameters we need for this ",Object(o.b)("inlineCode",{parentName:"p"},"CreateLine")," method."),Object(o.b)("p",null,"In above line, we create a Line between origin of Sketch (0, 0, 0) and 1 distance in X-axis direction."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch Segment value and Create Line 2\nSet swSketchSegment = swSketchManager.CreateLine(1.5, 0, 0, 1.5, 1, 0)\n")),Object(o.b)("p",null,"In above line we create Line 2 by using same ",Object(o.b)("inlineCode",{parentName:"p"},"CreateLine")," method from ",Object(o.b)("em",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(o.b)("p",null,"In above code, we create our 2nd line between ",Object(o.b)("strong",{parentName:"p"},"point (1.5, 0, 0)")," and ",Object(o.b)("strong",{parentName:"p"},"point (1.5, 1, 0)"),"."),Object(o.b)("p",null,"This line start at 1.5 distance in X-axis and ends at a distance of 1 in Y-axis."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the lines after creation\nswDoc.ClearSelection2 True\n")),Object(o.b)("p",null,"After creating both lines we de-select those lines."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"We ",Object(o.b)("strong",{parentName:"p"},"don't need")," to de-select the lines for ",Object(o.b)("strong",{parentName:"p"},"Trim operation")," as I will select those lines agains in next 2 lines. I just want to show you how to select a ",Object(o.b)("strong",{parentName:"p"},"Sketch Segment")," with ",Object(o.b)("inlineCode",{parentName:"p"},"SelectById")," Menthod."))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Select Line 1\nBoolStatus = swDoc.Extension.SelectByID2("Line1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n\' Select Line 2\nBoolStatus = swDoc.Extension.SelectByID2("Line2", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(o.b)("p",null,"In above line, we select ",Object(o.b)("strong",{parentName:"p"},"Line 1 and 2"),"."),Object(o.b)("p",null,"The thing to notice here is that ",Object(o.b)("em",{parentName:"p"},"Append")," value I set to ",Object(o.b)("inlineCode",{parentName:"p"},"False")," for ",Object(o.b)("strong",{parentName:"p"},"Line 1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"True")," for ",Object(o.b)("strong",{parentName:"p"},"Line 2"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Line 1")," is 1st entity in items of selection hence we can use ",Object(o.b)("inlineCode",{parentName:"p"},"False")," here."),Object(o.b)("p",null,"For ",Object(o.b)("strong",{parentName:"p"},"Line 2"),", we want to add this line into Selection List, hence ",Object(o.b)("em",{parentName:"p"},"Append")," value I set to ",Object(o.b)("inlineCode",{parentName:"p"},"True"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Trim selected Sketch Segments by "SketchTrim" method from Solidworks sketch manager\nBoolStatus = swSketchManager.SketchTrim(swSketchTrimChoice_e.swSketchTrimCorner, 0.0, 0.0, 0.0)\n')),Object(o.b)("p",null,"In above line, we ",Object(o.b)("strong",{parentName:"p"},"Trim")," selected ",Object(o.b)("em",{parentName:"p"},"Sketch Segments")," by ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method from ",Object(o.b)("em",{parentName:"p"},"Solidworks sketch manager"),"."),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"SketchTrim")," method takes following parameters:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Option")," : ",Object(o.b)("em",{parentName:"p"},"Sketch trim options as defined in ",Object(o.b)("inlineCode",{parentName:"em"},"swSketchTrimChoice_e"))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimChoice_e")," we have following options:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimClosest")," : This option Trim Closest selected Sketch Entity.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimCorner")," : This option Trim/Extend Corners of selected Sketch Entity.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimEntities")," : This option Trim/Delete selected Sketch Entity.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimEntityPoint")," : This option migth be Trim selected Sketch Point or Entity. (I did not know what it do!!!)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimInside")," : This option Trim selected Sketch Entity between ",Object(o.b)("strong",{parentName:"p"},"two boundaries"),"."),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"NOTES")),": Please note following point for this Trim option:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Lines needed"),": For this we need at-least 3 lines.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Boudaries"),": ",Object(o.b)("strong",{parentName:"p"},"1st and 2nd seletced sketch")," act as ",Object(o.b)("strong",{parentName:"p"},"the Boundaries")," for this option.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Trim Entity"),": ",Object(o.b)("strong",{parentName:"p"},"3rd sketch")," is ",Object(o.b)("strong",{parentName:"p"},"the Trimed entity"),". In this option, 3rd sketch between the boundary is trimed.")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimOutside")," : This option Keep selected Sketch Entity between ",Object(o.b)("strong",{parentName:"p"},"two boundaries")," and Trim outside of the boundaries."),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"NOTES")),": Please note following point for this Trim option::"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Lines needed"),": For this we need at-least 3 lines.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Boudaries"),": ",Object(o.b)("strong",{parentName:"p"},"1st and 2nd seletced sketch")," act as ",Object(o.b)("strong",{parentName:"p"},"the Boundaries")," for this option.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Trim Entity"),": ",Object(o.b)("strong",{parentName:"p"},"3rd sketch")," is ",Object(o.b)("strong",{parentName:"p"},"the Trimed entity"),". In this option, 3rd sketch outside of the boundary is trimed.")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimTwoEntities")," : This option Trim/Delete selected ",Object(o.b)("em",{parentName:"p"},"two Sketch Entities"),"."))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"X")," : ",Object(o.b)("em",{parentName:"p"},"X pick location")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Y")," : ",Object(o.b)("em",{parentName:"p"},"Y pick location")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Z")," : ",Object(o.b)("em",{parentName:"p"},"Z pick location")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE:")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"X, Y and Z arguments")," are passed in the ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimClosest")," and ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimEntityPoint")," options.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"Z arguments")," is needed only for ",Object(o.b)("em",{parentName:"p"},"3D Sketch"),"."))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Return Value"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"True"),": If Trim operation is ",Object(o.b)("em",{parentName:"li"},"Success"),".")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"False"),": If Trim operation is ",Object(o.b)("em",{parentName:"li"},"Fail"),".")),Object(o.b)("p",null,"In our code, I have used following values:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Option")," : I have used ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchTrimChoice_e.swSketchTrimCorner")," enumerator as the type of Sketch Trim option."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"X")," : I have used 0.0 value for ",Object(o.b)("em",{parentName:"p"},"X pick location"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Y")," : I have used 0.0 value for ",Object(o.b)("em",{parentName:"p"},"Y pick location"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Z")," : I have used 0.0 value for ",Object(o.b)("em",{parentName:"p"},"Z pick location"),"."),Object(o.b)("p",null,"Below image shows before and after Trim operation on the sketch."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Before Trim Operation")),Object(o.b)("p",null,Object(o.b)("img",{alt:"before_trim",src:n(222).default})),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"After Trim Operation")),Object(o.b)("p",null,Object(o.b)("img",{alt:"after_trim",src:n(223).default})),Object(o.b)("hr",null),Object(o.b)("h3",{id:"note"},"NOTE"),Object(o.b)("p",null,"It is ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"very important"))," to remember that, when you give distance or any other numeric value in ",Object(o.b)("strong",{parentName:"p"},"Solidworks API"),", Solidworks takes that numeric value in ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Meter only")),"."),Object(o.b)("p",null,"Solidworks API does not care about your application's Unit systems."),Object(o.b)("p",null,"For example, I works in ",Object(o.b)("strong",{parentName:"p"},"ANSI")," system means inches for distance. But when I used ",Object(o.b)("strong",{parentName:"p"},"Solidworks API")," through ",Object(o.b)("em",{parentName:"p"},"VBA macros or C#"),", I need to use converted numeric values."),Object(o.b)("p",null,"Because Solidworks API output the distance in ",Object(o.b)("strong",{parentName:"p"},"Meter")," which is not my requirement."),Object(o.b)("hr",null),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the Sketch after creation\nswDoc.ClearSelection2 True\n")),Object(o.b)("p",null,"In the above line of code, we deselect the ",Object(o.b)("strong",{parentName:"p"},"Sketch")," after the ",Object(o.b)("em",{parentName:"p"},"Trim")," operation."),Object(o.b)("p",null,"For de-selecting, we use ",Object(o.b)("inlineCode",{parentName:"p"},"ClearSelection2")," method from our Solidworks document name ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Show Front View after Sketch Trim\nswDoc.ShowNamedView2 "", swStandardViews_e.swFrontView\n')),Object(o.b)("p",null,"In the above line of code, we update the ",Object(o.b)("em",{parentName:"p"},"view orientation")," to ",Object(o.b)("strong",{parentName:"p"},"Front View"),"."),Object(o.b)("p",null,"In my machine, after inserting a sketch view orientation does not changed."),Object(o.b)("p",null,"Because of this I have to update the view to ",Object(o.b)("strong",{parentName:"p"},"Front view"),"."),Object(o.b)("p",null,"For showing ",Object(o.b)("strong",{parentName:"p"},"Front View")," we used ",Object(o.b)("inlineCode",{parentName:"p"},"ShowNamedView2")," method from our Solidworks document name ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(o.b)("p",null,"This method takes 2 parameter described as follows:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"VName")," : Name of the view to display or an empty string to use ViewId instead")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"ViewId")," : ID of the view to display as defined by ",Object(o.b)("inlineCode",{parentName:"p"},"swStandardViews_e")," or -1 to use the ",Object(o.b)("strong",{parentName:"p"},"VName")," argument instead."))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"NOTE:")," If you specify both ",Object(o.b)("strong",{parentName:"p"},"VName")," and ",Object(o.b)("strong",{parentName:"p"},"ViewId"),", then ",Object(o.b)("strong",{parentName:"p"},"ViewId")," takes precedence if the two arguments do not resolve to the same view."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"swStandardViews_e")," has following Standard View Types:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swBackView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swBottomView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swDimetricView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swFrontView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swIsometricView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swLeftView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swRightView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swTopView"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"swTrimetricView")))),Object(o.b)("p",null,"In our code, we did not use ",Object(o.b)("strong",{parentName:"p"},"VName")," instead I used ",Object(o.b)("em",{parentName:"p"},"empty string")," in form of ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},'""'))," symbol."),Object(o.b)("p",null,"I used ",Object(o.b)("strong",{parentName:"p"},"ViewId")," value to specify view and used ",Object(o.b)("inlineCode",{parentName:"p"},"swStandardViews_e.swFrontView")," value to use ",Object(o.b)("em",{parentName:"p"},"Standard Front View"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Zoom to fit screen in Solidworks Window\nswDoc.ViewZoomtofit\n")),Object(o.b)("p",null,"In this last line we use ",Object(o.b)("em",{parentName:"p"},"zoom to fit")," command."),Object(o.b)("p",null,"For Zoom to fit, we use ",Object(o.b)("inlineCode",{parentName:"p"},"ViewZoomtofit")," method from our Solidworks document variable ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(o.b)("p",null,"This is it !!!"),Object(o.b)("p",null,"If you found anything to add or update, please let me know on my e-mail."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"vba-language-feature-used-in-this-post"},"VBA Language feature used in this post"),Object(o.b)("p",null,"In this post used some features of ",Object(o.b)("strong",{parentName:"p"},"VBA programming language"),"."),Object(o.b)("p",null,"This section of post, has some brief information about the VBA programming language specific features."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"We use ",Object(o.b)("strong",{parentName:"li"},"Option Explicit")," for capturing un-declared variables.")),Object(o.b)("p",null,"If you want to read more about ",Object(o.b)("strong",{parentName:"p"},"Option Explicit")," then please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-variables-decl"}),"Declaring and Scoping of Variables")),"."),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Then we create ",Object(o.b)("strong",{parentName:"li"},"variable")," for different data types.")),Object(o.b)("p",null,"If you don't know about them, then please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-variables"}),"Variables"))," and ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-prog-concept#data-types-in-vba"}),"Data-types"))," posts of this blog."),Object(o.b)("p",null,"These posts will help you to understand what ",Object(o.b)("strong",{parentName:"p"},"Variables")," are and how to use them."),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},"Then we create ",Object(o.b)("strong",{parentName:"li"},"main Sub procedure")," for our macro.")),Object(o.b)("p",null,"If you don't know about the ",Object(o.b)("strong",{parentName:"p"},"Sub procedure"),", then I suggest you to visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-procedures"}),"VBA Sub and Function Procedures"))," and ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-procedures-exec"}),"Executing Sub and Function Procedures"))," posts of this blog."),Object(o.b)("p",null,"These posts will help you to understand what ",Object(o.b)("strong",{parentName:"p"},"Procedures")," are and how to use them."),Object(o.b)("ol",{start:4},Object(o.b)("li",{parentName:"ol"},"In most part we create some variables and set their values. We set those values by using some ",Object(o.b)("strong",{parentName:"li"},"functions")," provided from objects.")),Object(o.b)("p",null,"If you don't know about the ",Object(o.b)("strong",{parentName:"p"},"functions"),", then you should visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-functions"}),"VBA Functions"))," and ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-functions-adv"}),"VBA Functions that do more"))," posts of this blog."),Object(o.b)("p",null,"These posts will help you to understand what ",Object(o.b)("strong",{parentName:"p"},"functions")," are and how to use them."),Object(o.b)("hr",null),Object(o.b)("h2",{id:"solidworks-api-objects"},"Solidworks API Objects"),Object(o.b)("p",null,"In this post of ",Object(o.b)("strong",{parentName:"p"},"Sketch Trim"),", we use ",Object(o.b)("em",{parentName:"p"},"Solidworks API objects and their methods"),"."),Object(o.b)("p",null,"This section contains the list of all ",Object(o.b)("strong",{parentName:"p"},"Solidworks Objects")," used in this post."),Object(o.b)("p",null,"I have also attached links of these ",Object(o.b)("strong",{parentName:"p"},"Solidworks API Objects")," in ",Object(o.b)("strong",{parentName:"p"},"API Help website"),"."),Object(o.b)("p",null,"If you want to explore those objects, you can use these links."),Object(o.b)("p",null,"These Solidworks API Objects are listed below:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Solidworks Application Object")),Object(o.b)("p",{parentName:"li"},"If you want explore ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(o.b)("strong",{parentName:"p"},"Solidworks Application Object")," object you can visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISldWorks_members.html"}),"this link")),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Solidworks Document Object")),Object(o.b)("p",{parentName:"li"},"If you want explore ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(o.b)("strong",{parentName:"p"},"Solidworks Document Object")," object you can visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IModelDoc2_members.html"}),"this link")),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Manager Object")),Object(o.b)("p",{parentName:"li"},"If you want explore ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Manager Object")," you can visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this link")),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Segment Object")),Object(o.b)("p",{parentName:"li"},"If you want explore ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Segment Object")," you can visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this link")),"."))),Object(o.b)("hr",null),Object(o.b)("p",null,"Hope this post helps you to ",Object(o.b)("em",{parentName:"p"},"Trim")," Sketch Entities with Solidworks VB Macros."),Object(o.b)("p",null,"For more such tutorials on ",Object(o.b)("strong",{parentName:"p"},"Solidworks VBA Macros"),", do come to this blog after sometime."),Object(o.b)("p",null,"Till then, Happy learning!!!"))}s.isMDXComponent=!0}}]);
var store = [{
        "title": "Solidworks C++ API",
        "excerpt":"   Disclaimer, this page is only for my learning purpose!!!    Nothing special I have to say or write for this Solidworks C++ API tutorials.   I will start posting on Solidworks C++ API tutorials along with Solidworks VBA tutorials on regular basis.   For whom this section might be interested?           Those who want to learn Solidworks C++ API            Student doing Masters in CAD/CAM            Casual programmers like myself who want to apply what is learnt!       One thing is sure, I am not going to explain in very detail because I am more of a .NET developer not a C++ Developer.   I just want to explore C++ in Visual studio and best way to do is writing some program using my existing knowledge of Solidworks C# API.   So Solidworks C++ API posts are more “how” to type not much descriptive like Solidworks VBA posts, which tends to describe all in detailed manner.   That’s it!!!   I hope you will like this and enjoy this section also.   Thanks!!!  ","categories": [],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/Solidworks-cpp-api-tutorials/",
        "teaser": null
      },{
        "title": "Solidworks C++ API - Prerequisite",
        "excerpt":"In this post, I tell you what you need to start with Solidworks C++ API:           Of course, Solidworks is required. Any version will do. But Solidworks 2016 or more is preferable.            We need Visual studio Community edition and we will download it for free.            Knowledge of C++ programming language.       Visual Studio Community edition   Since we want to learn Solidworks C++ API. We need Solidworks Software.   So I assume that you have it otherwise you don’t come to this website!   Now we need Visual Studio Community edition and Visual Studio 2019 Community edition is the latest version.   If you are downloading 1st time, then download 2019 version.   I have Visual Studo 2017 Community edition installed hence I will use 2017 Community version which is a free version for learning purpose.   One benefit of using Visual Studio is that it is a industry standard IDE hence if someone wants to do a job as developer s/he can use it and have the experience.   There are lots of videos out there which show you how to download Visual Studio Community edition.   One such video is shown below. Please go through that video which provide you all steps.        Please note that this video is 2 years old but still relevent, URLs are same for downloading purpose.   Benefit of this video is that it is part of C++ tutorial in Visual studio.   Knowledge of C++ programming language   If you don’t have Knowledge of C++ programming language, then you can use any course from YouTube.   I personally find below playlist more useful, so if you like you can learn from below playlist also.        This is it !!!   Now we are ready to start our 1st Hello World program in Solidworks using Solidworks C++ APIs.   Hope this post helps you to setup softwares.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-C++-API"],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/solidworks-cpp/Prerequisite/",
        "teaser": null
      },{
        "title": "Open Solidworks & Hello World",
        "excerpt":"In this post, I tell you about how to Open Solidworks using Solidworks C++ API from Visual Studio.   I hope you have setup Visual Studio community version.   If not then please go to Solidworks C++ API - Prerequisite post and watch the suggested videos before proceeding further.     Video of Code on YouTube   Please see below video on how to Open Solidworks using Solidworks C++ API from Visual Studio.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Create a New project   Fist, we will create a new project in Visual Studio.   There are 3 different ways for creating a new project.           From File -&gt; New -&gt; Project            From New Prject icon.            Keyboard Short-cut i.e. Ctrl+Shift+N.       Below image show how to create a New Project from File option:      In above image, see Red color box.   Below image show how to create a New Project from New Project Icon option:      In above image, see Red color box.   When we select one of the above option we get a new window which is shown in below.      In above image I have numbered the Red colored box.   These numbers are explained below:           The programming language you want to use for New Project. For our purpose, we use “Visual C++”.            It is, which type of project you want to create. There are 3 different type of projects we can create. In above image, we will create an empty project.            It is the name of project we want to create. We named our project as OpenSolidworkTest.            The location of project we want. We use default location provided in above image.            It is option if we want to create a Solution file for this project or not. In our case, we want to create a Solution file.            Hit Ok button after completing all fields.         Add Source file   After creating a new project, we get a screen as shown in below image.      This project has no file to write.   Now we add a cpp file into Source Files filter folder.   For this please follow given steps:           For this select Source Files filter folder and Click Right Mouse Button (RMB).            By doing this a context menu is appear as shown in below image.            From this context menu, select “Add” –&gt; “New Item”, as shown in below image.          This will open a new window as shown in below image.      Just select “Add” option as shown in above image.   This will add “Source.cpp” file into our project.     Add References to Solidworks Type Library files   Now we need to add References to Solidworks Type Library files.   For this please follow below steps.           Select the OpenSolidworkTest project and and Click Right Mouse Button (RMB).            By doing this a context menu is appear as shown in below image.            From this context menu, select “Properties” option, which is the last one, as shown in below image.          This will open a new window as shown in below image.      Now following below steps:           Select C/C++ option            Add SOLIDWORKS folders path to 2nd Red colored box as shown in below image. Usually this path is “C:\\Program Files\\ Solidworks Corp\\SOLIDWORKS” if installed in default location.          After adding the folder path, select “Apply” button.   This complete the process of adding References to Solidworks Type Library files.     Add Code to Source.cpp file   Now we need to add to Source.cpp file.   Please copy the below code sample to your Source.cpp file.   #include &lt;atlbase.h&gt;  #import \"sldworks.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids  // SOLIDWORKS type library  #import \"swconst.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids   // SOLIDWORKS constants type library  int main() { \t// Initialize COM \t// Do this before using ATL smart pointers so COM is available. \tCoInitialize(NULL);  \t// Use a block, so the smart pointers are destructed when the scope of this block is left \t{ \t\t// COM Pointer of Soldiworks object \t\tCComPtr&lt;ISldWorks&gt; swApp;  \t\t// Create an instance of Solidworks application \t\t// If it fails then return 0 and close program \t\tif (swApp.CoCreateInstance(__uuidof(SldWorks), NULL, CLSCTX_LOCAL_SERVER) != S_OK)  \t\t{ \t\t\t// Stop COM  \t\t\tCoUninitialize(); \t\t\treturn(0); \t\t}  \t\t// If created successfully, then visible the Solidworks \t\tswApp-&gt;put_Visible(VARIANT_TRUE);  \t\t// COM Style String for message to user \t\tCComBSTR _messageToUser(L\"Hello World!!! I am from Solidworks C++ API.\");  \t\t// long type variable to store the result value by user \t\tlong _lMessageResult;  \t\t// Send a message to user and store the return value in _lMessageResult by referencing it \t\tswApp-&gt;SendMsgToUser2(_messageToUser, swMessageBoxIcon_e::swMbInformation, swMessageBoxBtn_e::swMbOk, &amp;_lMessageResult); \t}  \t// Stop COM  \tCoUninitialize(); }   Now Build the Solution as shown in below image.      After Building Solution run the program by pressing F5.     Final Result   After running the program wait for few minute.   You will get result as shown in below image!!!        This is it !!!   We have completed our Hello World program in Solidworks using Solidworks C++ APIs.   Hope this post helps you to start with Solidworks C++ API.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not! I will continue creating Solidworks C++ posts.   Till then, Happy learning!!!  ","categories": ["Solidworks-C++-API"],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/solidworks-cpp/open-solidworks/",
        "teaser": null
      },{
        "title": "Open Solidworks Part Document",
        "excerpt":"In this post, I tell you about how to Open Solidworks Part Document using Solidworks C++ API from Visual Studio.   I hope you have setup Visual Studio community version.   If not then please go to Solidworks C++ API - Prerequisite post and watch the suggested videos before proceeding further.     Video of Code on YouTube   Please see below video on how to Open Solidworks Part Document using Solidworks C++ API from Visual Studio.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Create a New project   Fist, we will create a new project in Visual Studio.   As shown in below image I have created a new project named OpenPartDocument in Visual Studio.      If you want to know more detail for Creating a New Project in Visual Studio, please visit Create a New project section of Solidworks C++ API - Open Solidworks &amp; Hello World post.     Add Source file   After creating a new project, we need to Add Source file to our project.   I have already explain each steps taken to create/add a “Source.cpp” into our project in Add Source file section of Solidworks C++ API - Open Solidworks &amp; Hello World post.   This will add “Source.cpp” file into our project.     Add References to Solidworks Type Library files      This section is copy/paste from Solidworks C++ API - Open Solidworks &amp; Hello World post.    Now we need to add References to Solidworks Type Library files.   For this please follow below steps.           Select the OpenSolidworkTest project and and Click Right Mouse Button (RMB).            By doing this a context menu is appear as shown in below image.            From this context menu, select “Properties” option, which is the last one, as shown in below image.          This will open a new window as shown in below image.      Now following below steps:           Select C/C++ option            Add SOLIDWORKS folders path to 2nd Red colored box as shown in below image. Usually this path is “C:\\Program Files\\ Solidworks Corp\\SOLIDWORKS” if installed in default location.          After adding the folder path, select “Apply” button.   This complete the process of adding References to Solidworks Type Library files.     Add Code to Source file   Now we need to add to Source.cpp file.   Please copy the below code sample to your Source.cpp file.   #include &lt;atlbase.h&gt;  #import \"sldworks.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids  // SOLIDWORKS type library  #import \"swconst.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids   // SOLIDWORKS constants type library  int main() { \t// Initialize COM \t// Do this before using ATL smart pointers so COM is available. \tCoInitialize(NULL);  \t// Use a block, so the smart pointers are destructed when the scope of this block is left \t{ \t\t// COM Pointer of Soldiworks object \t\tCComPtr&lt;ISldWorks&gt; swApp;  \t\t// COM Pointer of Soldiworks Model Document \t\tCComPtr&lt;IModelDoc2&gt; swDoc;  \t\t// Variable to check if function is  \t\tHRESULT result = NOERROR;  \t\t// COM Style String for message to user \t\tCComBSTR _messageToUser;  \t\t// long type variable to store the result value by user \t\tlong _lMessageResult;  \t\t// Create an instance of Solidworks application \t\t// If it fails then return 0 and close program \t\tif (swApp.CoCreateInstance(__uuidof(SldWorks), NULL, CLSCTX_LOCAL_SERVER) != S_OK)  \t\t{ \t\t\t// Stop COM  \t\t\tCoUninitialize(); \t\t\treturn(0); \t\t}  \t\t// COM Style String to store document type \t\tCComBSTR _documentType;  \t\t// Get the Default Part document \t\tswApp-&gt;GetUserPreferenceStringValue(swUserPreferenceStringValue_e::swDefaultTemplatePart, &amp;_documentType);  \t\t// Create a new Part Document  \t\tresult = swApp-&gt;INewDocument2(_documentType, 0, 0, 0, &amp;swDoc);  \t\t// If there are no Default Part document assign then show a message to user \t\t// and Stop COM, Visible the Solidworks and return the function \t\tif (result != S_OK) \t\t{ \t\t\t// COM Style String for message to user \t\t\t_messageToUser = (L\"Failed to open document.\\nPlease try again.\");  \t\t\t// Send a message to user and store the return value in _lMessageResult by referencing it \t\t\tswApp-&gt;SendMsgToUser2(_messageToUser, swMessageBoxIcon_e::swMbInformation, swMessageBoxBtn_e::swMbOk, &amp;_lMessageResult);  \t\t\t// Visible the Solidworks \t\t\tswApp-&gt;put_Visible(VARIANT_TRUE);  \t\t\t// Stop COM  \t\t\tCoUninitialize(); \t\t\treturn(0); \t\t}  \t\t// If created successfully, then visible the Solidworks \t\tswApp-&gt;put_Visible(VARIANT_TRUE); \t}  \t// Stop COM  \tCoUninitialize(); }   Now Build the Solution as shown in below image.      After Building Solution run the program by pressing F5.     Final Result   After running the program wait for few minute.   You will get result as shown in below image!!!        Issues and Solutions   There are some issues I can think of which might be come to some people.   Those are as follows:   Issue 1:   Program closed without open Solidworks!   Solution:   I you face this issue, then open Solidworks Manually one time, close it and then run the program.  It will solve this issue.   Issue 2:   Program unable to create Part Document   Solution:   This is a tricky one!!!  If you face this issue, then you need to confirm in Solidworks that you have assigned the \"default Part template\".  Please refer to below image for proper setting to fix this issue.      I hope this will helpful!!!     This is it !!!   We have completed our Open Part Document program in Solidworks using Solidworks C++ APIs.   Hope this post helps you to start with Solidworks C++ API.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not! I will continue creating Solidworks C++ posts.   Till then, Happy learning!!!  ","categories": ["Solidworks-C++-API"],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/solidworks-cpp/open-part-document/",
        "teaser": null
      },{
        "title": "VBA In Solidworks",
        "excerpt":"Solidworks provides us two methods for open Visual Basic for Application.      Menu based method   Toolbarmethod   Please see below video for visual details.     Menu Base Method   To open VBA window, go Tools in menu bar. Then go to Macro. When you click Macro you found 5 options or button. (Menu bar -&gt; Tool -&gt; Macro)      Use below images for better help.    Click Tools as show below.      Click Macro as show below.      After clicking Macro below options appears      Description and working of each button will be given after next method.   Toolbarmethod   To open VBA window, click Right Mouse Button anywhere in screen.   By doing this a list of all available Toolbar option appears. In this list, we need to select Macro toolbar to show macro toolbar.      Use below images for better help.    After clicking of Right Mouse Button below Toolbar list appears.      From this list we need to select Macro option as show below.      After clicking “Macro” option below toolbar appears.      This option includes same buttons as described in Menu based method.   Description and Functions of each button is given below.   New Macro Button    You can create a new macro by this button and then program the macro in VBA.   Creating a macro is different from recording a macro. When you create a new macro, you program the macro directly from a editing application such as Visual Basic Editor.   When you record a macro, you create the macro within the Solidworks software.   To create a new macro:           Click New Macro  (Macro toolbar), or click Tools -&gt; Macro -&gt; New.            Type a file name.            Click Save       Your macro editing application opens ready for you to program the new macro.   Record/Pause Macro Button    You can record operations performed with the Solidworks user interface and replay them with Solidworks macros.   A macro contains equivalent API functions. These API functions were made when the operation were performed with the user interface.   A macro can record your mouse clicks, menu choices and keystrokes to play back later.   To record a macro:           Click Record/Pause Macro Button  (Macro toolbar), or click Tools -&gt; Macro -&gt; Record.            Perform the steps you want to record.            When you are done, click Stop Macro Button  (Macro toolbar), or click Tools -&gt; Macro -&gt; Stop.       In the dialog box, type a name for File name and click Save. (The .swp extension is automatically added to the filename.)   Run Macro Button    You can run macro from the Macro toolbar or Tools menu.   To run a macro:           Click Run Macro Button  (Macro toolbar), or click Tools -&gt; Macro -&gt; Run.            In the dialog box, locate a macro file (.swp, .swb) and click Open.       Edit Macro Button    You can edit macro from the Macro toolbar or Tools menu.   To run a macro:           Click Edit Macro Button  (Macro toolbar), or click Tools -&gt; Macro -&gt; Edit.            In the dialog box, locate a macro file (.swp, .swb) and click Open.            Edit the macro.       Next post will be about Open new Part document using Solidworks macros.    ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/vba-in-solidworks/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Open new Part document",
        "excerpt":"As the title suggested, in this post, we open new document from Solidworks VBA macros.   Also we understand each and every line of written code. So that you can understand why we written those lines and get some knowledge about how to write macro properly.   Please see below video for visual details.     To do this, we first need to create a new empty macro. If you don’t know how to create an empty macro; then please go to this VBA in Solidworks post.   After creating an empty macro, you need to copy paste below code into this empty macro.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default part location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default part template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)      ' Setting Solidworks document to new part document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  End Sub   This code opens a new default part template in Solidworks.   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   This is very important because if you don’t declare above line, it is very difficult to caught typo errors in variable names.   This type of error comes, when you mistakenly type wrong spelling of your defined variable.   In this case, VBE thinks that you have defined a new variable and use this variable.   This causes issues because your program runs perfectly but you didn’t get the desired result.   This most of the time discourage people and ultimately they left the programming.   So be on safe side and use this Option Explicit line in your every module.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   As the comments in above code sample shows, in these 2 lines we are creating variables of different type.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   If we omit 1 SldWorks, then our VBE show error if we try to run this macro.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Here, if we omit SldWorks, the compiler won’t give error. I used it to know who is the parent object.   ModelDoc2 is the a object, which holds properties and methods related to this a document.   These methods and properties are common to part, assembly and drawing documents.   You can see more about ModelDoc2 in this help link.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.      Now it important to know that when you defined a variable of different type, which is not a common type, then you need to set the variable also.    This is a standard way to set Solidworks application. This way is given in many Solidworks API VBA example.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   To access this method, we need to write swApp variable and then use a “.” to access the Public properties and Methods inside this variable.      This “.” is called Dot operator. This operator provides us the access to the Public properties and Methods inside an object.    When you type after a “.” you will notice that Visual Basic Editor automatically provides a list of properties and methods inside this swApp object. This helps us to write correct name for these methods and properties.   Now we get the function GetUserPreferenceStringValue(). But this function needs some input to work with. This inputs are generally called Parameters.      In programming voculabury, we need to pass the parameter to this function so that this function can worked.    This input parameter is a single value from a list of other values. This list is stored in swUserPreferenceStringValue_e object.   In Solidworks API, if anything has _e after it, it means that this object contains some type of lists. It is important to know because we frequently use these type of lists. They are called enum. The value they hold is called Constant.   So our function GetUserPreferenceStringValue() needs some constant value from swUserPreferenceStringValue_e enum list to work.   Since we want Default part template, we use swDefaultTemplatePart constant value from the swUserPreferenceStringValue_e enum list.      Please note that there are lots of values inside this enum list. You can see these values from this link].    Now we just need to set the value of our swDoc variable to new document. We set the value as shown in below code snippet.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   To set the value of swDoc, we use NewDocument() method. This method is inside swApp, hence we first need to invoke swApp and then by using Dot operator we access the NewDocument() method.   Now this method needs 4 parameters (or input values) to work. If we don’t provide any of these required value we get errors.   These 4 parameters are as follows:           TemplateName              This can be a full path of the template, which we use to create New document.                PaperSize              Size of paper                Width              Width of paper                Height              Height of paper           When successfully implemented, this method creates a new document.   If this method failes to create a new document in that case this return NULL value. We can use this NULL value to check if the operation is successfull or not.   In our example, we use defaultTemplate variable as TemplateName parameter and use 0 in all other 3 parameter.      Please note that PaperSize, Width and Height is used only if we want to create a new Drawing document.    This is all for now. This post is getting too long.   In next post I will tell you how to create a new Assembly document and new Drawing document.    ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/open-new-document/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Open Assembly and Drawing document",
        "excerpt":"In this post, we see how to open following documents with Solidworks VBA macro:           Solidworks Assembly document            Solidworks Drawing document                       Without Pre-defined Sheet size                        With Pre-defined Sheet size                        With Custom Sheet size                   Solidworks Assembly Document   The code for opening default Assembly document is identical to the default Part template with only one change.   First, let us see the code to open default Assembly document.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default Assembly location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)      ' Setting Solidworks document to new Assembly document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  End Sub   As you can see in the above code and the code is given in the previous post is almost identically.   In case you have not read my previous post (Solidworks Macros - Open new Part document), I recommend you to read that post first.   I have already explained each and every line in this code there. So I will not explain them in this post.   To open default assembly template, you just need to change defaultTemplate variable and use swDefaultTemplateAssembly in place of swDefaultTemplatePart.   With this you can open a new assembly document.     Solidworks Drawing Document without Defining Paper size   To open new Default drawing document we use same code as used above but with slight modification.   If we make similar change as we have done for Assembly document then we open Default drawing document without specifying sheet size.   The code sample shows how to do it.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default drawing location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)      ' Setting Solidworks document to new drawing document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  End Sub     Solidworks Drawing Document with Default Paper size   To open a new Drawing with pre-define sheet size we use following code sample:   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default drawing location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default drawing template\" with pre-define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)      ' Setting Solidworks document to new drawing document     Set swDoc = swApp.NewDocument(defaultTemplate, swDwgPaperSizes_e.swDwgPaperA4sizeVertical, 0, 0)  End Sub   This code is similar to what we have used in the previous section but has a one modification.   That is while setting the document (at Set Doc) we define Paper size or Sheet size.   I used A4 Sheet with vertical orientation by using swDwgPaperSizes_e.swDwgPaperA4sizeVertical enumarator.   You can use other values from this list.     Solidworks Drawing Document with Custom Paper size   To open a new Drawing with Custom sheet size we use following code sample:   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default drawing location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default drawing template\" with custom paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)      ' Setting Solidworks document to new drawing document     Set swDoc = swApp.NewDocument(defaultTemplate, swDwgPaperSizes_e.swDwgPapersUserDefined, 2, 3)  End Sub   For custom paper size, we need to use swDwgPaperSizes_e.swDwgPapersUserDefined value of paper size.   Since we are using custom value, we need to define paper width and paper height also.      It important to remember that API use Metric system only. So you need to use the converted value in defining paper width and paper height.    This is all for now. In the next post I will tell you how select a plane in a part document and if possible how to create a skecth segment.   ","categories": ["solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/open-assembly-and-drawing/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Selection Methods",
        "excerpt":"In this post, we select Default planes with following methods:           By SelectByID method From ModelDoc2 Interface            By SelectByID2 method From IModelDocExtension Interface       By SelectByID method From ModelDoc2 Interface   SelectByID method From ModelDoc2 Interface is the easiest method for selecting Default plane.   I will explain the use of this method in 2 different scenerio as follows:           Using this method in the previous example of creating a new document and then select a Plane.            Using this method in an open document.       Using SelectByID method in previous example   In the previous 2 posts, we learned how to create a new part document, an assembly document, and a drawing document.   Now we use the same code and extended it for using selecting planes.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default part location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default part template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)      ' Setting Solidworks document to new part document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Selecting Front Plane     BoolStatus = swDoc.SelectByID(\"Front Plane\", \"PLANE\", 0, 0, 0)  End Sub   Above code, 1st create a new part document and then select “Front Plane” in VBA macro.   To select the plane, I have to add 2 lines. 1st I create a boolean varible above main function as shown in below code:   ' Boolean Variable Dim BoolStatus As Boolean   Then I use this BoolStatus variable to selecting Front Plane as shown in below code:   ' Selecting Front Plane BoolStatus = swDoc.SelectByID(\"Front Plane\", \"PLANE\", 0, 0, 0)   SelectByID takes following parameters:           Name : Name of the object or an empty string            Type : Type of object in uppercase or an empty string            X : X selection location            Y : Y selection location            Z : Z selection location       Return Value -   If the item is select then this method returns True and otherwise False.   Since this method returns True or False, hence we use a boolean variable to perfom this method.   If we want to select Right Plane then we just need to replace \"Front Plane\" -&gt; \"Right Plane\" in previous code sample.   Similar for selecting Top Plane, we need to replace \"Front Plane\" -&gt; \"Top Plane\" in previous code sample.   Using SelectByID method in an Open document   For using SelectByID method in an open document we use differnet code sample.   The code sample is given below:   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks              ' Setting Solidworks document to active open document     Set swDoc = swApp.ActiveDoc              ' Selecting Front Plane     BoolStatus = swDoc.SelectByID(\"Front Plane\", \"PLANE\", 0, 0, 0)  End Sub   Most of the things in this code sample is already explained previous post and in previous section of this very post.   In this code I have set the Solidworks document variable swDoc to active open document.   And then we use similar method to select “Front Plane”.   As explained in previous section we can select Right Plane and Top Plane.     By SelectByID2 method From IModelDocExtension Interface   This method is similar to SelectByID from previous section infact it is the updated version of previous method.   Since it is updated and has additional functionality, I will explain it I frequently use this method. Previous method is easiest method, by far, for selecting objects.   Since SelectByID2 is updated version of SelectByID it has similar syntax and usage.   I will explain the use of SelectByID2 method in 2 different scenerio as done in previous method:           Using this method in the previous example of creating a new document and then select a Plane.            Using this method in an open document.       Using SelectByID2 method in previous example   Now we use the same code and extended it for using selecting planes by SelectByID2 method.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default part location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default part template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)      ' Setting Solidworks document to new part document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Selecting Front Plane     BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  End Sub   This method is doing the same thing which I already explained in the previous method.   The difference is in the syntax and input parameters.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   As you can see from the above code sample, this method is a method of Extension interface/object.   This Extension interface/object is part of swDoc variable. This variable is the type of ModelDoc2 interface/object.   Apart from that, we need to give additional input parameters also.   Below I have explained about the input parameters of SelectByID2 method:           Name : Name of the object or an empty string            Type : Type of object in uppercase or an empty string            X : X selection location            Y : Y selection location            Z : Z selection location            Append : True or False. It is used the adding the selection into selection list.            Mark : Value you want to use as a Mark; this value is used by other functions that require ordered selection.            Callout : Pointer to the Callout interface/object. (Default value most of the time is nothing.)            SelectOption : Selection option. You can use either swSelectOptionDefault or swSelectOptionExtensive value.       Return Value -   If the item is select then this method returns True and otherwise False.   There is a lot more about this method in the Remark section. For more information visit here.   Since this method returns True or False, here also we use a boolean variable to perfom this method.   If we want to select Right Plane then we just need to replace \"Front Plane\" -&gt; \"Right Plane\" in previous code sample.   Similar for selecting Top Plane, we need to replace \"Front Plane\" -&gt; \"Top Plane\" in previous code sample.   Using SelectByID2 method in an Open document   For using SelectByID2 method in an open document we use same code sample as used in previous method.   The code sample is given below:   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks              ' Setting Solidworks document to active open document     Set swDoc = swApp.ActiveDoc              ' Selecting Front Plane     BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  End Sub   Most of the things in this code sample is already explained previous post and in previous section of this very post.   In this code I have set the Solidworks document variable swDoc to active open document.   And then we use similar method to select “Front Plane”.   As explained in previous section we can select Right Plane and Top Plane.   This is all for now. This post is getting too long.   In next post we learn about Open Saved Documents.   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/select-plane-from-tree/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Open Saved Documents",
        "excerpt":"In this post, I tell you how to open a saved document in Solidworks using VBA Macro.   We open document with 2 different methods.           By OpenDoc method            By OpenDoc6 method       Video of Code on YouTube   Please see below video on how to Open Saved Documents from Visual Studio.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.   By OpenDoc method   This is the simplest method to open a saved part from your computer.   In this method we just need two information.           Location of document to open            Type of document which we want to open       Below is the example code for opening a saved document using OpenDoc method.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean   ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks          ' Open a saved document   Set swDoc = swApp.OpenDoc(\"H:\\Solidworks studies\\API Studies\\Chapter 1 - The Basics\\1st example part.SLDPRT\", swDocumentTypes_e.swDocPART)          ' Selecting Front Plane   BoolStatus = swDoc.SelectByID(\"Front Plane\", \"PLANE\", 0, 0, 0)  End Sub   I have already explained every line except middle line in above code sample in previous posts.   To open a saved document we used following lline.   ' Open a saved document Set swDoc = swApp.OpenDoc(\"H:\\Solidworks studies\\API Studies\\Chapter 1 - The Basics\\1st example part.SLDPRT\", swDocumentTypes_e.swDocPART)   Here, we set the ModelDoc2 variable swDoc to a value.   This value is return or provided by OpenDoc method.   This method is part of Solidworks document.   Since we define swApp variable as Solidworks document hence we 1st call swApp and then using Dot operator we access the OpenDoc method.   OpenDoc method takes 2 arguments or parameter.   FileName : Document name or full path if not in current directory, including extension.   Type : Document type as define in swDocumentTypes_e as follows.           swDocASSEMBLY            swDocDRAWING            swDocLAYOUT            swDocNONE            swDocPART            swDocSDM          If you want to open a Library feature part then we use swDocPART as document type.    Return Value - If the document opens then this method returns True and otherwise False.   If you just want to open a saved document then this method is what you are looking for.   For most of the part, OpenDoc method works well.   If you want more option while opening a document, then next method is for you.     By OpenDoc6 method   OpenDoc6 method is extension to OpenDoc with some additional parameters.   How OpenDoc6 works is shown in below code sample:   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean   ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks              ' Open an saved document     Set swDoc = swApp.OpenDoc6(\"H:\\Solidworks studies\\API Studies\\Chapter 1 - The Basics\\1st example part.SLDPRT\", swDocumentTypes_e.swDocPART, swOpenDocOptions_e.swOpenDocOptions_Silent, \"\", 0, 0)              ' Selecting Front Plane     BoolStatus = swDoc.SelectByID(\"Front Plane\", \"PLANE\", 0, 0, 0)  End Sub   This code sample is similar is to previous example code except for OpenDoc6 method takes extra 4 parameters.   OpenDoc6 method takes 6 arguments or parameter.   FileName : Document name or full path if not in current directory, including extension.   Type : Document type as define in swDocumentTypes_e as follows.           swDocASSEMBLY            swDocDRAWING            swDocLAYOUT            swDocNONE            swDocPART            swDocSDM          If you want to open a Library feature part then we use swDocPART as document type.    Options : Mode in which to open the document as defined in swOpenDocOptions_e.   For more details about Options parameters, please visit this page of Solidworks API Help.   Configuration : Configuration in which you want to open this document.           Applies to Part and Assemblies, not drawings.            If this argument is empty or the specified configuration is not present in the model, the model is opened in the last-used configuration.       I used an \"\" in the above code sample, because I want to open part file in last saved configuration.   If you don’t know about \"\", then this symbol represent an empty string.   When we don’t want to pass any value as string, at that time I use \"\".   You can also use \"\" when you want to pass an empty string in VBA.   Errors : Load errors as defined in swFileLoadError_e.   For more details about Errors parameters, please visit this page of Solidworks API Help.   Since this parameter is long type, and I don’t want to enter any value from the provided list; I used 0 as value.   If you want to use options from option link then you can use values from there.   It is just I don’t want to load any error information about the part.   Warnings : Warnings or extra information generated during the open operation as defined in swFileLoadWarning_e.   For more details about Warnings parameters, please visit this page of Solidworks API Help.   As in the previous parameter, I use 0 as value.   Return Value - If the document opens then this method returns True and otherwise False.   As you can see, in OpenDoc6 method, we need to defined the extra parameters compared to OpenDoc method.   It is worth noted that, OpenDoc6 method is the most updated method for opening a saved document.   Hence if did not use any of the above method, I would recommend you to use OpenDoc6 method.   Hope this post helps you to understand opening methods with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/open-saved-document/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Fix Unit Issue",
        "excerpt":"In this post, I tell you about how to Fix Unit Issue in Solidworks API from VBA Macros in a Sketch.     What is the Issue?   Before going to solution let us see what is the issue we are trying to address.   In my all previous posts, you can see a NOTE (shown below) about Solidworks API.     NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Please see below for detail:           Length: Meter            Angle: Radian       Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     So in this post we address this issue and use this solution in future posts.   For this we take following steps:           Get Unit currently in use in Solidworks.            Apply Select Case on the length of active unit.            We define values of factors i.e. LengthConversionFactor and AngleConversionFactor, these values depends upon the selected Length unit.            After assigning the values, we use them when we need to define any length or angle value.         Code Sample   In below sample VBA macro program, we fix the issue.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------BELOW IS THE SOLUTION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1        AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2 * LengthConversionFactor)    ' De-select the Sketch Segment after Circular Sketch Pattern   swDoc.ClearSelection2 True    ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double   In above line we define our local variable we use as Conversion Factors.   Since this VBA program is small, we declare them in our Sub function.   If we have multiple functions, then we will create them with other Global variables.   ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1      AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select   Above we use a Select Case statement and apply GetUnits(0) method on swDoc variable to get the active unit of current document.      If you want to know more about Select Case statment then please visit If-Then and Select Case structure post.    Case swMETER    ' If length is in Meter   LengthConversionFactor = 1    AngleConversionFactor = 1   As shown in above code, when the is swMETER then we define the value of these factors.   In this case, it is:      LengthConversionFactor = 1   AngleConversionFactor = 1   Since, I use IPS, I got the below case.   Case swINCHES   ' If length is in INCHES   LengthConversionFactor = 1 * 0.0254   AngleConversionFactor = 1 * 0.01745329   In this case, it is:           LengthConversionFactor = 0.0254              I write the value in (1 * 0.0254) format to show a relation of values with “METER”.                 AngleConversionFactor = 0.01745329              I write the value in (1 * 0.01745329) format to show a relation of values with “RADIAN”.            Similar is for all other CASES.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create a Circle Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2 * LengthConversionFactor)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircleByRadius method from Solidworks Sketch Manager.   This CreateCircleByRadius method creates a Circle at given point with radius.   For more information about CreateCircleByRadius method, you can read my Solidworks Macro - Create Circle By Radius From VBA Macro post.   That post describe all the parameters we need for this CreateCircleByRadius method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Radius : 0.2 * LengthConversionFactor       As you can notice, I have multiple the LengthConversionFactor in 0.2.   This will make sure that I get a circle of 0.4 Inch diameter. not a converted diameter in Meter.   Image of created circle is shown below with diameter dimension.      ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Circular Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Circular Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.      We use Option Explicit for capturing un-declared variables.   If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.      Then we create variable for different data types.   If you know in detail about the Variables, then please visit Variables and Data-types posts of this blog.   It will help you to understand what Variables are and how to use them.      Then we create main Sub procedure for our macro.   If you know in detail about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog.   It will help you to understand what Procedures are and how to use them.      In most part we create some variables and set their values. We set those values by using some functions provided from objects.   If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog.   It will help you to understand what functions are and how to use them.      We use Select Case for checking Length of active unit.   If you want to read more about Select Case then please visit If-Then and Select Case structure.     Solidworks API Objects   In this post of Circular Sketch Pattern, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         This is it !!!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Fix Unit Issue in Solidworks API from VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/unit-correction/",
        "teaser": null
      },{
        "title": "Solidworks Sketch Macro - Create Line",
        "excerpt":"In this post, I tell you about how to create 2D Line through Solidworks VBA Macros in a sketch.   For this, I take the example from previous Solidworks Macros - Open Assembly and Drawing document post.   In this post, I tell you about CreateLine method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new line.     Video of Code on YouTube   Please see below video on how to create 2D Line from Solidworks VBA Macros.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Code Sample   Below is the code sample for creating lines.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default part location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default part template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)      ' Setting Solidworks document to new part document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Selecting Front Plane     BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)          ' Setting Sketch manager for our sketch     Set swSketchManager = swDoc.SketchManager          ' Creating Variable for Solidworks Sketch segment     Dim mySketchSegment As SketchSegment          ' Inserting a sketch into selected plane     swSketchManager.InsertSketch True          ' Creating an horizontal line     Set mySketchSegment = swSketchManager.CreateLine(0, 0, 0, 2, 0, 0)          ' De-select the line after creation     swDoc.ClearSelection2 True  End Sub   Understanding Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Sketch segment Dim mySketchSegment As SketchSegment  ' Creating an horizontal line Set mySketchSegment = swSketchManager.CreateLine(0, 0, 0, 2, 0, 0)   In above sample code, we 1st create a variable named mySketchSegment of type SketchSegment.   A SketchSegment represent a line, ellipse, parabola or spline.   A SketchSegment provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be selected programmatically.   Therefore, the SketchSegment interface provides functions to obtain the ID and to select the item.   For detailed information about the SketchSegment please visit this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable mySketchSegment.   We get this value from CreateLine method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateLine method from SketchManager.   This CreateLine method takes following parameters as explained:           X1 : X coordinate of the line start point            Y1 : Y coordinate of the line start point            Z1 : Z coordinate of the line start point            X2 : X coordinate of the line end point            Y2 : Y coordinate of the line end point            Z2 : Z coordinate of the line end point       In the above code sample I have used (0, 0, 0) for start point.   This is origin of sketch hence I start line from origin.   For End point I used (2, 0, 0) which is 2 point distance in X-direction or horizontal direction.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the line after creation swDoc.ClearSelection2 True   In the last line of code, we de-select the created line.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   Hope this post helps you to create lines in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/sketch-create-line/",
        "teaser": null
      },{
        "title": "Solidworks Sketch Macro - Create CenterLine",
        "excerpt":"In this post, I tell you about how to create 2D CenterLine through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Solidworks Sketch Macros - Create Line post.   In this post, I tell you about CreateCenterLine method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Centerline.     Video of Code on YouTube   Please see below video on how to create 2D Center Line from Solidworks VBA Macros.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Code Sample   Below is the code sample for creating lines.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Creating Variable for Solidworks Sketch segment   Dim mySketchSegment As SketchSegment      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating an horizontal line   Set mySketchSegment = swSketchManager.CreateCenterLine(0, 0, 0, 0, 2, 0)      ' De-select the line after creation   swDoc.ClearSelection2 True    ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Sketch segment Dim mySketchSegment As SketchSegment  ' Creating an horizontal line Set mySketchSegment = swSketchManager.CreateCenterLine(0, 0, 0, 0, 2, 0)   In above sample code, we 1st create a variable named mySketchSegment of type SketchSegment.   A SketchSegment represent a line, ellipse, parabola or spline.   A SketchSegment provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be selected programmatically.   Therefore, the SketchSegment interface provides functions to obtain the ID and to select the item.   For detailed information about the SketchSegment please visit this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable mySketchSegment.   We get this value from CreateCenterLine method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateCenterLine method from SketchManager.   This CreateCenterLine method takes following parameters as explained:           X1 : X coordinate of the line start point            Y1 : Y coordinate of the line start point            Z1 : Z coordinate of the line start point            X2 : X coordinate of the line end point            Y2 : Y coordinate of the line end point            Z2 : Z coordinate of the line end point       In the above code sample I have used (0, 0, 0) for start point.   This is origin of sketch hence I start line from origin.   For End point I used (0, 2, 0) which is 2 point distance in Y-direction or vertical direction.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the line after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created line.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create lines in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/sketch-create-centerline/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Corner Rectangle",
        "excerpt":"In this post, I tell you about how to create Corner Rectangle through Solidworks VBA Macros in a sketch.   For this, I take the example from previous Sketch - Create Lines post.   In this post, I tell you about CreateCornerRectangle method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Corner Rectangle.     Video of Code on YouTube   Please see below video on how to create Corner Rectangle from Solidworks VBA Macros.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Code Sample   Below is the code sample for creating Corner Rectangle.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Creating a \"Variant\" Variable which holds the values return by \"CreateCornerRectangle\" method   Dim vSketchLines As Variant      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a Corner Rectangle   vSketchLines = swSketchManager.CreateCornerRectangle(0, 1, 0, 1, 0, 0)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"CreateCornerRectangle\" method Dim vSketchLines As Variant      ' Creating a Corner Rectangle vSketchLines = swSketchManager.CreateCornerRectangle(0, 1, 0, 1, 0, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use CreateCornerRectangle method.   This CreateCornerRectangle method is part of swSketchManager and it is the latest method to create a corner rectangle.   This CreateCornerRectangle method takes following parameters as explained:           X1 : X coordinate of the Upper-left point            Y1 : Y coordinate of the Upper-left point            Z1 : Z coordinate of the Upper-left point            X2 : X coordinate of the Lower-right point            Y2 : Y coordinate of the Lower-right point            Z2 : Z coordinate of the Lower-right point       Below image shows more clearly about these parameters.      In the above code sample I have used (0, 1, 0) Upper-left point in Y-direction.   For Lower-right point I used (1, 0, 0) which is 1 point distance in X-direction.   This CreateCornerRectangle method returns an array of sketch segments that represent the edges created for this corner rectangle.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the lines after creation swDoc.ClearSelection2 True   In the this line of code, we deselect the Corner rectangle we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit2   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Corner rectangle in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-corner-rectangle/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Center Rectangle",
        "excerpt":"In this post, I tell you about how to create Center Rectangle through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Solidworks Macros - Create Corner Rectangle From VBA Macro post.   In this post, I tell you about CreateCenterRectangle method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a Center Rectangle.     Video of Code on YouTube   Please see below video on how to create Center Rectangle from Solidworks VBA Macros.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Code Sample   Below is the code sample for creating a Center Rectangle.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Creating a \"Variant\" Variable which holds the values return by \"CreateCenterRectangle\" method   Dim vSketchLines As Variant      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a Center Rectangle   vSketchLines = swSketchManager.CreateCenterRectangle(0, 0, 0, 1, 1, 0)      ' De-select the corner rectangle after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"CreateCenterRectangle\" method Dim vSketchLines As Variant      ' Creating a Center rectangle vSketchLines = swSketchManager.CreateCenterRectangle (0, 0, 0, 1, 1, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use CreateCenterRectangle method.   This CreateCenterRectangle method is part of swSketchManager and it is the latest method to create a Center rectangle.   This CreateCenterRectangle method takes following parameters as explained:   X1 : X coordinate of the center point of rectangle   Y1 : Y coordinate of the center point of rectangle   Z1 : Z coordinate of the center point of rectangle   X2 : X coordinate of the point 2   Y2 : Y coordinate of the point 2   Z2 : Z coordinate of the point 2   Point 2 is one of the corners of rectangle we want to create.   Below image shows more clearly about these parameters.      In the above code sample I have used (0, 0, 0) point which is origin of sketch.   For point 2, I used (1, 1, 0) which is 1 point distance in X-direction and 1 point distance in Y-direction.   This CreateCenterRectangle method returns an array of sketch segments that represent the edges created for this Center rectangle.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the lines after creation swDoc.ClearSelection2 True   In the this line of code, we deselect the Center rectangle we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Center rectangle in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-center-rectangle/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create 3-Point Corner Rectangle",
        "excerpt":"In this post, I tell you about how to create 3-Point Corner Rectangle through Solidworks VBA Macros in a sketch.   The process is almost identical with previou Solidworks Macros - Create Corner Rectangle post.   In this post, I tell you about Create3PointCornerRectangle method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a 3 Point Corner Rectangle.   Below is the code sample for creating a 3 Point Corner Rectangle.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Creating a \"Variant\" Variable which holds the values return by \"Create3PointCornerRectangle\" method   Dim vSketchLines As Variant      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a 3 Point Corner Rectangle   vSketchLines = swSketchManager.Create3PointCornerRectangle (0, 0, 0, 1, 0, 0, 0, 1, 0)      ' De-select the line after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"Create3PointCornerRectangle\" method Dim vSketchLines As Variant      ' Creating an 3 Point Corner Rectangle vSketchLines = swSketchManager.Create3PointCornerRectangle(0, 0, 0, 1, 0, 0, 0, 1, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use Create3PointCornerRectangle method.   This Create3PointCornerRectangle method is part of swSketchManager and it is the latest method to create a 3 Point Corner Rectangle.   This Create3PointCornerRectangle method takes following parameters as explained:           X1 : X coordinate of the point 1            Y1 : Y coordinate of the point 1            Z1 : Z coordinate of the point 1            X2 : X coordinate of the point 2            Y2 : Y coordinate of the point 2            Z2 : Z coordinate of the point 2            X3 : X coordinate of the point 3            Y3 : Y coordinate of the point 3            Z3 : Z coordinate of the point 3       Below image shows more clearly about these parameters.      In the above code sample I have used (0, 0, 0) point which is origin of sketch.   For point 2, I used (1, 0, 0) which is 1 point distance in X-direction.   For point 3, I used (0, 1, 0) which is 1 point distance in Y-direction.   This Create3PointCornerRectangle method returns an array of sketch segments that represent the edges created for this 3 Point Corner Rectangle.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the lines after creation swDoc.ClearSelection2 True   In the this line of code, we deselect the 3 Point Corner Rectangle we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create 3 Point Corner Rectangle in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-3point-corner-rectangle/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create 3-Point Center Rectangle",
        "excerpt":"In this post, I tell you about how to create 3-Point Center Rectangle in a sketch.   The process is almost identical with previous Solidworks Macros - Create 3-Point Corner Rectangle post.   In this post, I tell you about Create3PointCenterRectangle method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a 3 Point Center Rectangle.   Below is the code sample for creating a 3 Point Center Rectangle.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks        ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)        ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager        ' Creating a \"Variant\" Variable which holds the values return by \"Create3PointCenterRectangle\" method   Dim vSketchLines As Variant        ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True        ' Creating a 3 Point Center Rectangle   vSketchLines = swSketchManager.Create3PointCenterRectangle(0, 0, 0, 1, 0, 0, 0, 1, 0)        ' De-select the line after creation   swDoc.ClearSelection2 True        ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"Create3PointCenterRectangle\" method Dim vSketchLines As Variant      ' Creating 3 Point Center Rectangle vSketchLines = swSketchManager.Create3PointCenterRectangle(0, 0, 0, 1, 0, 0, 0, 1, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use Create3PointCenterRectangle method.   This Create3PointCenterRectangle method is part of swSketchManager and it is the latest method to create a 3 Point Corner Rectangle.   This Create3PointCenterRectangle method takes following parameters as explained:           X1 : X coordinate of the origin            Y1 : Y coordinate of the origin            Z1 : Z coordinate of the origin            X2 : X coordinate of the point 2 of one side            Y2 : Y coordinate of the point 2 of one side            Z2 : Z coordinate of the point 2 of one side            X3 : X coordinate of the point 3 of one side            Y3 : Y coordinate of the point 3 of one side            Z3 : Z coordinate of the point 3 of one side       Below image shows more clearly about these parameters.      In the above code sample I have used (0, 0, 0) point at origin of sketch.   For point 2, which is midpoint of one side; I used (1, 0, 0) which is 1 point distance in X-direction.   For point 3, which is end point of one side; I used (0, 1, 0) which is 1 point distance in Y-direction.   This Create3PointCenterRectangle method returns an array of sketch segments that represent the edges created for this 3 Point Center Rectangle.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the lines after creation swDoc.ClearSelection2 True   In the this line of code, we deselect the 3 Point Corner Rectangle we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create 3 Point Center Rectangle in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-3point-center-rectangle/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create A Parallelogram",
        "excerpt":"In this post, I tell you about how to create a Parallelogram through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Solidworks Macros - Create 3-Point Corner Rectangle post.   In this post, I tell you about CreateParallelogram method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a Parallelogram.   Below is the code sample for creating a Parallelogram.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()  \t' Setting Solidworks variable to Solidworks application \tSet swApp = Application.SldWorks      \t' Creating string type variable for storing default part location \tDim defaultTemplate As String \t' Setting value of this string type variable to \"Default part template\" \tdefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)  \t' Setting Solidworks document to new part document \tSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  \t' Selecting Front Plane \tBoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      \t' Setting Sketch manager for our sketch \tSet swSketchManager = swDoc.SketchManager      \t' Creating a \"Variant\" Variable which holds the values return by \"CreateParallelogram\" method \tDim vSketchLines As Variant      \t' Inserting a sketch into selected plane \tswSketchManager.InsertSketch True      \t' Creating a Parallelogram \tvSketchLines = swSketchManager.CreateParallelogram (0, 0, 0, 1, 0, 0, 0, 1, 0)      \t' De-select the line after creation \tswDoc.ClearSelection2 True      \t' Zoom to fit screen in Solidworks Window \tswDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"CreateParallelogram\" method Dim vSketchLines As Variant      ' Creating a Parallelogram vSketchLines = swSketchManager.CreateParallelogram(0, 0, 0, 1, 0, 0, 0, 1, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use CreateParallelogram method.   This CreateParallelogram method is part of swSketchManager and it is the latest method to create a Parallelogram.   This CreateParallelogram method takes following parameters as explained:           X1 : X coordinate of point 1            Y1 : Y coordinate of point 1            Z1 : Z coordinate of point 1            X2 : X coordinate of point 2            Y2 : Y coordinate of point 2            Z2 : Z coordinate of point 2            X3 : X coordinate of point 3            Y3 : Y coordinate of point 3            Z3 : Z coordinate of point 3       Below image shows more clearly about these parameters.      In the above code sample for 1st point I have used (0, 0, 0) point at origin.   For point 2, I used (1, 0, 0) which is 1 point distance in X-direction.   For point 3, I used (0, 1, 0) which is 1 point distance in Y-direction.   This CreateParallelogram method returns an array of sketch segments that represent the edges created for this Parallelogram.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the lines after creation swDoc.ClearSelection2 True   In the this line of code, we deselect the 3 Point Corner Rectangle we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create a Parallelogram in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-parallelogram/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Circle",
        "excerpt":"In this post, I tell you about how to create Circle through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Solidworks Sketch Macros - Create Line post.   In this post, I tell you about CreateCircle method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Circle.   Below is the code sample for creating a Circle.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Creating Variable for Solidworks Sketch segment   Dim mySketchSegment As SketchSegment      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a circle   Set mySketchSegment = swSketchManager.CreateCircle(0, 0, 0, 1, 0, 0)      ' De-select the line after creation   swDoc.ClearSelection2 True    ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Sketch segment Dim mySketchSegment As SketchSegment  ' Creating a Circle Set mySketchSegment = swSketchManager.CreateCircle(0, 0, 0, 1, 0, 0)   In above sample code, we 1st create a variable named mySketchSegment of type SketchSegment.   A SketchSegment represent a line, ellipse, parabola or spline.   A SketchSegment provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be selected programmatically.   Therefore, the SketchSegment interface provides functions to obtain the ID and to select the item.   For detailed information about the SketchSegment please visit this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable mySketchSegment.   We get this value from CreateCircle method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateCircle method from SketchManager.   This CreateCircle method takes following parameters as explained:   XC : X coordinate of the circle center point   YC : Y coordinate of the circle center point   ZC : Z coordinate of the circle center point   XP : X coordinate of the point on the circle perimeter   YP : Y coordinate of the point on the circle perimeter   ZP : Z coordinate of the point on the circle perimeter   In the above code sample I have used origin point (0, 0, 0) for circle center point.   This is origin of sketch hence I use center point at origin.   For End point I used (0, 2, 0) which is 2 point distance in Y-direction or vertical direction.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the line after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created line.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Circle in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-circle/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Circle By Radius",
        "excerpt":"In this post, I tell you about how to create Circle By Radius through Solidworks VBA Macros in a sketch.   The process is identical with previous Solidworks Sketch Macros - Create Circle post.   In this post, I tell you about CreateCircleByRadius method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Circle by Radius.   Below is the code sample for creating a Circle by Radius.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Creating Variable for Solidworks Sketch segment   Dim mySketchSegment As SketchSegment      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a circle   Set mySketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 1)      ' De-select the line after creation   swDoc.ClearSelection2 True    ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Sketch segment Dim mySketchSegment As SketchSegment  ' Creating a Circle by Radius Set mySketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 1)   In above sample code, we 1st create a variable named mySketchSegment of type SketchSegment.   A SketchSegment represent a line, ellipse, parabola or spline.   A SketchSegment provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be selected programmatically.   Therefore, the SketchSegment interface provides functions to obtain the ID and to select the item.   For detailed information about the SketchSegment please visit this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable mySketchSegment.   We get this value from CreateCircleByRadius method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateCircleByRadius method from SketchManager.   This CreateCircleByRadius method takes following parameters as explained:   XC : X coordinate of the circle center point   YC : Y coordinate of the circle center point   ZC : Z coordinate of the circle center point   Radius : Radius of the circle   In the above code sample I have used origin point (0, 0, 0) for circle center point.   This is origin of sketch hence I use center point at origin.   For Radius of Center, I used 1 meter as value.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the line after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created line.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Circle by radius in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-circle-by-radius/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Perimeter Circle",
        "excerpt":"In this post, I tell you about how to create Perimeter Circle through Solidworks VBA Macros in a sketch.   The process is identical with previous Solidworks Sketch Macros - Create Circle post.   In this post, I tell you about PerimeterCircle method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Perimeter Circle.   Below is the code sample for creating a Perimeter Circle.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()  \t' Setting Solidworks variable to Solidworks application \tSet swApp = Application.SldWorks      \t' Creating string type variable for storing default part location \tDim defaultTemplate As String \t' Setting value of this string type variable to \"Default part template\" \tdefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)  \t' Setting Solidworks document to new part document \tSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  \t' Selecting Front Plane \tBoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      \t' Setting Sketch manager for our sketch \tSet swSketchManager = swDoc.SketchManager  \t' Inserting a sketch into selected plane \tswSketchManager.InsertSketch True      \t' Creating object type Variable \tDim myPerimeterCircle As Object      \t' Creating a Perimeter circle \tSet myPerimeterCircle = swSketchManager.PerimeterCircle(0, 0, 1, 0, 0, 1)      \t' De-select the circle after creation \tswDoc.ClearSelection2 True      \t' Zoom to fit screen in Solidworks Window \tswDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating object type Variable Dim myPerimeterCircle As Object      ' Creating a Perimeter circle Set myPerimeterCircle = swSketchManager.PerimeterCircle(0, 0, 1, 0, 0, 1)   In above sample code, we 1st create a variable named myPerimeterCircle of type Object.   An object can hold any type of return value. In our example, it holds a 3 point Perimeter Arc as return value.   In 2nd line, we set the value of object variable myPerimeterCircle.   We get this value from PerimeterCircle method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used PerimeterCircle method from SketchManager.   This PerimeterCircle method takes following parameters as explained:           X1 : X coordinate of the first point            Y1 : Y coordinate of the first point            X2 : X coordinate of the second point            Y2 : Y coordinate of the second point            X3 : X coordinate of the third point            Y3 : Y coordinate of the third point       In the above code sample I have used (0, 0) for first point which is at origin.   For 2nd point on the circle I used (1, 0) which is 1 point distance in X-direction.   For 3rd point on the circle I used (0, 1) which is 1 point distance in Y-direction.   This PerimeterCircle method returns 3 point Perimeter Arc object.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the circle after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created circle.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Circle in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-perimeter-circle/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Centerpoint Arc",
        "excerpt":"In this post, I tell you about how to create a Centerpoint Arc through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Solidworks Sketch Macros - Create Line post.   In this post, I tell you about CreateArc method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Centerpoint Arc.   Below is the code sample for creating a Centerpoint Arc.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks        ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)        ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager        ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True        ' Creating variable name \"myCenterpointArc\" of \"SketchArc\" type   Dim myCenterpointArc As SldWorks.SketchArc        ' Creating a new Centerpoint Arc   Set myCenterpointArc = swSketchManager.CreateArc(0, 0, 0, 1, 0, 0, -1, 0, 0, 1)        ' De-select the Arc after creation   swDoc.ClearSelection2 True        ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating variable name \"myCenterpointArc\" of \"SketchArc\" type Dim myCenterpointArc As SldWorks.SketchArc      ' Creating a new Centerpoint Arc Set myCenterpointArc = swSketchManager.CreateArc(0, 0, 0, 1, 0, 0, -1, 0, 0, 1)   In above sample code, we 1st create a variable named myCenterpointArc of type SketchArc.   A SketchArc holds variours methods and properties to manage Arcs.   To see methods and properties related to SketchArc object, please this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable myCenterpointArc.   We get this value from CreateArc method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateArc method from SketchManager.   This CreateArc method takes following parameters as explained:           Xc : X coordinate of the center point, of the arc            Yc : Y coordinate of the center point, of the arc            Zc : Z coordinate of the center point, of the arc            X1 : X coordinate of the start point, of the arc            Y1 : Y coordinate of the start point, of the arc            Z1 : Z coordinate of the start point, of the arc            X2 : X coordinate of the end point, of the arc            Y2 : Y coordinate of the end point, of the arc            Z2 : Z coordinate of the end point, of the arc            Direction : Clockwise or Anti-clockwise (Counter Clockwise) direction                       +1 : Start point to end point in Anti-clockwise (Counter Clockwise) direction.                        -1 : Start point to end point in Clockwise direction.                   In the above code sample I have used (0, 0, 0) which is at origin as center of Arc.   For start point of the Arc I used (1, 0, 0) which is 1 point distance in X-direction.   For End point of the Arc I used (-1, 0, 0) which is -1 point distance in X-direction.   For Direction, I give +1 value, which means Anti-Clockwise direction.   Below Image show above parameters in Details.      NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Arc after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Centerpoint Arc.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Centerpoint Arc in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-centerpoint-arc/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Tangent Arc",
        "excerpt":"In this post, I tell you about how to create a Tangent Arc through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Solidworks Sketch Macros - Create Line post.   In this post, I tell you about CreateTangentArc method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Tangent Arc.   Below is the code sample for creating a Tangent Arc.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Variable for Solidworks Sketch segment   Dim mySketchSegment As SketchSegment          ' Creating an horizontal line   Set mySketchSegment = swSketchManager.CreateLine(0, 0, 0, 0, 1, 0)      ' Creating a Tangent Arc   Set mySketchSegment = swSketchManager.CreateTangentArc(0, 1, 0, 2, 1, 0, swTangentArcTypes_e.swForward)      ' De-select the Arc after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Sketch segment Dim mySketchSegment As SketchSegment      ' Creating an horizontal line Set mySketchSegment = swSketchManager.CreateLine(0, 0, 0, 0, 1, 0)  ' Creating a Tangent Arc Set mySketchSegment = swSketchManager.CreateTangentArc(0, 1, 0, 2, 1, 0, swTangentArcTypes_e.swForward)   In above sample code, we 1st create a variable named mySketchSegment of type SketchSegment.   A SketchSegment represent a line, ellipse, parabola or spline.   A SketchSegment provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be selected programmatically.   Therefore, the SketchSegment interface provides functions to obtain the ID and to select the item.   For detailed information about the SketchSegment please visit this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable mySketchSegment.   We get this value from CreateLine method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateLine method from SketchManager.   For detailed information on Creating Sketch Line visit Solidworks Sketch Macros - Create Line   In 3rd line, we again set the value of sketch segment variable mySketchSegment.   We get this value from CreateTangentArc method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateTangentArc method from SketchManager.   This CreateTangentArc method takes following parameters as explained:           X1 : X coordinate of the start point, of the arc            Y1 : Y coordinate of the start point, of the arc            Z1 : Z coordinate of the start point, of the arc            X2 : X coordinate of the end point, of the arc            Y2 : Y coordinate of the end point, of the arc            Z2 : Z coordinate of the end point, of the arc            Arc Type : Types of Tangent Arcs as defined in swTangentArcTypes_e enum list.       Below are the values inside swTangentArcTypes_e           swBack = 3            swForward = 1            swLeft = 2            swRight = 4       In the above code sample, first I create a Sketch line and then at one end of the line I create a Tangent arc.   For creating a Sketch line, I have used (0, 0, 0) which is at origin as starting point of the line.   For End point of the line, I used (0, 1, 0) which is 1 point distance in Y-direction.   For creating a Tangent arc, I used End point of line i.e. (0, 1, 0) as the Start point for Tangent Arc.   For End point of Tangent arc, I used (2, 1, 0) which is 2 point distance in X-direction and 1 point distance in Y-direction.   Basically, I want to end the Tangent arc at the same height of the Sketch line.   For Arc type, I have used swForward as value.   This creates a forward clockwise Tangent arc.   This CreateTangentArc method returns sketch segments which represent the sides created for this Tangent arc.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Arc after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Tangent Arc.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create Tangent Arc in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-tangent-arc/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create 3-Point Arc",
        "excerpt":"In this post, I tell you about how to create a 3-Point Arc through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Tangent Arc post.   In this post, I tell you about Create3PointArc method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new 3-Point Arc.   Below is the code sample for creating a 3-Point Arc.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Variable for Solidworks Sketch segment   Dim mySketchSegment As SketchSegment      ' Creating a 3-Point Arc   Set mySketchSegment = swSketchManager.Create3PointArc(-1, 0, 0, 1, 0, 0, 0, 1, 0)      ' De-select the Arc after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Sketch segment Dim mySketchSegment As SketchSegment  ' Creating a 3-Point Arc Set mySketchSegment = swSketchManager.Create3PointArc(-1, 0, 0, 1, 0, 0, 0, 1, 0)   In above sample code, we 1st create a variable named mySketchSegment of type SketchSegment.   A SketchSegment represent a line, ellipse, parabola or spline.   A SketchSegment provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be selected programmatically.   Therefore, the SketchSegment interface provides functions to obtain the ID and to select the item.   For detailed information about the SketchSegment please visit this page of Solidworks API Help   In 2nd line, we set the value of sketch segment variable mySketchSegment.   We get this value from Create3PointArc method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used Create3PointArc method from SketchManager.   This Create3PointArc method takes following parameters as explained:           X1 : X coordinate of the start point, of the arc            Y1 : Y coordinate of the start point, of the arc            Z1 : Z coordinate of the start point, of the arc            X2 : X coordinate of the end point, of the arc            Y2 : Y coordinate of the end point, of the arc            Z2 : Z coordinate of the end point, of the arc            X3 : X coordinate of the middle point, of the arc            Y3 : Y coordinate of the middle point, of the arc            Z3 : Z coordinate of the middle point, of the arc       For creating a 3-Point arc, I used (-1, 0, 0) as the Start point for 3-Point Arc, which is -1 point distance in X-direction.   For End point of 3-Point arc, I used (1, 0, 0) which is 1 point distance in X-direction.   For Middle point of 3-Point arc, I used (0, 1, 0) which is 1 point distance in Y-direction.   Below Image show above parameters in Details.      This Create3PointArc method returns sketch segments which represent the sides created for this 3-Point arc.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Arc after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created 3-Point Arc.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create 3-Point Arc in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-3point-arc/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create Polygon",
        "excerpt":"In this post, I tell you about how to create a Polygon through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Tangent Arc post.   In this post, I tell you about CreatePolygon method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Polygon.   Below is the code sample for creating a Polygon.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Varient for Polygon   Dim myPolygon As Variant      ' Creating a Polygon   myPolygon = swSketchManager.CreatePolygon(0, 0, 0, 1, 0, 0, 6, True)      ' De-select the Polygon after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Varient for Polygon Dim myPolygon As Variant  ' Creating a Polygon myPolygon = swSketchManager.CreatePolygon(0, 0, 0, 1, 0, 0, 6, True)   In above sample code, we 1st create a variable named myPolygon of type Variant.   In 2nd line, we get the value of Variant variable myPolygon.   We get this value from CreatePolygon method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreatePolygon method from SketchManager.   This CreatePolygon method takes following parameters as explained:           XC : X coordinate of the center point, of the polygon            YC : Y coordinate of the center point, of the polygon            ZC : Z coordinate of the center point, of the polygon            Xp : X coordinate of the vertex point, of the polygon            Yp : Y coordinate of the vertex point, of the polygon            Zp : Z coordinate of the vertex point, of the polygon            Sides : Number of sides in the polygon            Inscribed : True to show an inscribed construction circle, False to show a circumscribed construction circle       For creating a Polygon, I used (0, 0, 0) as the Center point, which is origin point of our Sketch.   For Vertex point of Polygon, I used (1, 0, 0) which is 1 point distance in X-direction.   For Number of sides in the Polygon, I used 6 which represent a Hexagon.   Below Image show when Inscribed option is True and show an inscribed construction circle.      Below Image show when Inscribed option is Falseand show a circumscribed construction circle.      This CreatePolygon method returns an array of sketch segments that represent the sides created for this Polygon.   A Sketch Segment can represent a sketch arc, line, ellipse, parabola or spline.   Sketch Segment has ISketchSegment Interface, which provides functions that are generic to every type of sketch segment.   For example, every sketch segment has an ID and can be programmatically selected.   Therefore, the ISketchSegment interface provides functions to obtain the ID and to select the item.   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Polygon after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Polygon.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create a Polygon in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/polygon/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Straight Slot",
        "excerpt":"In this post, I tell you about how to create a Straight Slot through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Tangent Arc post.   In this post, I tell you about CreateSketchSlot method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Straight Slot.   Below is the code sample for creating a Straight Slot.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Variable for Solidworks Slot   Dim mySketchSlot As SketchSlot          ' Creating a Straight slot   Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_line, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, False)      ' De-select the Slot after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Slot Dim mySketchSlot As SketchSlot        ' Creating a Straight slot Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_line, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, False)   In above sample code, we 1st create a variable named mySketchSlot of type SketchSlot.   In 2nd line, we set the value of SketchSlot variable mySketchSlot.   We get this value from CreateSketchSlot method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateSketchSlot method from SketchManager.   This CreateSketchSlot method takes following parameters as explained:   SlotCreationType : Type of sketch slot as defined in swSketchSlotCreationType_e.   There are 4 Different types of Slots we can create.           Straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_line or 0            Centerpoint straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_center_line or 1            Centerpoint arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_arc or 2            3-point arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc or 4       SlotLengthType : Type of length of sketch slot as defined in swSketchSlotLengthType_e.   There are 2 different types of Sketch slot length we can create.           Center to Center : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter or 0            Full Length : swSketchSlotLengthType_e.swSketchSlotLengthType_FullLength or 1       Width : Width of Slot   X1 : X coordinate of the point 1, of the Slot   Y1 : Y coordinate of the point 1, of the Slot   Z1 : Z coordinate of the point 1, of the Slot   X2 : X coordinate of the point 2, of the Slot   Y2 : Y coordinate of the point 2, of the Slot   Z2 : Z coordinate of the point 2, of the Slot   X3 : X coordinate of the point 3, of the Slot   Y3 : Y coordinate of the point 3, of the Slot   Z3 : Z coordinate of the point 3, of the Slot   CenterArcDirection : We need to set the direction eiter Clockwise or Anti-Clockwise/Counterclockwise as follows:           Clockwise (CW) : -1            Anti-Clockwise/Counterclockwise (CCW) : 1       AddDimension : True to automatically add dimensions, False to not.   For more details about Slot Parameter you can visit this page of Solidworks API Help   For creating a Straight Slot, I used following parameter Values:      SlotCreationType : swSketchSlotCreationType_e.swSketchSlotCreationType_line   Since we want to create a Straight Slot hence I select above value.      SlotLengthType : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter   I want length of this Slot from Center to Center hence I select above value.           Width : 1            X1, Y1, Z1 : 0, 0, 0       For Point 1, I use (0, 0, 0) values, which is origin of Sketch.      X2, Y2, Z2 : 1, 0, 0   For Point 2, I use (1, 0, 0) values, which is which is 1 point distance in X-direction.      X3, Y3, Z3 : 1, 1, 0   For Point 2, I use (1, 1, 0) values, which is which is 1 point distance in X-direction and 1 point distance in Y-direction.      CenterArcDirection : 1   I want to create Anti-Clockwise/Counterclockwise Slot.      AddDimension : False   Below Image described the Parameters for Straight Slot in more detail.      This CreateSketchSlot method returns Sketch Slot interface i.e. ISketchSlot interface.   This ISketchSlot interface has various methods and properties for a Slot.   For more detail about methods and properties of ISketchSlot interface you can visit this page of Solidworks API Help   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Slot after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Straight Slot.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create a Straight Slot in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-straight-slot/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Centerpoint Straight Slot",
        "excerpt":"In this post, I tell you about how to create a Centerpoint Straight Slot through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Straight Slot post.   In this post, I tell you about CreateSketchSlot method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Centerpoint Straight Slot.   Below is the code sample for creating a Centerpoint Straight Slot.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Variable for Solidworks Slot   Dim mySketchSlot As SketchSlot          ' Creating a Centerpoint Straight slot   Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_center_line, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, False)      ' De-select the Slot after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Slot Dim mySketchSlot As SketchSlot        ' Creating a Centerpoint Straight slot Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_center_line, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, False)   In above sample code, we 1st create a variable named mySketchSlot of type SketchSlot.   In 2nd line, we set the value of SketchSlot variable mySketchSlot.   We get this value from CreateSketchSlot method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateSketchSlot method from SketchManager.   This CreateSketchSlot method takes following parameters as explained:   SlotCreationType : Type of sketch slot as defined in swSketchSlotCreationType_e.   There are 4 Different types of Slots we can create.           Straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_line or 0            Centerpoint straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_center_line or 1            Centerpoint arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_arc or 2            3-point arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc or 4       SlotLengthType : Type of length of sketch slot as defined in swSketchSlotLengthType_e.   There are 2 different types of Sketch slot length we can create.           Center to Center : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter or 0            Full Length : swSketchSlotLengthType_e.swSketchSlotLengthType_FullLength or 1       Width : Width of Slot   X1 : X coordinate of the point 1, of the Slot   Y1 : Y coordinate of the point 1, of the Slot   Z1 : Z coordinate of the point 1, of the Slot   X2 : X coordinate of the point 2, of the Slot   Y2 : Y coordinate of the point 2, of the Slot   Z2 : Z coordinate of the point 2, of the Slot   X3 : X coordinate of the point 3, of the Slot   Y3 : Y coordinate of the point 3, of the Slot   Z3 : Z coordinate of the point 3, of the Slot   CenterArcDirection : We need to set the direction eiter Clockwise or Anti-Clockwise/Counterclockwise as follows:           Clockwise (CW) : -1            Anti-Clockwise/Counterclockwise (CCW) : 1       AddDimension : True to automatically add dimensions, False to not.   For more details about Slot Parameter you can visit this page of Solidworks API Help   For creating a Centerpoint Straight Slot, I used following parameter Values:      SlotCreationType : swSketchSlotCreationType_e.swSketchSlotCreationType_center_line   Since we want to create a Centerpoint Straight Slot hence I select above value.      SlotLengthType : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter   I want length of this Slot from Center to Center hence I select above value.           Width : 1            X1, Y1, Z1 : 0, 0, 0       For Point 1, I use (0, 0, 0) values, which is origin of Sketch.      X2, Y2, Z2 : 1, 0, 0   For Point 2, I use (1, 0, 0) values, which is which is 1 point distance in X-direction.      X3, Y3, Z3 : 1, 1, 0   For Point 2, I use (1, 1, 0) values, which is which is 1 point distance in X-direction and 1 point distance in Y-direction.      CenterArcDirection : 1   I want to create Anti-Clockwise/Counterclockwise Slot.      AddDimension : False   Below Image described the Parameters for Centerpoint Straight Slot in more detail.      This CreateSketchSlot method returns Sketch Slot interface i.e. ISketchSlot interface.   This ISketchSlot interface has various methods and properties for a Slot.   For more detail about methods and properties of ISketchSlot interface you can visit this page of Solidworks API Help   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Slot after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Centerpoint Straight Slot.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create a Centerpoint Straight Slot in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-centerpoint-straight-slot/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a 3-Point Arc Slot",
        "excerpt":"In this post, I tell you about how to create a 3-Point Arc Slot through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Straight Slot post.   In this post, I tell you about CreateSketchSlot method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new 3-Point Arc Slot.   Below is the code sample for creating a 3-Point Arc Slot.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Variable for Solidworks Slot   Dim mySketchSlot As SketchSlot          ' Creating a 3-Point Arc slot   Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 1, -1, 0, 0, 1, 0, 0, 0, 1, 0, 1, False)    ' De-select the Slot after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Slot Dim mySketchSlot As SketchSlot        ' Creating a 3-Point Arc slot Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 1, -1, 0, 0, 1, 0, 0, 0, 1, 0, 1, False)   In above sample code, we 1st create a variable named mySketchSlot of type SketchSlot.   In 2nd line, we set the value of SketchSlot variable mySketchSlot.   We get this value from CreateSketchSlot method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateSketchSlot method from SketchManager.   This CreateSketchSlot method takes following parameters as explained:   SlotCreationType : Type of sketch slot as defined in swSketchSlotCreationType_e.   There are 4 Different types of Slots we can create.           Straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_line or 0            Centerpoint straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_center_line or 1            Centerpoint arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_arc or 2            3-point arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc or 4       SlotLengthType : Type of length of sketch slot as defined in swSketchSlotLengthType_e.   There are 2 different types of Sketch slot length we can create.           Center to Center : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter or 0            Full Length : swSketchSlotLengthType_e.swSketchSlotLengthType_FullLength or 1       Width : Width of Slot   X1 : X coordinate of the point 1, of the Slot   Y1 : Y coordinate of the point 1, of the Slot   Z1 : Z coordinate of the point 1, of the Slot   X2 : X coordinate of the point 2, of the Slot   Y2 : Y coordinate of the point 2, of the Slot   Z2 : Z coordinate of the point 2, of the Slot   X3 : X coordinate of the point 3, of the Slot   Y3 : Y coordinate of the point 3, of the Slot   Z3 : Z coordinate of the point 3, of the Slot   CenterArcDirection : We need to set the direction eiter Clockwise or Anti-Clockwise/Counterclockwise as follows:           Clockwise (CW) : -1            Anti-Clockwise/Counterclockwise (CCW) : 1       AddDimension : True to automatically add dimensions, False to not.   For more details about Slot Parameter you can visit this page of Solidworks API Help   For creating a 3-Point Arc Slot, I used following parameter Values:      SlotCreationType : swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc   Since we want to create a 3-Point Arc Slot hence I select above value.      SlotLengthType : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter   I want length of this Slot from Center to Center hence I select above value.           Width : 1            X1, Y1, Z1 : -1, 0, 0       For Point 1, I use (-1, 0, 0) values, which is -1 point distance in X-direction.      X2, Y2, Z2 : 1, 0, 0   For Point 2, I use (1, 0, 0) values, which is which is 1 point distance in X-direction.      X3, Y3, Z3 : 0, 1, 0   For Point 2, I use (0, 1, 0) values, which is which is 1 point distance in Y-direction.      CenterArcDirection : 1   I want to create Anti-Clockwise/Counterclockwise Slot.      AddDimension : False   Below Image described the Parameters for 3-Point Arc Slot in more detail.      This CreateSketchSlot method returns Sketch Slot interface i.e. ISketchSlot interface.   This ISketchSlot interface has various methods and properties for a Slot.   For more detail about methods and properties of ISketchSlot interface you can visit this page of Solidworks API Help   NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Slot after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created 3-Point Arc Slot.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   Hope this post helps you to create a 3-Point Arc Slot in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!   ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-3point-arc-slot/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Centerpoint Arc Slot",
        "excerpt":"In this post, I tell you about how to create a Centerpoint Arc Slot through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Straight Slot post.     Demo Video of Code on YouTube   I have not created the video for this post now.   I will upload the video soon for this post and update the post after that.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for creating A Centerpoint Arc Slot from Solidworks VBA Macro.   ' Creating Variable for Solidworks Slot Dim mySketchSlot As SketchSlot      ' Setting the value of a Centerpoint Arc slot Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_arc, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 0.5, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, False)   First you need to Create a variable of SketchSlot type.   After creating variable, you need to set the value of this variable.   For this you used CreateSketchSlot method from Solidworks Sketch Manager.   This CreateSketchSlot method set the value of SketchSlot type variable.   The CreateSketchSlot method takes following parameters:   SlotCreationType : Type of sketch slot.   SlotLengthType : Type of length of sketch slot.   Width : Width of Slot   X1 : X coordinate of the point 1, of the Slot   Y1 : Y coordinate of the point 1, of the Slot   Z1 : Z coordinate of the point 1, of the Slot   X2 : X coordinate of the point 2, of the Slot   Y2 : Y coordinate of the point 2, of the Slot   Z2 : Z coordinate of the point 2, of the Slot   X3 : X coordinate of the point 3, of the Slot   Y3 : Y coordinate of the point 3, of the Slot   Z3 : Z coordinate of the point 3, of the Slot   CenterArcDirection : We need to set the direction eiter Clockwise or Anti-Clockwise/Counterclockwise   AddDimension : True to automatically add dimensions, False to not.   If you want a more detail explaination then please read further otherwise this will help you to Create a Centerpoint Arc Slot From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about CreateSketchSlot method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Centerpoint Arc Slot.   Below is the code sample for creating a Centerpoint Arc Slot.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Variable for Solidworks Slot   Dim mySketchSlot As SketchSlot          ' Creating a Centerpoint Arc slot   Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_arc, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 0.5, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, False)    ' De-select the Slot after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Solidworks Slot Dim mySketchSlot As SketchSlot        ' Creating a Centerpoint Arc slot Set mySketchSlot = swSketchManager.CreateSketchSlot(swSketchSlotCreationType_e.swSketchSlotCreationType_arc, swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter, 0.5, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, False   In above sample code, we 1st create a variable named mySketchSlot of type SketchSlot.   In 2nd line, we set the value of SketchSlot variable mySketchSlot.   We get this value from CreateSketchSlot method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreateSketchSlot method from SketchManager.   This CreateSketchSlot method takes following parameters as explained:   SlotCreationType : Type of sketch slot as defined in swSketchSlotCreationType_e.   There are 4 Different types of Slots we can create.           Straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_line or 0            Centerpoint straight Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_center_line or 1            Centerpoint arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_arc or 2            3-point arc Slot : swSketchSlotCreationType_e.swSketchSlotCreationType_3pointarc or 4       SlotLengthType : Type of length of sketch slot as defined in swSketchSlotLengthType_e.   There are 2 different types of Sketch slot length we can create.           Center to Center : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter or 0            Full Length : swSketchSlotLengthType_e.swSketchSlotLengthType_FullLength or 1       Width : Width of Slot   X1 : X coordinate of the point 1, of the Slot   Y1 : Y coordinate of the point 1, of the Slot   Z1 : Z coordinate of the point 1, of the Slot   X2 : X coordinate of the point 2, of the Slot   Y2 : Y coordinate of the point 2, of the Slot   Z2 : Z coordinate of the point 2, of the Slot   X3 : X coordinate of the point 3, of the Slot   Y3 : Y coordinate of the point 3, of the Slot   Z3 : Z coordinate of the point 3, of the Slot   CenterArcDirection : We need to set the direction eiter Clockwise or Anti-Clockwise/Counterclockwise as follows:           Clockwise (CW) : -1            Anti-Clockwise/Counterclockwise (CCW) : 1       AddDimension : True to automatically add dimensions, False to not.   For more details about Slot Parameter you can visit this page of Solidworks API Help   For creating a Centerpoint Arc Slot, I used following parameter Values:      SlotCreationType : swSketchSlotCreationType_e.swSketchSlotCreationType_arc   Since we want to create a Centerpoint Arc Slot hence I select above value.      SlotLengthType : swSketchSlotLengthType_e.swSketchSlotLengthType_CenterCenter   I want length of this Slot from Center to Center hence I select above value.           Width : 0.5            X1, Y1, Z1 : 0, 0, 0       For Point 1, I use (0, 0, 0) values, which is origin of Sketch.      X2, Y2, Z2 : -1, 0, 0   For Point 2, I use (-1, 0, 0) values, which is which is -1 point distance in X-direction.      X3, Y3, Z3 : 1, 0, 0   For Point 2, I use (1, 0, 0) values, which is which is 1 point distance in X-direction.      CenterArcDirection : -1   I want to create Clockwise Slot.      AddDimension : False   Below Image described the Parameters for Centerpoint Arc Slot in more detail.      This CreateSketchSlot method returns Sketch Slot interface i.e. ISketchSlot interface.   This ISketchSlot interface has various methods and properties for a Slot.   For more detail about methods and properties of ISketchSlot interface you can visit this page of Solidworks API Help     NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Slot after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Centerpointrc Slot.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   After this our Solidworks VBA Macro ends the Sub procedure and we create a Centerpoint Arc Slot.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.            For creating Centerpoint Arc Slot, we use CreateSketchSlot function. This function take some input values in form of VBA Constants. If you don’t know about the VBA Constants, then you should visit VBA Constants post of this blog. This posts will help you to understand what VBA Constants are and how to use them.         Solidworks API Objects   In this post, for creating Centerpoint Arc Slot, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:      Solidworks Application Object   If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link of Solidworks AP Help.      Solidworks Document Object   If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link of Solidworks AP Help.      Solidworks Sketch Manager Object   If you want explore Properties and Methods/Functions of this Solidworks Sketch Manager Object you can visit this link of Solidworks AP Help.      Solidworks Sketch Slot Object   If you want explore Properties and Methods/Functions of this Solidworks Sketch Slot Object you can visit this link of Solidworks AP Help.     Hope this post helps you to create a Centerpoint Arc Slot in Sketches with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-centerpoint-arc-slot/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Point",
        "excerpt":"In this post, I tell you about how to create a Point through Solidworks VBA Macros in a sketch.   The process is almost identical with previous Sketch - Create Lines post.     Demo Video of Code on YouTube   I have not created the video for this post now.   I will upload the video soon for this post and update the post after that.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for creating A Point from Solidworks VBA Macro.   ' Creating Variable for Sketch Point Dim myPoint As SketchPoint        ' Creating a Point Set myPoint = swSketchManager.CreatePoint(0, 1, 0)   For creating a Point first you need to Create a variable of SketchPoint type.   After creating variable, you need to set the value of this variable.   For this you used CreatePoint method from Solidworks Sketch Manager.   This CreatePoint method set the value of SketchPoint type variable.   This CreatePoint method takes following parameters as explained:   X : X Location of Point   Y : Y Location of Point   Z : Z Location of Point   If you want a more detail explaination then please read further otherwise this will help you to Create a Point From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about CreatePoint method from Solidworks SketchManager object.   By this method 1st we create a simple point, after that we create a sequence of points.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Point or sequence of points.   Below is the code sample for creating a Point.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2 ' Boolean Variable Dim BoolStatus As Boolean ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating Varient for Polygon   Dim myPoint As SketchPoint      ' Creating a Point   Set myPoint = swSketchManager.CreatePoint(0, 1, 0)      ' #########Creating a number of points##############      ' Declaring integer type variable for loop   Dim i As Integer      ' Looping through 1 to 5   For i = 0 To 5        ' Declaring integer type variables for X, Y and Z cordinates of point     Dim x, y, z As Integer          ' Setting values of x, y and z     x = i     y = x + i     z = 0          ' Create points till loop continues     Set myPoint = swSketchManager.CreatePoint(x, y, z)        Next      ' De-select the Polygon after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String  ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Boolean Variable Dim BoolStatus As Boolean  ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In 1st line, we create a variable named BoolStatus as Boolean object.   In next line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating Variable for Sketch Point Dim myPoint As SketchPoint        ' Creating a Point Set myPoint = swSketchManager.CreatePoint(0, 1, 0)   In above sample code, we 1st create a variable named myPoint of type SketchPoint.   In 2nd line, we set the value of SketchPoint variable myPoint.   We get this value from CreatePoint method which is inside the swSketchManager variable.   swSketchManager variable is a type of SketchManager, hence we used CreatePoint method from SketchManager.   This CreatePoint method takes following parameters as explained:   X : X Location of Point   Y : Y Location of Point   Z : Z Location of Point   For creating a Sketch Point, I used following parameter Values:           X : 0            Y : 1            Z : 0       This create a point in Y - Direction at the distance of 1.   Below Image described the Parameters for a Point in more detail.      This CreatePoint method returns Point interface i.e. ISketchPoint interface.   This ISketchPoint interface has various methods and properties for a Point.   For more detail about methods and properties of ISketchPoint interface you can visit this page of Solidworks API Help     Creating sequence of Points   Below code describe how to create Sequence of Points.   ' Declaring integer type variable for loop Dim i As Integer  ' Looping through 1 to 5 For i = 0 To 5    ' Declaring integer type variables for X, Y and Z cordinates of point   Dim x, y, z As Integer      ' Setting values of x, y and z   x = i   y = x + i   z = 0      ' Create points till loop continues   Set myPoint = swSketchManager.CreatePoint(x, y, z)    Next   Let us understand each line of code.   Above Lines of code creates a number of points.   ' Declaring integer type variable for loop Dim i As Integer   In above line, we create a variable named i of integer type.   ' Looping through 1 to 5 For i = 0 To 5    Next   In above lines, we create a For loop.   This loop iterate the value of i variable from 0 -&gt; 5.   ' Declaring integer type variables for X, Y and Z cordinates of point Dim x, y, z As Integer  ' Setting values of x, y and z x = i y = x + i z = 0   In above lines, we 1st declare 3 variable x, y and z of integer type.   x, y and z are co-ordinates of a single point in X, Y and Z direction.   In next 3 lines, we set the values of x, y and z.   For all points, we set the value of z to 0 because we want to place our points in XY plane.   If the value of i = 0, then we set the value of x equal to i.   This makes x = 0 also.   Now, we set the value of y which is equal to SUM of x and i.   Hence for i = 0, x = 0 and y = 0.   For i = 1, x = 1 and y = 2.   ' Create points till loop continues Set myPoint = swSketchManager.CreatePoint(x, y, z)   In above line, we create a Point using CreatePoint function of swSketchManager variable with the values of x, y and z.   Code sample in this section, create a sequence of points.     NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Point after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Point.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.            For creating a sequence of points, we use a For-Next loop. We use a loop to set values of x, y and z co-ordinates of each points. If you don’t know about the For-Next loop, then you should visit VBA Looping post of this blog. This posts will help you to understand what For-Next loop are and how to use them.         Solidworks API Objects   In this post, for creating a Point, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:      Solidworks Application Object   If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link of Solidworks AP Help.      Solidworks Document Object   If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link of Solidworks AP Help.      Solidworks Sketch Manager Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link of Solidworks AP Help.      Solidworks Sketch Point Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Point Object you can visit this link of Solidworks AP Help.     Hope this post helps you to create a Point in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-point/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Spline",
        "excerpt":"In this post, I tell you about how to create a Spline through Solidworks VBA Macros in a sketch.   This post take some functionality from previous Sketch - Create Create a Point post.   Hence if you have not read Sketch - Create Create a Point post, then it is recommended that please read it 1st.     Video of Code on YouTube   Please see below video how visually we can create a Spline from Solidworks VBA macro.     Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is explained here.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for creating A Spline from Solidworks VBA Macro.   ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment        ' Set the value of Solidworks Sketch segment by \"CreateSpline2\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)   For creating a Spline first you need to Create a variable of SketchSegment type.   After creating variable, you need to set the value of this variable.   For this you used CreateSpline2 method from Solidworks Sketch Manager.   This CreateSpline2 method set the value of SketchSegment type variable.   This CreateSpline2 method takes following parameters as explained:           PointData : Array of X,Y,Z point coordinates to use in creating the spline.            SimulateNaturalEnds : True to simulate natural ends, false to not simulate natural ends.       If you want a more detail explaination then please read further otherwise this will help you to Create a Spline From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about CreateSpline2 method from Solidworks SketchManager object.   By this method we create a simple Spline from a sequence of points.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a new Spline.   Below is the code sample for creating a Spline.      Please don’t get distracted by length of code, I  just want to do everything programatically. So that you have some sort of experience in developing logic.    Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Creating variable for Solidworks Sketch Dim swSketch As SldWorks.Sketch  ' Creating variable for Solidworks Sketch Point Dim swSketchPoint As SldWorks.SketchPoint  ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks application variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String      ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager      ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create integer type local variable   Dim i As Integer      ' Loop through 0 to 10   For i = 0 To 10          ' Create integer type variables     Dim x, y, z, incrementFactor As Integer          ' Set value of incrementFactor     incrementFactor = i * 0.5          ' Set value of x co-ordinate     x = i     ' Set value of y co-ordinate     y = x + incrementFactor     ' Set value of z co-ordinate     z = 0      ' Create a Sketch Point using x, y &amp; z variables     Set swSketchPoint = swSketchManager.CreatePoint(x, y, z)    Next i      ' De-select the points after creation   swDoc.ClearSelection2 True      ' Set Solidworks Sketch variable to active sketch   Set swSketch = swSketchManager.ActiveSketch      ' Create variant type variable named \"sketchPointArray\"   Dim sketchPointArray As Variant      ' Get all the points in this active sketch and store them into our variant type variable   sketchPointArray = swSketch.GetSketchPoints2()      ' Creating a new Collection,   ' we use this collecction to store x,y,z co-ordinates of all sketch points   Dim pointCollection As New Collection      ' Loop through all points in \"sketchPointArray\"   For i = 0 To UBound(sketchPointArray)     ' Set Solidworks sketch point variable to current point     Set swSketchPoint = sketchPointArray(i)          ' Add X co-ordinate of current point into collection     pointCollection.Add (swSketchPoint.x)          ' Add Y co-ordinate of current point into collection     pointCollection.Add (swSketchPoint.y)          ' Add Z co-ordinate of current point into collection     pointCollection.Add (swSketchPoint.z)   Next i      ' Create an array variable, this is Double type variable   Dim point() As Double      ' Define the size of array Dynamically   ReDim point(0 To pointCollection.Count) As Double      ' Loop through the collection we have   For i = 0 To (pointCollection.Count - 1)     ' Add each item of collection into our array variable     point(i) = pointCollection(i + 1)   Next i      ' Create a local variable name \"pointArray\" of variant type   Dim pointArray As Variant      ' Set the new created variable equal to point array variable   pointArray = point      ' Exit the sketch   swSketchManager.InsertSketch True      ' De-select the sketch   swDoc.ClearSelection2 True      ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Insert a sketch into \"Front Plane\"   swSketchManager.InsertSketch True      ' Set the value of Solidworks Sketch segment by \"CreateSpline2\" method from Solidworks sketch manager   Set swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)    ' De-select the Spline after creation   swDoc.ClearSelection2 True      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    ' Exit the sketch   swSketchManager.InsertSketch True    ' Force Re-build the model   swDoc.Rebuild (swRebuildOptions_e.swForceRebuildAll)  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Creating variable for Solidworks Sketch Dim swSketch As SldWorks.Sketch   In this line, we are creating a variable which we named as swSketch and the type of this swSketch variable is SldWorks.Sketch.   We create variable swSketch for Solidworks Sketches.   To see methods and properties related to Sketch object, please visit this page of Solidworks API Help   ' Creating variable for Solidworks Sketch Point Dim swSketchPoint As SldWorks.SketchPoint   In this line, we are creating a variable which we named as swSketchPoint and the type of this swSketchPoint variable is SldWorks.SketchPoint.   We create variable swSketchPoint for Solidworks Sketch Points.   To see methods and properties related to SketchPoint object, please visit this page of Solidworks API Help   ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we are creating a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure named as main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable swApp which we defined earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String  ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, holds the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For more detailed information about above lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Solidworks Sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert/exit a sketch in selected plane.   Now I have created a sequence of Points for our Spline.   Because if you already have co-ordinates of points in your machine somewhere you can use the approach I shown here to create a Spline.      TIP: I like to save co-ordinates in MS Excel file and then use it.      Creating sequence of Points   Below code shows how to create Sequence of Points.   ' Create integer type local variable Dim i As Integer  ' Loop through 0 to 10 For i = 0 To 10      ' Create integer type variables   Dim x, y, z, incrementFactor As Integer      ' Set value of incrementFactor   incrementFactor = i * 0.5      ' Set value of x co-ordinate   x = i   ' Set value of y co-ordinate   y = x + incrementFactor   ' Set value of z co-ordinate   z = 0    ' Create a Sketch Point using x, y &amp; z variables   Set swSketchPoint = swSketchManager.CreatePoint(x, y, z)  Next i  ' De-select the points after creation swDoc.ClearSelection2 True   Let us understand each line of code and how above Lines of code creates a number of points.   ' Create integer type local variable Dim i As Integer   In above line, we create a local variable named i of integer type.   ' Looping through 1 to 10 For i = 0 To 10    Next   In above lines, we create a For loop.   This loop iterate the value of i variable from 0 -&gt; 10.   I use max value of 10, because I want to create 10 points.   ' Create integer type variables Dim x, y, z, incrementFactor As Integer  ' Set value of incrementFactor incrementFactor = i * 0.5  ' Setting values of x, y and z x = i y = x + incrementFactor z = 0   In above lines, we 1st declare 4 variable x, y, z and incrementFactor of integer type.   x, y and z are co-ordinates of a single point in X, Y and Z direction.   incrementFactor is the factor by which I want to increase the value of Y co-ordinate of a single point.   ' Set value of incrementFactor incrementFactor = i * 0.5   In above line, I set the value of incrementFactor.   This value is 0.5 times of value of i variable.   Example: i = 3 then incrementFactor = 3 * 0.5 =&gt; incrementFactor = 1.5   In next 3 lines, we set the values of x, y and z.   For all points, we set the value of z to 0 because we want to place our points in X-Y plane.   If the value of i = 0, then we set the value of x equal to i.   This makes x = 0 also.   Now, we set the value of y which is equal to SUM of x and incrementFactor.   Hence for i = 0, x = 0, y = 0 and incrementFactor = 0.   For i = 1, x = 1, y = 1.5 and incrementFactor = 0.5.   ' Create a Sketch Point using x, y &amp; z variables Set swSketchPoint = swSketchManager.CreatePoint(x, y, z)   In above line, we create a Point using CreatePoint function of swSketchManager variable with the values of x, y and z.   ' De-select the Points after creation swDoc.ClearSelection2 True   In the this line of code, we de-select the created Points.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.     Create a Collection of Points Co-ordinates   After creating points, I want to do following things:           Get all points in this sketch            Add co-ordinates of each point into a collection       Why I want to do this when I already know co-ordinates of all points in previous section?   It is because I create points from this macro hence I know their co-ordinates.   I can add them to collection there BUT I want to take this opportunity to show following things:           How you get points of an Sketch.            How to create a Collection and Add values in it.       Below code shows how to do all those things.   ' Set Solidworks Sketch variable to active sketch Set swSketch = swSketchManager.ActiveSketch  ' Create variant type variable named \"sketchPointArray\" Dim sketchPointArray As Variant  ' Get all the points in this active sketch and store them into our variant type variable sketchPointArray = swSketch.GetSketchPoints2()  ' Creating a new Collection, ' we use this collecction to store x,y,z co-ordinates of all sketch points Dim pointCollection As New Collection  ' Loop through all points in \"sketchPointArray\" For i = 0 To UBound(sketchPointArray)   ' Set Solidworks sketch point variable to current point   Set swSketchPoint = sketchPointArray(i)      ' Add X co-ordinate of current point into collection   pointCollection.Add (swSketchPoint.x)      ' Add Y co-ordinate of current point into collection   pointCollection.Add (swSketchPoint.y)      ' Add Z co-ordinate of current point into collection   pointCollection.Add (swSketchPoint.z) Next i   Let us understand each line of code.   ' Set Solidworks Sketch variable to active sketch Set swSketch = swSketchManager.ActiveSketch   In the above line, I set the value of Solidworks Sketch variable swSketch to active sketch.   For this we use ActiveSketch method of Solidworks Sketch Manager variable swSketchManager.   This method give us a SldWorks.Sketch type return value which we store into swSketch variable.   ' Create variant type variable named \"sketchPointArray\" Dim sketchPointArray As Variant  ' Get all the points in this active sketch and store them into our variant type variable sketchPointArray = swSketch.GetSketchPoints2()   In 1st line of above code, I create a variable sketchPointArray.   This variable is Variant type variable.   In 2nd line of above code, I set the value of variable sketchPointArray using GetSketchPoints2() method.   We use GetSketchPoints2() method from our Solidworks Sketch type variable swSketch.   GetSketchPoints2() method gives us all points in this sketch and we store those points into sketchPointArray variable.   ' Creating a new Collection, ' we use this collecction to store x,y,z co-ordinates of all sketch points Dim pointCollection As New Collection   In the above line, I create variable pointCollection of Collection type.   ' Loop through all points in \"sketchPointArray\" For i = 0 To UBound(sketchPointArray)  Next i   In above lines, we create a For loop.   This loop iterate the value of i variable from 0 -&gt; UBound(sketchPointArray).   I use max value of UBound(sketchPointArray), because I want to iterate through Maximum number of points we get from the GetSketchPoints2() method.   If number of points are other than 10, then UBound(sketchPointArray) method return only that number of points.   Hence it is useful to know for future use.   ' Set Solidworks sketch point variable to current point Set swSketchPoint = sketchPointArray(i)   Now inside, this loop in 1st line we set Solidworks sketch point variable to current point of sketchPointArray.   ' Add X co-ordinate of current point into collection pointCollection.Add (swSketchPoint.x)  ' Add Y co-ordinate of current point into collection pointCollection.Add (swSketchPoint.y)  ' Add Z co-ordinate of current point into collection pointCollection.Add (swSketchPoint.z)   In above 3 lines, we add X, Y and Z co-ordinates of current point into our collection.   Preparing Co-ordinates of Points   You know from For Experience Macro Developers section, we need an Array of PointData.   This array contains X, Y and Z co-ordinates for Spline Points.   Now I tried to add X, Y and Z co-ordinates directly into an Array and then use this array to create Spline.   But it did not work, hence I had to store all X, Y and Z co-ordinates 1st into Collection.   Now I have all co-ordinates in my Collection and I have to create an Array for Spline from this Collection.   Below code sample show how to prepare Co-ordinate points for Spline.   ' Create an array variable, this is Double type variable Dim point() As Double  ' Define the size of array Dynamically ReDim point(0 To pointCollection.Count) As Double  ' Loop through the collection we have For i = 0 To (pointCollection.Count - 1)   ' Add each item of collection into our array variable   point(i) = pointCollection(i + 1) Next i  ' Create a local variable name \"pointArray\" of variant type Dim pointArray As Variant  ' Set the new created variable equal to point array variable pointArray = point  ' Exit the sketch swSketchManager.InsertSketch True  ' De-select the sketch swDoc.ClearSelection2 True   Let us understand each line of above code sample.   ' Create an array variable, this is Double type variable Dim point() As Double  ' Define the size of array Dynamically ReDim point(0 To pointCollection.Count) As Double   In above code, 1st line creates an Array variable. This is double type variable.   If you don’t know what an array is, then please visit VBA Arrays post.   In 2nd line, we define the size of array. This size is dynamic means it automatic in nature.   We don’t have to give exact value every time, this code adjust the values if there is any change in our Collection.   This size of this array is from 0 to Number of Co-ordinates in the collection.   In our case size of array is 0 -&gt; 30.   ' Loop through the collection we have For i = 0 To (pointCollection.Count - 1)   ' Add each item of collection into our array variable   point(i) = pointCollection(i + 1) Next i   In above code we 1st create a Loop.   This Loop iterate from 0 to pointCollection.Count - 1.   Why pointCollection.Count - 1 ? It is because pointCollection.Count starts from 1 and our loop start with 0.   Because of additional 1 count in pointCollection, we need to remove 1 from the count.   Inside this loop, we add every item of pointCollection into our point() array.   ' Create a local variable name \"pointArray\" of variant type Dim pointArray As Variant  ' Set the new created variable equal to point array variable pointArray = point   In 1st line of above code, we create local variable “pointArray”. This variable is Variant type.   In 2nd line of above code, we set the value of variable “pointArray” to value of variable “point”.   ' Exit the sketch swSketchManager.InsertSketch True  ' De-select the sketch swDoc.ClearSelection2 True   In 1st line of above code, we Exit the sketch.   In 2nd line of above code, we De-select the sketch.   Create Spline   Now we have all information available for creating a Spline.   Below code sample shows how to create a Spline.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Insert a sketch into \"Front Plane\" swSketchManager.InsertSketch True  ' Set the value of Solidworks Sketch segment by \"CreateSpline2\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)  ' De-select the Spline after creation swDoc.ClearSelection2 True  ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit2  ' Exit the sketch swSketchManager.InsertSketch True  ' Force Re-build the model swDoc.Rebuild (swRebuildOptions_e.swForceRebuildAll)   Let us understand each line of above code sample.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   I have discussed about different Selection methods in details in Soldworks Macros - Selection Methods post, so do visit this post for more Selection methods.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert/exit a sketch in selected plane.   ' Set the value of Solidworks Sketch segment by \"CreateSpline2\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)   In above line we set the value of Solidworks Sketch segment variable swSketchSegment.   For this we use, CreateSpline2 method from Solidworks sketch manager variable swSketchManager.   This CreateSpline2 method takes following parameters as explained:   PointData : Array of X,Y,Z point coordinates to use in creating the spline.   SimulateNaturalEnds : True to simulate natural ends, false to not simulate natural ends.   Below Image described the Parameters for a Spline.      In this CreateSpline2 method, we pass our pointArray variable as PointData.   We want our spline to simulate natural ends. Hence we True as second parameter.     NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means “inches” for distance.   But when I used Solidworks API through VBA macros or C#, I have to use converted numeric values.   Because Solidworks API output the distance in Meter only; which is not my requirement.   ' De-select the Spline after creation swDoc.ClearSelection2 True   In above line, we de-select the created Spline.   For de-selecting, we use ClearSelection2 method from our Solidworks document variable swDoc.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In above line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   ' Exit the sketch swSketchManager.InsertSketch True   In above line, we exit the sketch.   ' Force Re-build the model swDoc.Rebuild (swRebuildOptions_e.swForceRebuildAll)   In above line, we Force Re-build the model the model.   For “Force Re-build” we use Rebuild method from Solidworks Document variable swDoc.   In this Rebuild method, we use swRebuildOptions_e.swForceRebuildAll option for re-build all.   This is it !!!   It is a BIG post but I tried to explain all.   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.            For creating a sequence of points and data for Spline, we use a For-Next loop. We use a loop to set values of x, y and z co-ordinates of each points. If you don’t know about the For-Next loop, then you should visit VBA Looping post of this blog. This posts will help you to understand what For-Next loop are and how to use them.            For storing co-ordinates of points we use Collection. In an Collection, we store objects or data. This is very helpful and important language feature. If you don’t know about the Collection, then you should visit Collections (Visual Basic) from Microsoft Official Document Website. This will help you to understand what Collection are and how to use them.            For creating Spline we use an Array. An Array is similar to Collection, in which we store objects or data. But Array is more basic version actually Array is a basic programming feature and used frequently C and C++ programming languages. This is also very helpful and important language feature. If you don’t know about the Array, then you should visit Arrays in Visual Basic from Microsoft Official Document Website. This will help you to understand what Array are and how to use them.         Solidworks API Objects   In this post, for creating a Point, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:      Solidworks Application Object   If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.      Solidworks Document Object   If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.      Solidworks Sketch Manager Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.      Solidworks Sketches Object   If you want explore Properties and Methods/Functions of Solidworks Sketches Object you can visit this link.      Solidworks Sketch Point Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Point Object you can visit this link.      Solidworks Sketch Segment Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.     Hope this post helps you to create a Spline in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-spline/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Fillet",
        "excerpt":"In this post, I tell you about how to create a Fillet through Solidworks VBA Macros in a sketch.   This post is an extension of Sketch - Create Corner Rectangle post.     Video of Code on YouTube   Please see below video how visually we can create a Fillet from Solidworks VBA macro.     Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for creating A Fillet from Solidworks VBA Macro.   ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment        ' Set the value of Solidworks Sketch segment by \"CreateFillet\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateFillet(0.1, swConstrainedCornerAction_e.swConstrainedCornerDeleteGeometry)   For creating a Fillet first you need to Create a variable of SketchSegment type.   After creating variable, you need to set the value of this variable.   For this you used CreateFillet method from Solidworks Sketch Manager.   This CreateFillet method set the value of SketchSegment type variable.   This CreateFillet method takes following parameters as explained:           Radius : Radius of the fillet in meters.            ConstrainedCorners : Action to take if the corner to be filleted is constrained or has a dimension.       If you want a more detail explaination then please read further otherwise this will help you to Create a Fillet From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about CreateFillet method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a Fillet.   Below is the code sample for creating a Fillet.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Creating Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a \"Variant\" Variable which holds the values return by \"CreateCornerRectangle\" method   Dim vSketchLines As Variant      ' Creating a Corner Rectangle   vSketchLines = swSketchManager.CreateCornerRectangle(0, 1, 0, 1, 0, 0)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Point1\", \"SKETCHPOINT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set the value of Solidworks Sketch segment by \"CreateFillet\" method from Solidworks sketch manager   Set swSketchSegment = swSketchManager.CreateFillet(0.1, swConstrainedCornerAction_e.swConstrainedCornerDeleteGeometry)    ' De-select the Fillet after creation   swDoc.ClearSelection2 True      ' Show Front View after creating Fillet   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we are creating a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"CreateCornerRectangle\" method Dim vSketchLines As Variant      ' Creating a Corner Rectangle vSketchLines = swSketchManager.CreateCornerRectangle(0, 1, 0, 1, 0, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use CreateCornerRectangle method.   This CreateCornerRectangle method is part of swSketchManager and it is the latest method to create a corner rectangle.   For detail explaination on CreateCornerRectangle method, please see Sketch - Create Corner Rectangle post.   In the above code sample I have used (0, 1, 0) Upper-left point in Y-direction.   For Lower-right point I used (1, 0, 0) which is 1 point distance in X-direction.   ' De-select the Rectangle after creation swDoc.ClearSelection2 True   In above line, we de-select the ractangle we just create.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set the value of Solidworks Sketch segment by \"CreateFillet\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateFillet(0.1, swConstrainedCornerAction_e.swConstrainedCornerDeleteGeometry)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateFillet method from Solidworks Sketch Manager.   This CreateFillet method takes following parameters:           Radius : Radius of the fillet in meters.            ConstrainedCorners : Action to take if the corner to be filleted is constrained or has a dimension.       Below Image described the Parameters for a Fillet.      In our code, I have used following values:           Radius : I have used 0.1 (This value is in meter) as the radius of fillet.            ConstrainedCorners : I have used swConstrainedCornerAction_e.swConstrainedCornerDeleteGeometry enumerator as value for constraining corners.       In swConstrainedCornerAction_e we have 4 constant values.   These values are as follows:           swConstrainedCornerDeleteGeometry : 2 = Delete the constraint or dimension and add the fillet            swConstrainedCornerInteract : 0 = Ask the user whether to delete the geometry or stop processing            swConstrainedCornerKeepGeometry : 1 = Keep the constraint or dimension by creating a virtual intersection point before adding the fillet            swConstrainedCornerStopProcessing : 3 = Do not delete the constrain or dimension and do not create the fillet       NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the Fillet after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Fillet we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after creating Fillet swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:   VName : Name of the view to display or an empty string to use ViewId instead   ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.   NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swTrimetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post, for creating a Fillet, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:      Solidworks Application Object   If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.      Solidworks Document Object   If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.      Solidworks Sketch Manager Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.      Solidworks Sketch Segment Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.     Hope this post helps you to create a Fillet in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-fillet/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Create a Chamfer",
        "excerpt":"In this post, I tell you about how to create a Chamfer through Solidworks VBA Macros in a sketch.   This post is an extension of Sketch - Create Corner Rectangle post.     Video of Code on YouTube   Please see below video how visually we can create a Chamfer from Solidworks VBA macro.     Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for creating A Chamfer from Solidworks VBA Macro.   ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment        ' Set the value of Solidworks Sketch segment by \"CreateChamfer\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateChamfer(swSketchChamferType_e.swSketchChamfer_DistanceEqual, 0.1, 0.2)   For creating a Chamfer first you need to Create a variable of SketchSegment type.   After creating variable, you need to set the value of this variable.   For this you used CreateChamfer method from Solidworks Sketch Manager.   This CreateChamfer method set the value of SketchSegment type variable.   This CreateChamfer method takes following parameters as explained:           Type : Type of chamfer as defined in swSketchChamferType_e            Distance : Distance of the chamfer            AngleORdist : These are as follows                       If Type = swSketchChamfer_DistanceDistance, then the second chamfer distance                        If Type = swSketchChamfer_DistanceAngle, then the second chamfer angle                        If Type = swSketchChamfer_DistanceEqual, then this argument is ignored because Distance is used for both edges                   If you want a more detail explaination then please read further otherwise this will help you to Create a Chamfer From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about CreateChamfer method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create a Chamfer.   Below is the code sample for creating a Chamfer.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Creating Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   ' Main function of our VBA program Sub main()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default part location   Dim defaultTemplate As String   ' Setting value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Setting Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Selecting Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Setting Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Inserting a sketch into selected plane   swSketchManager.InsertSketch True      ' Creating a \"Variant\" Variable which holds the values return by \"CreateCornerRectangle\" method   Dim vSketchLines As Variant      ' Creating a Corner Rectangle   vSketchLines = swSketchManager.CreateCornerRectangle(0, 1, 0, 1, 0, 0)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Selecting Point 1   BoolStatus = swDoc.Extension.SelectByID2(\"Point1\", \"SKETCHPOINT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set the value of Solidworks Sketch segment by \"CreateChamfer\" method from Solidworks sketch manager   Set swSketchSegment = swSketchManager.CreateChamfer(swSketchChamferType_e.swSketchChamfer_DistanceEqual, 0.1, 0.2)    ' De-select the Chamfer after creation   swDoc.ClearSelection2 True      ' Show Front View after creating Chamfer   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we are creating a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we are creating a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Creating variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Creating variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we are creating a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure named main. This procedure hold all the statements (instructions) we give to computer.   ' Setting Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Creating string type variable for storing default part location Dim defaultTemplate As String ' Setting value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue(). This method is a part of our main Solidworks variable swApp.   ' Setting Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Setting Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Inserting a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Creating a \"Variant\" Variable which holds the values return by \"CreateCornerRectangle\" method Dim vSketchLines As Variant      ' Creating a Corner Rectangle vSketchLines = swSketchManager.CreateCornerRectangle(0, 1, 0, 1, 0, 0)   In above sample code, we 1st create a variable named vSketchLines of type Variant.   A Variant type variable can hold any type of value depends upon the use of variable.   In 2nd line, we set the value of variable vSketchLines.   Value of vSketchLinesis an array of lines. This array is send as return value when we use CreateCornerRectangle method.   This CreateCornerRectangle method is part of swSketchManager and it is the latest method to create a corner rectangle.   For detail explaination on CreateCornerRectangle method, please see Sketch - Create Corner Rectangle post.   In the above code sample I have used (0, 1, 0) Upper-left point in Y-direction.   For Lower-right point I used (1, 0, 0) which is 1 point distance in X-direction.   ' De-select the Rectangle after creation swDoc.ClearSelection2 True   In above line, we de-select the ractangle we just create.   ' Selecting Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set the value of Solidworks Sketch segment by \"CreateChamfer\" method from Solidworks sketch manager Set swSketchSegment = swSketchManager.CreateChamfer(swSketchChamferType_e.swSketchChamfer_DistanceEqual, 0.1, 0.2)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateChamfer method from Solidworks Sketch Manager.   This CreateChamfer method takes following parameters:   Type : Type of chamfer as defined in swSketchChamferType_e.   The swSketchChamferType_e has 3 values for type of chamfers:           swSketchChamfer_DistanceAngle            swSketchChamfer_DistanceDistance            swSketchChamfer_DistanceEqual       Distance : Distance of the chamfer   AngleORdist : Angle or Distance for chamfer. These are as follows           If Type = swSketchChamfer_DistanceDistance, then the second chamfer distance            If Type = swSketchChamfer_DistanceAngle, then the second chamfer angle            If Type = swSketchChamfer_DistanceEqual, then this argument is ignored because Distance is used for both edges.       Below Image described the Parameters for a Chamfer.      In our code, I have used following values:           Type : I have used swSketchChamferType_e.swSketchChamfer_DistanceEqual enumerator as value for type of Chamfer.            Distance : I have used 0.1 (This value is in meter) as the distance of Chamfer.            AngleORdist : I have used 0.2 (This value is in meter). But in our code Type = swSketchChamfer_DistanceEqual, then this argument is ignored because Distance   is used for both edges.         NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.   ' De-select the Fillet after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Chamfer we have created.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after creating Chamfer swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:   VName : Name of the view to display or an empty string to use ViewId instead   ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.   NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swTrimetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post, for creating a Fillet, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:      Solidworks Application Object   If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.      Solidworks Document Object   If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.      Solidworks Sketch Manager Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.      Solidworks Sketch Segment Object   If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.     Hope this post helps you to create a Chamfer in Sketches with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/create-chamfer/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Trim Sketch Entities",
        "excerpt":"In this post, I tell you about how to Trim Sketch Entities using Solidworks VBA Macros in a Sketch.     Video of Code on YouTube   Please see below video how visually we Trim Sketch Entities in Solidworks VBA macro.     Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Trim Sketch Entities from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Select Line 1 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Select Line 2 BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Trim Solidworks Sketch segment by \"SketchTrim\" method from Solidworks sketch manager BoolStatus = swSketchManager.SketchTrim(swSketchTrimChoice_e.swSketchTrimCorner, 0, 0, 0)   For Trim Solidworks Sketch segment, first you need to Create a variable of Boolean type.   After creating variable, you need to set the value of this Boolean variable.   For this you used SketchTrim method from Solidworks Sketch Manager.   This SketchTrim method set the value of Boolean type variable.   If Trim is successful then SketchTrim method return True otherwise SketchTrim returns False.   This SketchTrim method takes following parameters as explained:           Option : Sketch trim options as defined in swSketchTrimChoice_e            X : X pick location            Y : Y pick location       In swSketchTrimChoice_e we have following options:           swSketchTrimClosest : This option Trim Closest selected Sketch Entity.            swSketchTrimCorner : This option Trim/Extend Corners of selected Sketch Entity.            swSketchTrimEntities : This option Trim/Delete selected Sketch Entity.            swSketchTrimEntityPoint : This option migth be Trim selected Sketch Point or Entity. (I did not know what it do!!!)            swSketchTrimInside : This option Trim selected Sketch Entity between two boundaries.            swSketchTrimOutside : This option Keep selected Sketch Entity between two boundaries and Trim outside of the boundaries.            swSketchTrimTwoEntities : This option Trim/Delete selected two Sketch Entities.       If you want a more detail explaination then please read further otherwise this will help you to Trim Sketch Entities From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about SketchTrim method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to Trim Sketces..   Below is the code sample for Trim Sketces.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String   ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create Line 1   Set swSketchSegment = swSketchManager.CreateLine(0, 0, 0, 1, 0, 0)      ' Set Sketch Segment value and Create Line 2   Set swSketchSegment = swSketchManager.CreateLine(1.5, 0, 0, 1.5, 1, 0)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Trim selected Sketch Segments by \"SketchTrim\" method from Solidworks sketch manager   BoolStatus = swSketchManager.SketchTrim(swSketchTrimChoice_e.swSketchTrimCorner, 0.0, 0.0, 0.0)    ' De-select the Sketch Segment after Trim   swDoc.ClearSelection2 True      ' Show Front View after Trim Sketch Segments   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create Line 1 Set swSketchSegment = swSketchManager.CreateLine(0, 0, 0, 1, 0, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateLine method from Solidworks Sketch Manager.   This CreateLine method creates Lines between 2 given points.   For more information about CreateLine method, you can read my Solidworks Sketch Macros - Create Line post..   This post describe all the parameters we need for this CreateLine method.   In above line, we create a Line between origin of Sketch (0, 0, 0) and 1 distance in X-axis direction.   ' Set Sketch Segment value and Create Line 2 Set swSketchSegment = swSketchManager.CreateLine(1.5, 0, 0, 1.5, 1, 0)   In above line we create Line 2 by using same CreateLine method from Solidworks Sketch Manager.   In above code, we create our 2nd line between point (1.5, 0, 0) and point (1.5, 1, 0).   This line start at 1.5 distance in X-axis and ends at a distance of 1 in Y-axis.   ' De-select the lines after creation swDoc.ClearSelection2 True   After creating both lines we de-select those lines.      We don’t need to de-select the lines for Trim operation as I will select those lines agains in next 2 lines. I just want to show you how to select a Sketch Segment with SelectById Menthod.    ' Select Line 1 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Select Line 2 BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    In above line, we select Line 1 and 2.   The thing to notice here is that Append value I set to False for Line 1 and True for Line 2.   Line 1 is 1st entity in items of selection hence we can use False here.   For Line 2, we want to add this line into Selection List, hence Append value I set to True.   ' Trim selected Sketch Segments by \"SketchTrim\" method from Solidworks sketch manager BoolStatus = swSketchManager.SketchTrim(swSketchTrimChoice_e.swSketchTrimCorner, 0.0, 0.0, 0.0)   In above line, we Trim selected Sketch Segments by SketchTrim method from Solidworks sketch manager.   This SketchTrim method takes following parameters:   Option : Sketch trim options as defined in swSketchTrimChoice_e   The swSketchTrimChoice_e we have following options:           swSketchTrimClosest : This option Trim Closest selected Sketch Entity.            swSketchTrimCorner : This option Trim/Extend Corners of selected Sketch Entity.            swSketchTrimEntities : This option Trim/Delete selected Sketch Entity.            swSketchTrimEntityPoint : This option migth be Trim selected Sketch Point or Entity. (I did not know what it do!!!)            swSketchTrimInside : This option Trim selected Sketch Entity between two boundaries.       NOTES: Please note following point for this Trim option:                       Lines needed: For this we need at-least 3 lines.                        Boudaries: 1st and 2nd seletced sketch act as the Boundaries for this option.                        Trim Entity: 3rd sketch is the Trimed entity. In this option, 3rd sketch between the boundary is trimed.                        swSketchTrimOutside : This option Keep selected Sketch Entity between two boundaries and Trim outside of the boundaries.       NOTES: Please note following point for this Trim option::                       Lines needed: For this we need at-least 3 lines.                        Boudaries: 1st and 2nd seletced sketch act as the Boundaries for this option.                        Trim Entity: 3rd sketch is the Trimed entity. In this option, 3rd sketch outside of the boundary is trimed.                        swSketchTrimTwoEntities : This option Trim/Delete selected two Sketch Entities.       X : X pick location   Y : Y pick location   Z : Z pick location   NOTE:           X, Y and Z arguments are passed in the swSketchTrimClosest and swSketchTrimEntityPoint options.            Z arguments is needed only for 3D Sketch.       Return Value:           True: If Trim operation is Success.            False: If Trim operation is Fail.       In our code, I have used following values:   Option : I have used swSketchTrimChoice_e.swSketchTrimCorner enumerator as the type of Sketch Trim option.   X : I have used 0.0 value for X pick location.   Y : I have used 0.0 value for Y pick location.   Z : I have used 0.0 value for Z pick location.   Below image shows before and after Trim operation on the sketch.   Before Trim Operation      After Trim Operation        NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Trim operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Sketch Trim swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swTrimetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post of Sketch Trim, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         Hope this post helps you to Trim Sketch Entities with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/trim-entities/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Extend Sketch Entities",
        "excerpt":"In this post, I tell you about how to Extend Sketch Entities using Solidworks VBA Macros in a Sketch.     Video of Code on YouTube   Please see below video how visually we Extend Sketch Entities in Solidworks VBA macro.         Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Extend Sketch Entities from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Select Line 1 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Extend Solidworks Sketch segment by \"SketchExtend\" method from Solidworks sketch manager BoolStatus = swSketchManager.SketchExtend(0, 0, 0)           Method Name: SketchExtend            Description: Add lengths to the selected Sketch Entity till next sketch entity.       For Extend Solidworks Sketch segment, first you need to Create a variable of Boolean type.   After creating variable, you need to set the value of this Boolean variable.   For this you used SketchExtend method from Solidworks Sketch Manager.   This SketchExtend method set the value of Boolean type variable.   If Extend is successful then SketchExtend method return True otherwise SketchExtend returns False.   This SketchExtend method takes following parameters as explained:           X : Not used            Y : Not used            Z : Not used       If you want a more detail explaination then please read further otherwise this will help you to Extend Sketch Entities From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about SketchExtend method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to Extend Sketces..   Below is the code sample for Extend Sketces.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String   ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create Line 1   Set swSketchSegment = swSketchManager.CreateLine(-0.5, 0.75, 0, -0.25, -0.5, 0)      ' Set Sketch Segment value and Create Line 2   Set swSketchSegment = swSketchManager.CreateLine(-0.75, -1.25, 0, 0.5, -1.25, 0)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Extend selected Sketch Segments by \"SketchExtend\" method from Solidworks sketch manager   BoolStatus = swSketchManager.SketchExtend(0.0, 0.0, 0.0)    ' De-select the Sketch Segment after Extend   swDoc.ClearSelection2 True      ' Show Front View after Extend Sketch Segments   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning of every line.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout this post if you don’t understand above code.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create Line 1 Set swSketchSegment = swSketchManager.CreateLine(-0.5, 0.75, 0, -0.25, -0.5, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateLine method from Solidworks Sketch Manager.   This CreateLine method creates Lines between 2 given points.   For more information about CreateLine method, you can read my Solidworks Sketch Macros - Create Line post.   This post describe all the parameters we need for this CreateLine method.   In above line, we create a Line between point (-0.5, 0.75, 0) and point (-0.25, -0.5, 0).   This line is not parallel to any axis.   This line is at an angle to Vertical axis.   ' Set Sketch Segment value and Create Line 2 Set swSketchSegment = swSketchManager.CreateLine(-0.75, -1.25, 0, 0.5, -1.25, 0)   In above line we create Line 2 by using same CreateLine method from Solidworks Sketch Manager.   In above code, we create our 2nd line between point (-0.75, -1.25, 0) and point (0.5, -1.25, 0).   This line is parallel to X-axis.   ' De-select the lines after creation swDoc.ClearSelection2 True   After creating both lines we de-select those lines.      We don’t need to de-select the lines for Extend operation as I will select those lines agains in next 2 lines. I just want to show you how to select a Sketch Segment with SelectById Menthod.    ' Select Line 1 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select Line 1.   ' Extend selected Sketch Segments by \"SketchExtend\" method from Solidworks sketch manager BoolStatus = swSketchManager.SketchExtend(0.0, 0.0, 0.0)   In above line, we Extend selected Sketch Segments by SketchExtend method from Solidworks sketch manager.   This SketchExtend method takes following parameters:   X : Not used   Y : Not used   Z : Not used   Return Value:           True: If Extend operation is Success.            False: If Extend operation is Fail.       In our code, I have used following values:   X : I have used 0.0 value for X.   Y : I have used 0.0 value for Y.   Z : I have used 0.0 value for Z.   Below image shows before and after Extend operation on the sketch.   Before Extend Operation      After Extend Operation        NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Extend operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Sketch Extend swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you don’t know about them, then please visit Variables and Data-types posts of this blog. These posts will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you don’t know about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. These posts will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. These posts will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post of Sketch Extend, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         Hope this post helps you to Extend Sketch Entities with Solidworks VB Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/extend-entities/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Offset Sketch Entities",
        "excerpt":"In this post, I tell you about how to Offset Sketch Entities using Solidworks VBA Macros in a Sketch.     Video of Code on YouTube   Please see below video how visually we Offset Sketch Entities in Solidworks VBA macro.        Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Offset Sketch Entities from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Select Line 1 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Select Line 2 BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Offset Solidworks Sketch segment by \"SketchOffset2\" method from Solidworks sketch manager BoolStatus = swSketchManager.SketchOffset2(0.5, False, False, swSkOffsetCapEndType_e.swSkOffsetNoCaps, swSkOffsetMakeConstructionType_e.swSkOffsetDontMakeConstruction, True)   Method Name: SketchOffset2   Description: Offsets the selected sketch entities.   For Offset Solidworks Sketch entities, first you need to Create a variable of Boolean type.   After creating variable, you need to set the value of this Boolean variable.   For this you used SketchOffset2 method from Solidworks Sketch Manager.   This SketchOffset2 method set the value of Boolean type variable.   If Offset is successful then SketchOffset2 method return True value otherwise SketchOffset2 returns False value.   This SketchOffset2 method takes following parameters as explained:   Offset : Offset value; negative value offsets the sketch entities in the opposite direction   BothDirections : True to offset the sketch entities in both directions, false to offset the sketch entities in one direction   Chain : True to offset the chain of sketch entities, false to offset only the selected sketch entities   CapEnds : Cap the ends as defined by swSkOffsetCapEndType_e   swSkOffsetCapEndType_e enum defines following different End cap types constants:           swSkOffsetArcCaps            swSkOffsetLineCaps            swSkOffsetNoCaps       MakeConstruction : Convert original and offset sketch entities to construction sketch entities as defined by swSkOffsetMakeConstructionType_e   swSkOffsetMakeConstructionType_e enum defines following different Construction Types constants:           swSkOffsetDontMakeConstruction            swSkOffsetMakeBothConstruction            swSkOffsetMakeOffsConstruction            swSkOffsetMakeOrigConstruction       AddDimensions : True to add the dimension to the offset, false if not want to add the dimension to the offset.   If you want more detailed explaination then please read further otherwise this will help you to Offset Sketch Entities From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about SketchOffset2 method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to Offset Sketches.   Below is the code sample for Offset Sketches.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String   ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create Line 1   Set swSketchSegment = swSketchManager.CreateLine(-0.5, 0.75, 0, -0.25, -0.5, 0)      ' Set Sketch Segment value and Create Line 2   Set swSketchSegment = swSketchManager.CreateLine(-0.75, -1.25, 0, 0.5, -1.25, 0)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Offset selected Sketch Segments by \"SketchOffset2\" method from Solidworks sketch manager   BoolStatus = swSketchManager.SketchOffset2(0.5, False, False, swSkOffsetCapEndType_e.swSkOffsetNoCaps, swSkOffsetMakeConstructionType_e.swSkOffsetDontMakeConstruction, True)    ' De-select the Sketch Segment after Offset   swDoc.ClearSelection2 True      ' Show Front View after Offset Sketch Segments   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create Line 1 Set swSketchSegment = swSketchManager.CreateLine(-0.5, 0.75, 0, -0.25, -0.5, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateLine method from Solidworks Sketch Manager.   This CreateLine method creates Lines between 2 given points.   For more information about CreateLine method, you can read my Solidworks Sketch Macros - Create Line post.   That post describe all the parameters we need for this CreateLine method in details.   In above line, we create a Line between point (-0.5, 0.75, 0) and point (-0.25, -0.5, 0).   This line is not parallel to any axis.   This line is at an angle to Vertical axis.   ' Set Sketch Segment value and Create Line 2 Set swSketchSegment = swSketchManager.CreateLine(-0.75, -1.25, 0, 0.5, -1.25, 0)   In above line we create Line 2 by using same CreateLine method from Solidworks Sketch Manager.   In above code, we create our 2nd line between point (-0.75, -1.25, 0) and point (0.5, -1.25, 0).   This line is parallel to X-axis.   ' De-select the lines after creation swDoc.ClearSelection2 True   After creating both lines we de-select those lines.      We don’t need to de-select the lines for Offset operation as we will select those lines agains in next 2 lines. I just want to show you how to select a Sketch Segment with SelectById Menthod in next line of code.    ' Select Line 1 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select Line 1.   ' Select Line 2 BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select Line 2 and add Line 2 to selection list.   ' Offset selected Sketch Segments by \"SketchOffset2\" method from Solidworks sketch manager BoolStatus = swSketchManager.SketchOffset2(0.5, False, False, swSkOffsetCapEndType_e.swSkOffsetNoCaps, swSkOffsetMakeConstructionType_e.swSkOffsetDontMakeConstruction, True)   In above line, we Offset selected Lines by SketchOffset2 method from Solidworks sketch manager.   This SketchOffset2 method takes following parameters as explained:   Offset : Offset value; negative value offsets the sketch entities in the opposite direction   BothDirections : True to offset the sketch entities in both directions, false to offset the sketch entities in one direction   Chain : True to offset the chain of sketch entities, false to offset only the selected sketch entities   CapEnds : Cap the ends as defined by swSkOffsetCapEndType_e   swSkOffsetCapEndType_e enum defines following different End cap types constants:           swSkOffsetArcCaps            swSkOffsetLineCaps            swSkOffsetNoCaps       MakeConstruction : Convert original and offset sketch entities to construction sketch entities as defined by swSkOffsetMakeConstructionType_e   swSkOffsetMakeConstructionType_e enum defines following different constants:           swSkOffsetDontMakeConstruction            swSkOffsetMakeBothConstruction            swSkOffsetMakeOffsConstruction            swSkOffsetMakeOrigConstruction       AddDimensions : True to add the dimension to the offset, false if not want to add the dimension to the offset.   Return Value:           True: If Extend operation is Success.            False: If Extend operation is Fail.       In our code, I have used following values:   Offset : I have used 0.5 value for Offset.   BothDirections : I have used False value for BothDirections.   Chain : I have used False value for Chain.   CapEnds : I have used swSkOffsetCapEndType_e.swSkOffsetNoCaps value for CapEnds.   MakeConstruction : I have used swSkOffsetMakeConstructionType_e.swSkOffsetDontMakeConstruction value for MakeConstruction.   AddDimensions : I have used True value for AddDimensions.   Below image shows before and after Offset operation on the sketch.   Before Offset Operation      After Offset Operation      Now let us modify some values and look for the changes:   BothDirections : Let us change the value to True value for BothDirections and see the result:      CapEnds : Now we change the value of End cap.   Please see below for both Line and Arc option for End cap:      If we change CapEnds value to swSkOffsetLineCaps and then the result would be:         If we change CapEnds value to swSkOffsetArcCaps and then the result would be:      These 2 covers all option available in Cap End.   MakeConstruction : Now we change the value of MakeConstruction.   Please see below for all MakeConstruction options:      If we change MakeConstruction value to swSkOffsetMakeOrigConstruction and then the result would be:         If we change MakeConstruction value to swSkOffsetMakeOffsConstruction and then the result would be:         If we change MakeConstruction value to swSkOffsetMakeBothConstruction and then the result would be:      This covers all options in SketchOffset2 method.     NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to use converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Offset operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Sketch Offset swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you know in detail about the Variables, then please visit Variables and Data-types posts of this blog. It will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you know in detail about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. It will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. It will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post of Sketch Offset, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         Hope this post helps you to Offset Sketch Entities with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/offset-entities/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Mirror Sketch Entities",
        "excerpt":"In this post, I tell you about how to Mirror Sketch Entities using Solidworks VBA Macros in a Sketch.     Video of Code on YouTube   Please see below video how visually we Mirror Sketch Entities in Solidworks VBA macro.        Please note that there are no explaination given in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developer   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Mirror Sketch Entities from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Select Center Line for Mirror BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 2, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Select Circle we want to Mirror BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Mirror Selected Sketch entities swDoc.SketchMirror   Method Name: SketchMirror   Description: Mirrors the selected sketch entities with reference from a Centerline.   For Mirror Solidworks Sketch entities, first we need following things:           Sketch Entity/Entities to Mirror            A Centerline, from which we Mirror the sketch entities       If you want more detailed explaination then please read further otherwise this will help you to Mirror Sketch Entities From VBA Macro.     For Beginners Macro Developers   In this post, I tell you about SketchMirror method from Solidworks ModelDoc2 object.   This method is easiest method, I found in Solidworks API Help.   So use this method if you want to Mirror Sketches.   Below is the code sample for Mirror Sketches.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create a Center Line   Set swSketchSegment = swSketchManager.CreateCenterLine(0, 0, 0, 0, 1, 0)      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(-0.75, 0, 0, 0.2)      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Select Center Line for Mirror   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 2, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Select Circle we want to Mirror   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Mirror Selected Sketch entities   swDoc.SketchMirror    ' De-select the Sketch Segment after Mirror   swDoc.ClearSelection2 True      ' Show Front View after Mirror Sketch Segments   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create a Center Line Set swSketchSegment = swSketchManager.CreateCenterLine(0, 0, 0, 0, 1, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCenterLine method from Solidworks Sketch Manager.   This CreateCenterLine method creates a Center Line between 2 given points.   For more information about CreateCenterLine method, you can read my Solidworks Sketch Macros - Create CenterLines post.   That post describe all the parameters we need for this CreateCenterLine method in details.   In above line, we create a Line between point (0, 0, 0) and point (0, 1, 0).   ' Set Sketch Segment value and Create a Circle Set swSketchSegment = swSketchManager.CreateCircleByRadius(-0.75, 0, 0, 0.2)   In above line we create a Circle by using same CreateCircleByRadius method from Solidworks Sketch Manager.   In above code, we create a Circle at point (0, 0, 0) with a radius of 0.2.   ' De-select the lines after creation swDoc.ClearSelection2 True   After creating both entities we de-select them.      We need to de-select both the entities because we have to mark them with options when we select them individually.    ' Select Center Line for Mirror BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 2, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select the Center Line i.e. Line 1 for our Mirror option.   NOTE: To differentiate a Center Line between selected entities, we use Mark option of 2 while selecting the Center Line. This is IMPORTANT for defining the Centerline in Mirror operation.   ' Select Circle we want to Mirror BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select the Circle i.e. Arc 1 and add it to selection list.   NOTE: While selecting entities to Mirror, we use Mark option of 1 while selecting the Center Line. This is IMPORTANT for while selecting sketch entities in Mirror operation. If any selected entity is NOT marked with 1 then it will not mirror.   ' Mirror Selected Sketch entities swDoc.SketchMirror   In above line, we Mirror selected Circle by SketchMirror method from Solidworks Document variable.   This SketchMirror method does not take any parameters.   Below image shows before and after Mirror operation on the sketch.   Before Mirror Operation      After Mirror Operation        NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Mirror operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Sketch Mirror swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you know in detail about the Variables, then please visit Variables and Data-types posts of this blog. It will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you know in detail about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. It will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. It will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post of Sketch Mirror, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         Hope this post helps you to Mirror Sketch Entities with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macros, do come to this blog after sometime.   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/mirror-entities/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Linear Sketch Pattern",
        "excerpt":"In this post, I tell you about how to Linear Sketch Pattern using Solidworks VBA Macros in a Sketch.     Video of Code on YouTube   Please see below video how visually we Linear Sketch Pattern in Solidworks VBA macro.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developers   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Linear Sketch Pattern from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Select Circle we want to Pattern BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Create a Linear Sketch Pattern BoolStatus = swSketchManager.CreateLinearSketchStepAndRepeat(1, 3, 1, 1, 0, 1.57, \"\", False, True, True, False, True)   Method Name: CreateLinearSketchStepAndRepeat   Description: Create Linear Sketch Pattern of the selected sketch entity or entities.   Prerequisites: To create a Linear Sketch Pattern a Solidworks Sketch entity or entities, first we need following things:           Sketch Entity/Entities to Pattern            That Entity/Entities is selected before pattern       How it works:           For Linear Sketch Pattern, first you need to Create a variable of Boolean type.            After creating variable, you need to set the value of this Boolean variable.            For this you used CreateLinearSketchStepAndRepeat method from Solidworks Sketch Manager.            This CreateLinearSketchStepAndRepeat method set the value of Boolean type variable.            If the Linear Sketch Pattern is successful then CreateLinearSketchStepAndRepeat method return True value otherwise CreateLinearSketchStepAndRepeat returns False value.       This CreateLinearSketchStepAndRepeat method takes following parameters as explained:           NumX : Total number of instances along the x axis, including the seed i.e. original entity/entities.            NumY : Total number of instances along the y axis, including the seed i.e. original entity/entities.            SpacingX : Spacing between instances along the x axis.            SpacingY : Spacing between instances along the y axis.            AngleX : Angle for direction 1 relative to the x axis.            AngleY : Angle for direction 1 relative to the y axis.            DeleteInstances : Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            XSpacingDim : True to display the spacing between instances dimension along the x axis in the graphics area, false to not            YSpacingDim : True to display the spacing between instances dimension along the y axis in the graphics area, false to not            AngleDim : True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDimInXDir : True to display the number of instances in the x direction dimension in the graphics area, false to not.            CreateNumOfInstancesDimInYDir : True to display the number of instances in the y direction dimension in the graphics area, false to not.       If you want more detailed explaination then please read further otherwise this will help you to create a Linear Sketch Pattern.     For Beginner Macro Developers   In this post, I tell you about CreateLinearSketchStepAndRepeat method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create Linear Sketch Pattern.   Below is the code sample to create Linear Sketch Pattern.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2)      ' De-select the lines after creation   swDoc.ClearSelection2 True    ' Select Circle we want to Pattern   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Create a Linear Sketch Pattern   BoolStatus = swSketchManager.CreateLinearSketchStepAndRepeat(3, 1, 1, 0, 0, 0, \"\", True, False, True, True, False)      ' De-select the Sketch Segment after Linear Sketch Pattern   swDoc.ClearSelection2 True      ' Show Front View after Linear Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create a Circle Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircleByRadius method from Solidworks Sketch Manager.   This CreateCircleByRadius method creates a Circle at given point with radius.   For more information about CreateCircleByRadius method, you can read my Solidworks Macro - Create Circle By Radius post.   That post describe all the parameters we need for this CreateCircleByRadius method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Radius : 0.2       ' De-select the lines after creation swDoc.ClearSelection2 True   After creating the circle we de-select it.      We don’t need to de-select the circle for Pattern as we will select the circle agains in next line. I just want to show you how to select a Sketch Segment with SelectById Menthod in next line of code.    ' Select Circle we want to Pattern BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select the Circle i.e. Arc 1 and add it to selection list.   ' Create a Linear Sketch Pattern BoolStatus = swSketchManager.CreateLinearSketchStepAndRepeat(3, 1, 1, 0, 0, 0, \"\", True, False, True, True, False)   In above line, we Pattern selected Circle by CreateLinearSketchStepAndRepeat method from Solidworks Sketch Manger variable.   This CreateLinearSketchStepAndRepeat method takes following parameters as explained:           NumX : Total number of instances along the x axis, including the seed i.e. original entity/entities.            NumY : Total number of instances along the y axis, including the seed i.e. original entity/entities.            SpacingX : Spacing between instances along the x axis.            SpacingY : Spacing between instances along the y axis.            AngleX : Angle for direction 1 relative to the x axis.            AngleY : Angle for direction 1 relative to the y axis.            DeleteInstances : Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            XSpacingDim : True to display the spacing between instances dimension along the x axis in the graphics area, false to not            YSpacingDim : True to display the spacing between instances dimension along the y axis in the graphics area, false to not            AngleDim : True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDimInXDir : True to display the number of instances in the x direction dimension in the graphics area, false to not.            CreateNumOfInstancesDimInYDir : True to display the number of instances in the y direction dimension in the graphics area, false to not.       After the function complete following are the results:   Return Value:           True: If Linear Sketch Pattern is *Success.*            False: If Linear Sketch Pattern is *Fail.*       In our code, I have used following values:           NumX : I have used 3 as Total number of instances along the x axis including original circle.            NumY : I have used 1 as Total number of instances along the y axis which includes original circle only.          Even uf you don’t want to pattern in Y direction, you have to give atleast 1 as a value. Same goes for X direction.            SpacingX : I use 1 as Spacing between instances along the x axis.            SpacingY : I use 0 Spacing between instances along the y axis.            AngleX : I use 0 Angle for direction 1 relative to the x axis.            AngleY : I use 0 Angle for direction 1 relative to the y axis.            DeleteInstances : I use ”“ as Number of instances to delete, because I don’t want to delete any instances.            XSpacingDim : I use True to display the spacing between instances dimension along the x axis in the graphics area.            YSpacingDim : I use False to display the spacing between instances dimension along the y axis in the graphics area.            AngleDim : I use True to display the angle dimension between axes in the graphics area.            CreateNumOfInstancesDimInXDir : I use True to display the number of instances in the x direction dimension in the graphics area.            CreateNumOfInstancesDimInYDir : I use False to display the number of instances in the y direction dimension in the graphics area.       Below image shows before and after Linear Sketch Pattern.   Before Linear Sketch Pattern      After Linear Sketch Pattern        NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Please see below for detail:           Length: Meter            Angle: Radian       Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Linear Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Linear Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you know in detail about the Variables, then please visit Variables and Data-types posts of this blog. It will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you know in detail about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. It will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. It will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post of Linear Sketch Pattern, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         Hope this post helps you to Create Linear Sketch Pattern with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/linear-skech-pattern/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Edit Linear Sketch Pattern",
        "excerpt":"In this post, I tell you about how to Edit Linear Sketch Pattern using Solidworks VBA Macros in a Sketch.   This post is extension of previous Solidworks Macro - Linear Sketch Pattern post.   I recommend you to read Solidworks Macro - Linear Sketch Pattern post because we are using same code sample.     Video of Code on YouTube   Please see below video how we can Edit Linear Sketch Pattern in Solidworks VBA macro.        Please note that there is no explanation in the video.   Why we write our code this way is explained in this post.     For Experience Macro Developers   If you are an experienced Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Edit Linear Sketch Pattern from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"(3,2)(2,1)\", True, True, False, False, True, \"Arc1_\")   Method Name: EditLinearSketchStepAndRepeat   Description: Edit Linear Sketch Pattern.   Prerequisites: To edit a Linear Sketch Pattern a Solidworks Sketch entity or entities, first, we need the following things:      Existing Linear Sketch Pattern   How it works:           For Edit a Linear Sketch Pattern, first, we need to create a variable of Boolean type.            After creating variable, we need to set the value of this Boolean variable.            For this, we used EditLinearSketchStepAndRepeat method from Solidworks Sketch Manager.            This EditLinearSketchStepAndRepeat method set the value of Boolean type variable.            If the editing of Linear Sketch Pattern is successful then EditLinearSketchStepAndRepeat method return True value otherwise EditLinearSketchStepAndRepeat returns False value.       This EditLinearSketchStepAndRepeat method takes the following parameters as explained:           NumX: Total number of instances along the x axis, including the seed i.e. original entity/entities.            NumY: Total number of instances along the y axis, including the seed i.e. original entity/entities.            SpacingX: Spacing between instances along the x axis.            SpacingY: Spacing between instances along the y axis.            AngleX: Angle for direction 1 relative to the x axis.            AngleY: Angle for direction 1 relative to the y axis.            DeleteInstances: Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            XSpacingDim: True to display the spacing between instances dimension along the x axis in the graphics area, false to not            YSpacingDim: True to display the spacing between instances dimension along the y axis in the graphics area, false to not            AngleDim: True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDimInXDir: True to display the number of instances in the x direction dimension in the graphics area, false to not.            CreateNumOfInstancesDimInYDir: True to display the number of instances in the y direction dimension in the graphics area, false to not.            Seed: List of the names of the entities, separated by the underscore character (_), that comprise the seed pattern (e.g., Line1_Line2_Line3_Line4 for a rectangular-shaped seed pattern).       Return Value:           True: If Editing of Linear Sketch Pattern is “Success”.            False: If Editing of Linear Sketch Pattern is “Fail”.       If you want more detailed explaination then please read further otherwise this will help you to edit a Linear Sketch Pattern.     For Beginner Macro Developers   In this post, I tell you about EditLinearSketchStepAndRepeat method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to edit Linear Sketch Pattern.   Below is the code sample to edit Linear Sketch Pattern.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2)      ' De-select the lines after creation   swDoc.ClearSelection2 True    ' Select Circle we want to Pattern   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Create a Linear Sketch Pattern   BoolStatus = swSketchManager.CreateLinearSketchStepAndRepeat(3, 1, 1, 0, 0, 0, \"\", True, False, True, True, False)      ' De-select the Sketch Segment after Linear Sketch Pattern   swDoc.ClearSelection2 True      ' Show Front View after Linear Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    ' Edit a Linear Sketch Pattern &lt;--- FROM HERE IS THE LAST LINE I EXPLAIN   BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 1, 1, 0, 0, 0, \"\", True, False, True, True, False, \"Arc1_\")  End Sub   Since this post is an extension of previous Solidworks Macro - Linear Sketch Pattern post, then I will start explaining from Last line only.   If you want to understand every line of code, then please visit Solidworks Macro - Linear Sketch Pattern post “first”, then read this post.   By doing this, you learn 2 thing:           How to create a Linear Sketch Pattern            How to edit/modify an existing Linear Sketch Pattern       I also give some links so that you can go through them if there are anything I explained in previous posts.   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 1, 1, 0, 0, 0, \"\", True, False, True, True, False, \"Arc1_\")   For “editing” a Linear Sketch pattern, we need EditLinearSketchStepAndRepeat method from Solidworks Sketch Manager object/variable.   This EditLinearSketchStepAndRepeat method takes the following parameters as explained:           NumX: Total number of instances along the x axis, including the seed i.e. original entity/entities.            NumY: Total number of instances along the y axis, including the seed i.e. original entity/entities.            SpacingX: Spacing between instances along the x axis.            SpacingY: Spacing between instances along the y axis.            AngleX: Angle for direction 1 relative to the x axis.            AngleY: Angle for direction 1 relative to the y axis.            DeleteInstances: Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            XSpacingDim: True to display the spacing between instances dimension along the x axis in the graphics area, false to not            YSpacingDim: True to display the spacing between instances dimension along the y axis in the graphics area, false to not            AngleDim: True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDimInXDir: True to display the number of instances in the x direction dimension in the graphics area, false to not.            CreateNumOfInstancesDimInYDir: True to display the number of instances in the y direction dimension in the graphics area, false to not.            Seed: List of the names of the entities, separated by the underscore character (_), that comprise the seed pattern (e.g., Line1_Line2_Line3_Line4 for a rectangular-shaped seed pattern).       NOTE: In Seed, adding underscore(_) after selected entity is important, otherwise code will note work.   After the function complete, we get following results:   Return Value:           True: If Editing of Linear Sketch Pattern is “Success”.            False: If Editing of Linear Sketch Pattern is “Fail”.       In our code, I have used following values:           NumX : I have used 5 as Total number of instances along the x axis including original circle.            NumY : I have used 1 as Total number of instances along the y axis which includes original circle only.          Even uf you don’t want to pattern in Y direction, you have to give atleast 1 as a value. Same goes for X direction.            SpacingX : I use 1 as Spacing between instances along the x axis.            SpacingY : I use 0 Spacing between instances along the y axis.            AngleX : I use 0 Angle for direction 1 relative to the x axis.            AngleY : I use 0 Angle for direction 1 relative to the y axis.            DeleteInstances : I use ”“ as Number of instances to delete, because I don’t want to delete any instances.            XSpacingDim : I use True to display the spacing between instances dimension along the x axis in the graphics area.            YSpacingDim : I use False to display the spacing between instances dimension along the y axis in the graphics area.            AngleDim : I use True to display the angle dimension between axes in the graphics area.            CreateNumOfInstancesDimInXDir : I use True to display the number of instances in the x direction dimension in the graphics area.            CreateNumOfInstancesDimInYDir : I use False to display the number of instances in the y direction dimension in the graphics area.            Seed : I use Arc1_ as the seed of this Edit Pattern Function. We can select multiple sketch entities into existing Linear Sketch Pattern.         Cases   In this section, we will go through different cases by           Modifying different parameters                       A basic 1 line description                        Sample Code of parameter modification                        See images, before and after parameter modification         CASE 1 : Increase Total number of instances along the “X” axis   To increase Total number of instances along the “X” axis, we need to update NumX parameter in EditLinearSketchStepAndRepeat method.   In my previous Solidworks Macro - Linear Sketch Pattern post, we created a Linear pattern 3 instances in x-direction.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 1, 1, 0, 0, 0, \"\", True, False, True, True, False, \"Arc1_\")   In above code, we update the number of instances from 3 instances to 5 instances.   Example Images:   Below image shows before and after we update number of instance in X-direction.   Before Edit Linear Sketch Pattern      After Edit Linear Sketch Pattern        CASE 2 : Increase Total number of instances along the “Y” axis   To increase Total number of instances along the “Y” axis, we need to update NumY parameter in EditLinearSketchStepAndRepeat method.   If we increase the number of instances in Y-direction, then we also need to give value for SpacingY parameter.   We need following parameters to update:           NumY            SpacingY       We will use following values for these parameters:           NumY: 4            SpacingY: 0.75       Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0, 0, \"\", True, False, True, True, False, \"Arc1_\")   Example Images:   Below image shows before and after we update number of instance in Y-direction.   Before Edit Linear Sketch Pattern      After Edit Linear Sketch Pattern      NOTE:   As you notice in previous image, when you give values for NumY and SpacingY, number of instances increased in X-direction!   Why the instances are increased in X-direction not in Y-direction as I was expecting?   This question comes in my mind after seeing the result!   Reason is that we did not give value of AngleY parameter.   If you provide the value of AngleY parameter then we can have instances in Y-direction.   More detail with example in CASE 4.     CASE 3 : Update Angle for direction 1 along the “X” axis   To update Angle for direction 1 along the “X” axis, we need to update AngleX parameter in EditLinearSketchStepAndRepeat method.   We will use following value for AngleX parameter:      AngleX: 0.785.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 0, \"\", True, False, True, True, False, \"Arc1_\")   Example Images:   Below image shows before and after we update Angle for direction 1 along the “X” axis.   Before Edit Linear Sketch Pattern      After Edit Linear Sketch Pattern      NOTE:   In this case, we use AngleX = 0.785.   This value is in Radian.   Hence, 0.785 Radian = 44.999 Degree   So we have update Angle for direction 1 in ~45 degree.     CASE 4 : Update Angle for direction 1 along the “Y” axis   To update Angle for direction 2 along the “Y” axis, we need to update AngleY parameter in EditLinearSketchStepAndRepeat method.   We will use following value for AngleY parameter:      AngleX: 1.5708.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"\", True, False, True, True, False, \"Arc1_\")   Example Images:   Below image shows before and after we update Angle for direction 2 along the “Y” axis.   Before Edit Linear Sketch Pattern      After Edit Linear Sketch Pattern      NOTE:   In this case, we use AngleY = 1.5708.   This value is in Radian.   Hence, 1.5708 Radian = 90 Degree   So we have update Angle for direction 1 in 90 degree.     CASE 5 : Number of instances to delete   Ok, this one is a little “tricky”!!!   We want to delete some instance now.   For deleting instances, we need following:           Deleting instance’s position with respect to X and Y directions.            Those position in a particular format.       Grid Position Image:   I tried my best to describe you this position system in Grid format using image.   Please see below image for this Grid position.      We are going to delete 2 instances.   1st Instance: First we will get the position of this instance.           In X-Direction: As you can see in above image, position of this instance is 3 in Grid position system for X-Direction.            In Y-Direction: As you can see in above image, position of this instance is 2 in Grid position system for Y-Direction.       2nd Instance: First we will get the position of this instance.           In X-Direction: As you can see in above image, position of this instance is 2 in Grid position system for X-Direction.            In Y-Direction: As you can see in above image, position of this instance is 1 in Grid position system for Y-Direction.       Position in special format: After we get the position, we need to put “Grid position” of each instance inside a bracket (or paranthesis).   One thing to note here is that, there should be no “comma” between bracket (or paranthesis).   Please see below code sample for detail.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"(3,2)(2,1)\", True, False, True, True, False, \"Arc1_\")     CASE 6 : Display the spacing between instances dimension along the “Y” axis   In our code sample, we display the spacing between instances dimension along the X axis.   We do this by XSpacingDim = True.   If we want to display the spacing between instances dimension along the Y axis.   For that we need to set YSpacingDim = True.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"(3,2)(2,1)\", True, True, True, True, False, \"Arc1_\")   Example Images:   Below image shows after we update value for display dimension along the **Y axis**.   Before Edit Linear Sketch Pattern        CASE 7 : Display the angle dimension between axes   In our code sample, we display the angle dimension between axes.   We do this by AngleDim = True.   If we don’t want to display the angle dimension between axes then we need to set AngleDim = False.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"(3,2)(2,1)\", True, True, False, True, False, \"Arc1_\")   Example Images:   Below image shows after we update value to False for the angle dimension between axes.   Before Edit Linear Sketch Pattern        CASE 8 : Display the number of instances in the “X” direction   In our code sample, we display the number of instances along the X axis.   We do this by CreateNumOfInstancesDimInXDir = True.   If we don’t want to display the number of instances along the X axis then we need to set CreateNumOfInstancesDimInXDir = False.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"(3,2)(2,1)\", True, True, False, False, False, \"Arc1_\")   Example Images:   Below image shows after we update value to False for not display the number of instances in the X direction.   Before Edit Linear Sketch Pattern        CASE 9 : Display the number of instances in the “Y” direction   In our code sample, we don’t display the number of instances along the Y axis.   We do this by CreateNumOfInstancesDimInYDir = False.   If we want to display the number of instances along the Y axis then we need to set CreateNumOfInstancesDimInYDir = True.   Code sample:   ' Edit a Linear Sketch Pattern BoolStatus = swSketchManager.EditLinearSketchStepAndRepeat(5, 4, 1, 0.75, 0.785, 1.5708, \"(3,2)(2,1)\", True, True, False, False, True, \"Arc1_\")   Example Images:   Below image shows after we update value to True for display the number of instances in the Y direction.   Before Edit Linear Sketch Pattern        CASE 10 : Multiple entities as Seed   In our code sample, we use only 1 circle for Linear Sketch pattern.   But in many cases we need to select many sketch entities.   In this condition, add the entities name with an underscore (_) one by one.   For example, we want to pattern a Ractangle, in this case, value of seed should be following:      Seed : Line1_Line2_Line3_Line4_     NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Please see below for detail:           Length: Meter            Angle: Radian       Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance. But when I used Solidworks API through VBA macros or C#, I need to converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     This is it !!!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Edit a Linear Sketch Pattern with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/edit-linear-skech-pattern/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Circular Sketch Pattern",
        "excerpt":"In this post, I tell you about how to Circular Sketch Pattern using Solidworks VBA Macros in a Sketch.     Video of Code on YouTube   Please see below video how visually we Circular Sketch Pattern in Solidworks VBA macro.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     For Experience Macro Developers   If you are an experience Solidworks Macro developer, then you are looking for a specific code sample.   Below is the code for Circular Sketch Pattern from Solidworks VBA Macro.   ' Boolean Variable Dim BoolStatus As Boolean  ' Select Circle we want to Pattern BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)  ' Create a Circular Sketch Pattern BoolStatus = swSketchManager.CreateCircularSketchStepAndRepeat(0.5, 0, 3, 1, True, \"\", True, True, True)   Method Name: CreateCircularSketchStepAndRepeat   Description: Create Linear Sketch Pattern of the selected sketch entity or entities.   Prerequisites: To create a Linear Sketch Pattern a Solidworks Sketch entity or entities, first we need following things:           Sketch Entity/Entities to Pattern            That Entity/Entities is selected before pattern       How it works:           For Circular Sketch Pattern, first you need to Create a variable of Boolean type.            After creating variable, you need to set the value of this Boolean variable.            For this you used CreateCircularSketchStepAndRepeat method from Solidworks Sketch Manager.            This CreateCircularSketchStepAndRepeat method set the value of Boolean type variable.            If the Circular Sketch Pattern is successful then CreateCircularSketchStepAndRepeat method return True value otherwise CreateCircularSketchStepAndRepeat returns False value.       This CreateCircularSketchStepAndRepeat method takes following parameters as explained:           ArcRadius : Radius for the circular sketch pattern.            ArcAngle : Angle relative to the sketch entities being patterned.            PatternNum : Total number of instances, including the seed geometry.            PatternSpacing : Spacing between pattern instances.            PatternRotate : True to rotate the pattern, false to not.            DeleteInstances : Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            RadiusDim : True to display the radius dimension in the graphics area, false to not.            AngleDim : True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDim : True to display the number of instances dimension in the graphics area, false to not.       If you want more detailed explaination then please read further otherwise this will help you to create a Circular Sketch Pattern.     For Beginner Macro Developers   In this post, I tell you about CreateCircularSketchStepAndRepeat method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to create Circular Sketch Pattern.   Below is the code sample to create Circular Sketch Pattern.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2)      ' De-select the lines after creation   swDoc.ClearSelection2 True    ' Select Circle we want to Pattern   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Create a Circular Sketch Pattern   BoolStatus = swSketchManager.CreateCircularSketchStepAndRepeat(0.5, 0, 3, 1, True, \"\", True, True, True)      ' De-select the Sketch Segment after Circular Sketch Pattern   swDoc.ClearSelection2 True    ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Set Sketch Segment value and Create a Circle Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, 0.2)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircleByRadius method from Solidworks Sketch Manager.   This CreateCircleByRadius method creates a Circle at given point with radius.   For more information about CreateCircleByRadius method, you can read my Solidworks Macro - Create Circle By Radius post.   That post describe all the parameters we need for this CreateCircleByRadius method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Radius : 0.2       ' De-select the lines after creation swDoc.ClearSelection2 True   After creating the circle we de-select it.      We don’t need to de-select the circle for Pattern as we will select the circle agains in next line. I just want to show you how to select a Sketch Segment with SelectById Menthod in next line of code.    ' Select Circle we want to Pattern BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select the Circle i.e. Arc 1 and add it to selection list.   ' Create a Circular Sketch Pattern BoolStatus = swSketchManager.CreateCircularSketchStepAndRepeat(0.5, 0, 3, 1, True, \"\", True, True, True)   In above line, we Pattern selected Circle by CreateCircularSketchStepAndRepeat method from Solidworks Sketch Manger variable.   This CreateCircularSketchStepAndRepeat method takes following parameters as explained:           ArcRadius : Radius for the circular sketch pattern. This value is in radian.            ArcAngle : Angle relative to the sketch entities being patterned. This value is in radian.            PatternNum : Total number of instances, including the seed geometry.            PatternSpacing : Spacing between pattern instances. This value is in radian.            PatternRotate : True to rotate the pattern, false to not.            DeleteInstances : Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            RadiusDim : True to display the radius dimension in the graphics area, false to not.            AngleDim : True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDim : True to display the number of instances dimension in the graphics area, false to not.       After the function complete following are the results:   Return Value:           True: If Circular Sketch Pattern is *Success.*            False: If Circular Sketch Pattern is *Fail.*       Circular Sketch Pattern Parameter   Below image shows Circular Sketch Pattern Parameter.      In our code, I have used following values:           ArcRadius : I have used 0.5 value, Radius for the circular sketch pattern.            ArcAngle : I have used 0 value, Angle relative to the sketch entities being patterned.            PatternNum : I have used 3 value, Total number of instances, including the seed geometry.            PatternSpacing : I have used 1 value, Spacing between pattern instances.            PatternRotate : I have used True value, to rotate the pattern.            DeleteInstances : I have used ”“ i.e. empty string value number of instances to delete.            RadiusDim : I have used True value, to display the radius dimension.            AngleDim : I have used True value, to display the angle dimension between axes.            CreateNumOfInstancesDim : I have used True value, display the number of instances dimension.       Below image shows before and after Circular Sketch Pattern.   Before Circular Sketch Pattern      After Circular Sketch Pattern        NOTE   It is very important to remember that, when you give distance or any other numeric value in Solidworks API, Solidworks takes that numeric value in Meter only.   Please see below for detail:           Length: Meter            Angle: Radian       Solidworks API does not care about your application’s Unit systems.   For example, I works in ANSI system means inches for distance.   But when I used Solidworks API through VBA macros or C#, I need to converted numeric values.   Because Solidworks API output the distance in Meter which is not my requirement.     ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Circular Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Circular Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.   This is it !!!   If you found anything to add or update, please let me know on my e-mail.     VBA Language feature used in this post   In this post used some features of VBA programming language.   This section of post, has some brief information about the VBA programming language specific features.           We use Option Explicit for capturing un-declared variables. If you want to read more about Option Explicit then please visit Declaring and Scoping of Variables.            Then we create variable for different data types. If you know in detail about the Variables, then please visit Variables and Data-types posts of this blog. It will help you to understand what Variables are and how to use them.            Then we create main Sub procedure for our macro. If you know in detail about the Sub procedure, then I suggest you to visit VBA Sub and Function Procedures and Executing Sub and Function Procedures posts of this blog. It will help you to understand what Procedures are and how to use them.            In most part we create some variables and set their values. We set those values by using some functions provided from objects. If you don’t know about the functions, then you should visit VBA Functions and VBA Functions that do more posts of this blog. It will help you to understand what functions are and how to use them.         Solidworks API Objects   In this post of Circular Sketch Pattern, we use Solidworks API objects and their methods.   This section contains the list of all Solidworks Objects used in this post.   I have also attached links of these Solidworks API Objects in API Help website.   If you want to explore those objects, you can use these links.   These Solidworks API Objects are listed below:           Solidworks Application Object       If you want explore Properties and Methods/Functions of Solidworks Application Object object you can visit this link.            Solidworks Document Object       If you want explore Properties and Methods/Functions of Solidworks Document Object object you can visit this link.            Solidworks Sketch Manager Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Manager Object you can visit this link.            Solidworks Sketch Segment Object       If you want explore Properties and Methods/Functions of Solidworks Sketch Segment Object you can visit this link.         Hope this post helps you to Create Circular Sketch Pattern with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/circular-skech-pattern/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Edit Circular Sketch Pattern",
        "excerpt":"Introduction   In this post, I tell you about how to Edit Circular Sketch Pattern using Solidworks VBA Macros in a Sketch.   In this post, I explain about EditCircularSketchStepAndRepeat method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to edit existing Circular Sketch Pattern.   This post is a little different of previous Solidworks Macro - Circular Sketch Pattern post.   There are 2 changes I have made, which I am going to use on future posts also.   These change are explain below:           In this post I used code sample from General - Fix Unit Issue post to fix unit conversion issue and show how to use it.            In input parameter of EditCircularSketchStepAndRepeat method, I passed variables not direct values. This helps us to maintain the code and modification of existing code is simple.         Code Sample   Below is the code sample to edit Circular Sketch Pattern.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Circle Radius   Dim circleRadius As Double   circleRadius = 5 * LengthConversionFactor      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, circleRadius)      ' De-select the lines after creation   swDoc.ClearSelection2 True    ' Select Circle we want to Pattern   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Arc Radius   Dim arcRadius As Double   arcRadius = 10 * LengthConversionFactor      ' Arc Angle   Dim arcAngle As Double   arcAngle = 0 * AngleConversionFactor      ' Number of Instances   Dim numberOfInstance As Double   numberOfInstance = 3      ' Pattern Spacing   Dim patternSpacing As Double   patternSpacing = 5 * AngleConversionFactor      ' Create a Circular Sketch Pattern   BoolStatus = swSketchManager.CreateCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, True, \"\", True, True, True)      ' De-select the Sketch Segment after Circular Sketch Pattern   swDoc.ClearSelection2 True      ' Update Arc Radius   arcRadius = 20 * LengthConversionFactor    ' Edit a Circular Sketch Pattern   BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, True, \"\", True, True, True, \"Arc1_\")    ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Circle Radius Dim circleRadius As Double circleRadius = 5 * LengthConversionFactor   In above code sample, we do following:           Create a local variable named circleRadius, which is Double type.            In 2nd line, we assign a value of 5 to our circleRadius variable, also we multiple with our LengthConversionFactor variable.       Since I am using IPS unit system, I want to create a circle of Radius 5 inch.   ' Set Sketch Segment value and Create a Circle Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, circleRadius)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircleByRadius method from Solidworks Sketch Manager.   This CreateCircleByRadius method creates a Circle at given point with radius.   For more information about CreateCircleByRadius method, you can read my Solidworks Macro - Create Circle By Radius post.   That post describe all the parameters we need for this CreateCircleByRadius method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Radius : circleRadius       ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Circular Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Select Circle we want to Pattern BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select the Circle i.e. Arc 1 and add it to selection list.   ' Arc Radius Dim arcRadius As Double arcRadius = 10 * LengthConversionFactor   Above code sample creates a variable for Arc Radius and assign value.   While assigning the value we multiple with LengthConversionFactor to get correct length.   Variable Name: arcRadius   Variable type: Double   Variable Value: 10 inch   We want Arc Radius to 10 inch.      By creating the variables we can handle the values more effciently.    ' Arc Angle Dim arcAngle As Double arcAngle = 0 * AngleConversionFactor   Above code sample creates a variable for Arc Angle and assign value.   While assigning the value we multiple with AngleConversionFactor to get correct angle.   Variable Name: arcAngle   Variable type: Double   Variable Value: 0   We want Arc Angle to 0 degree.   ' Number of Instances Dim numberOfInstance As Double numberOfInstance = 3   Above code sample creates a variable for Number of Instances and assign value.   Variable Name: numberOfInstance   Variable type: Double   Variable Value: 3   We want 3 copies of the circle including the seed i.e. original circle.   ' Pattern Spacing Dim patternSpacing As Double patternSpacing = 5 * AngleConversionFactor   Above code sample creates a variable for Pattern Spacing and assign value.   While assigning the value we multiple with AngleConversionFactor to get correct angle.   Variable Name: patternSpacing   Variable type: Double   Variable Value: 5   We want 5 degree of spacing between each circle.   ' Create a Circular Sketch Pattern BoolStatus = swSketchManager.CreateCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, True, \"\", True, True, True)   In above code sample we Create a Circular Sketch Pattern of the selected circle by CreateCircularSketchStepAndRepeat method from Solidworks Sketch Manger variable.   As you can see we pass our previously created variables arcRadius, arcAngle, numberOfInstance and patternSpacing in CreateCircularSketchStepAndRepeat method as parameters.   I have explained CreateCircularSketchStepAndRepeat method in detail in Sketch - Circular Sketch Pattern post.   Please see above post if you want to learn more about CreateCircularSketchStepAndRepeat method and its parameters.   Below image shows Circular Sketch Pattern Parameter.      ' De-select the Sketch Segment after Circular Sketch Pattern swDoc.ClearSelection2 True   In above line we de-select the Sketch Segment after creating Circular Sketch Pattern.   ' Update Arc Radius arcRadius = 20 * LengthConversionFactor   In above line we Update Arc Radius to new value which we will use in Editing previously created Circular Sketch pattern.   Variable Name: arcRadius   Updated Value: 20 inch   ' Edit a Circular Sketch Pattern BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, True, \"\", True, True, True, \"Arc1_\")   For “editing” a Circular Sketch pattern, we need EditCircularSketchStepAndRepeat method from Solidworks Sketch Manager object/variable.   This CreateCircularSketchStepAndRepeat method takes following parameters as explained:           ArcRadius : Radius for the circular sketch pattern. This value is in radian.            ArcAngle : Angle relative to the sketch entities being patterned. This value is in radian.            PatternNum : Total number of instances, including the seed geometry.            PatternSpacing : Spacing between pattern instances. This value is in radian.            PatternRotate : True to rotate the pattern, false to not.            DeleteInstances : Number of instances to delete, passed as a string in the format: “(a) (b) (c)”.            RadiusDim : True to display the radius dimension in the graphics area, false to not.            AngleDim : True to display the angle dimension between axes in the graphics area, false to not.            CreateNumOfInstancesDim : True to display the number of instances dimension in the graphics area, false to not.            Seed: List of the names of the entities, separated by the underscore character (_), that comprise the seed pattern (e.g., Arc1_ as a seed pattern).       NOTE: In Seed, adding underscore(_) after selected entity is important, otherwise code will note work.   After the function complete following are the results:   Return Value:           True: If Edit Circular Sketch Pattern is *Success.*            False: If Edit Circular Sketch Pattern is *Fail.*         Cases   In this section, we will go through different cases by           Modifying different parameters            See images, before and after parameter modification         CASE 1 : Update Arc Radius   In our code, if we want to update Arc Radius, then we need to update arcRadius variable only.   ' Update Arc Radius arcRadius = 20 * LengthConversionFactor   In above line we Update Arc Radius to new value. of 20 inch.   Example Images:   Below image shows before and after we update Arc Radius.   Before Update Arc Radius      After Update Arc Radius      CASE 2 : Update Arc Angle   In our code, if we want to update Arc Angle, then we need to update arcAngle variable only.   ' Update Arc Angle arcAngle = 30 * AngleConversionFactor   In above line we Update Arc Angle to new value of 30 inch.   Example Images:   Below image shows before and after we update Arc Angle.   Before Update Arc Angle      After Update Arc Angle      CASE 3 : Update Number of Instances   In our code, if we want to update Number of Instances, then we need to update numberOfInstance variable only.   ' Update Number of Instances numberOfInstance = 5   In above line we Update Number of Instances to new value of 5 number of instances.   Example Images:   Below image shows before and after we update Number of Instances.   Before Update Number of Instances      After Update Number of Instances      CASE 4 : Update Pattern Spacing   In our code, if we want to update Number of Instances, then we need to update patternSpacing variable only.   ' Update Pattern Spacing patternSpacing = 10 * AngleConversionFactor   In above line we Update Pattern Spacing to new value of 10 degree.   Example Images:   Below image shows before and after we update Pattern Spacing.   Before Update Pattern Spacing      After Update Pattern Spacing      CASE 5 : Update Display Rotation of Pattern   If we want to update Display Rotation of Pattern, then we need to update value to either True or False.   In our code, we set this value to True which means we are displaying the rotation of pattern.   We update our code for not displaying the rotation of pattern as given in below code sample.   ' Edit a Circular Sketch Pattern BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, False, \"\", True, True, True, \"Arc1_\")   Example Images:   Below image shows before and after we update Display Rotation of Pattern.   Before Update Display Rotation of Pattern      After Update Display Rotation of Pattern      CASE 6 : Update Number of Instances to Delete   If we want to update Number of Instances to Delete, then we need to update value of \"\" as given in below code sample.   ' Edit a Circular Sketch Pattern BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, False, \"(3)\", True, True, True, \"Arc1_\")   In above code sample, we want to delete 3rd instance hence we pass the number 3 inside ().      Note: For delete any instance we need to pass its position in paranthesis (). Otherwise it won’t work.    Example Images:   Below image shows before and after we update Number of Instances to Delete.   Before Update Number of Instances to Delete      After Update Number of Instances to Delete      CASE 7 : Update Display Radius Dimension   If we want to update Display Radius Dimension, then we need to update value to either True or False.   In our code, we set this value to True which means we are displaying the Display Radius Dimension.   We update our code for not displaying the Display Radius Dimension as given in below code sample.   ' Edit a Circular Sketch Pattern BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, False, \"(3)\", False, True, True, \"Arc1_\")   Example Images:   Below image shows before and after we update Display Radius Dimension.   Before Update Display Radius Dimension      After Update Display Radius Dimension      CASE 8 : Update Display Angle Dimension   If we want to update Display Angle Dimension, then we need to update value to either True or False.   In our code, we set this value to True which means we are displaying the Display Angle Dimension.   We update our code for not displaying the Display Angle Dimension as given in below code sample.   ' Edit a Circular Sketch Pattern BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, False, \"(3)\", False, False, True, \"Arc1_\")   Example Images:   Below image shows before and after we update Display Angle Dimension.   Before Update Display Angle Dimension      After Update Display Angle Dimension      CASE 9 : Update Display Number of Instances   If we want to update Display Number of Instances, then we need to update value to either True or False.   In our code, we set this value to True which means we are displaying the Display Number of Instances.   We update our code for not displaying the Display Number of Instances as given in below code sample.   ' Edit a Circular Sketch Pattern BoolStatus = swSketchManager.EditCircularSketchStepAndRepeat(arcRadius, arcAngle, numberOfInstance, patternSpacing, False, \"(3)\", False, False, False, \"Arc1_\")   Example Images:   Below image shows before and after we update Display Number of Instances.   Before Update Display Number of Instances      After Update Display Number of Instances        This is it !!!   It is indeed a very LONG post. But I try to update the code and move into the direction where we were able to use these code samples in UserForms.   I hope you like my effort!!!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Edit a Circular Sketch Pattern with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/edit-circular-skech-pattern/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Move/Copy Sketch Entities",
        "excerpt":"Introduction   In this post, I tell you about how to Move/Copy Sketch Entities using Solidworks VBA Macros in a Sketch.   In this post, I explain about MoveOrCopy method from Solidworks ModelDoc2’s Extension object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to MoveOrCopy Sketch Entities.   This post is similar to previous Solidworks Macro - Edit Circular Sketch Pattern post.   If you have not visited my previous Solidworks Macro - Edit Circular Sketch Pattern post, then please do check-it if you want to learn Editing Circular Sketch Patterns.     Code Sample   Below is the code sample to edit Circular Sketch Pattern.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Circle Radius   Dim circleRadius As Double   circleRadius = 5 * LengthConversionFactor      ' Set Sketch Segment value and Create a Circle   Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, circleRadius)      ' Defining variables for Destination Co-ordinates   Dim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double      ' Setting the values of Destination Co-ordinates in X &amp; Y directions for Move   destinationCoOrdinateInXDir = 10 * LengthConversionFactor   destinationCoOrdinateInYDir = 10 * LengthConversionFactor      ' Move circle   swDoc.Extension.MoveOrCopy False, 1, False, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0      ' Setting the values of Destination Co-ordinates in X &amp; Y directions for Copy   destinationCoOrdinateInXDir = 15 * LengthConversionFactor   destinationCoOrdinateInYDir = 15 * LengthConversionFactor      ' Copy circle   swDoc.Extension.MoveOrCopy True, 3, True, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0      ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Circle Radius Dim circleRadius As Double circleRadius = 5 * LengthConversionFactor   In above code sample, we do following:           Create a local variable named circleRadius, which is Double type.            In 2nd line, we assign a value of 5 to our circleRadius variable, also we multiple with our LengthConversionFactor variable.       Since I am using IPS unit system, I want to create a circle of Radius 5 inch.   ' Set Sketch Segment value and Create a Circle Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, circleRadius)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircleByRadius method from Solidworks Sketch Manager.   This CreateCircleByRadius method creates a Circle at given point with radius.   For more information about CreateCircleByRadius method, you can read my Solidworks Macro - Create Circle By Radius post.   That post describe all the parameters we need for this CreateCircleByRadius method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Radius : circleRadius       ' Defining variables for Destination Co-ordinates Dim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double   In above line of code, we create two variables of double type in one single line.   These variables we use for defining Destination Co-ordinates.   Variables Name:           destinationCoOrdinateInXDir            destinationCoOrdinateInYDir       ' Setting the values of Destination Co-ordinates in X &amp; Y directions for Move destinationCoOrdinateInXDir = 10 * LengthConversionFactor destinationCoOrdinateInYDir = 10 * LengthConversionFactor   In above line of code, we set the values of Destination Co-ordinates in X &amp; Y directions for Move selected circle.   Variables Values:           destinationCoOrdinateInXDir = 10 * LengthConversionFactor       10” in X direction.            destinationCoOrdinateInYDir = 10 * LengthConversionFactor       10” in Y direction.       ' Move circle swDoc.Extension.MoveOrCopy False, 1, False, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0   For “Moving” a sketch entity, we need MoveOrCopy method from Solidworks ModelDoc2’s Extension object.   This MoveOrCopy method takes following parameters as explained:           Copy : True to copy the sketch entities, False to not.            NumCopies : Number of copies you want to create.            KeepRelations : True to keep sketch relations after Move or Copy operation, False to not.            BaseX : X coordinate of the base point from which to move the sketch entities.            BaseY : Y coordinate of the base point from which to move the sketch entities.            BaseZ : Z coordinate of the base point from which to move the sketch entities.            DestX : X coordinate of the destination point from which to move the sketch entities.            DestY : Y coordinate of the destination point from which to move the sketch entities.            DestZ : Z coordinate of the destination point from which to move the sketch entities.       NOTE: There are no return value after this function.     Cases   In this section, we will go through different cases by           Modifying different parameters            See images, before and after parameter modification         CASE 1 : Move Sketch Entities   In our code, if we want to Move Sketch Entities, then we need to use code sample as given below:   ' Defining variables for Destination Co-ordinates Dim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double  ' Setting the values of Destination Co-ordinates in X &amp; Y directions for Move destinationCoOrdinateInXDir = 10 * LengthConversionFactor destinationCoOrdinateInYDir = 10 * LengthConversionFactor  ' Move circle swDoc.Extension.MoveOrCopy False, 1, False, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0   In above line we Move Sketch Entities to new position i.e. 10” in X-Direction and 10” in Y-Direction.   In above code we need to set following parameters:           Copy : False to not create a copy.            NumCopies : Number of copies you want to create to 1 which is itself.            KeepRelations : True to keep sketch relations after Move or Copy operation.            BaseX : X coordinate of the base point  = 0            BaseY : Y coordinate of the base point  = 0            BaseZ : Z coordinate of the base point  = 0            DestX : X coordinate of the destination  = 10”            DestY : Y coordinate of the destination point  = 10”            DestZ : Z coordinate of the destination point  = 0       Example Images:   Below image shows before and after we Move Sketch Entitny.   Before Move Sketch Entitny      After Move Sketch Entitny      CASE 2 : Copy Sketch Entities   In our code, if we want to Copy Sketch Entities, then we need to use code sample as given below:   ' Defining variables for Destination Co-ordinates Dim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double  ' Setting the values of Destination Co-ordinates in X &amp; Y directions for Move destinationCoOrdinateInXDir = 15 * LengthConversionFactor destinationCoOrdinateInYDir = 15 * LengthConversionFactor  ' Copy circle swDoc.Extension.MoveOrCopy True, 3, True, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0   In above line we Copy Sketch Entities to new position i.e. 15” in X-Direction and 15” in Y-Direction for every copy of sketch.   This will more clear in below images when you scroll down.   In above code we need to set following parameters:           Copy : True to create a copy.            NumCopies : Number of copies we want to create: 3            KeepRelations : True to keep sketch relations after Move or Copy operation.            BaseX : X coordinate of the base point  = 0            BaseY : Y coordinate of the base point  = 0            BaseZ : Z coordinate of the base point  = 0            DestX : X coordinate of the destination  = 15”            DestY : Y coordinate of the destination point  = 15”            DestZ : Z coordinate of the destination point  = 0       Example Images:   Below image shows before and after we Copy Sketch Entitny.   Before Copy Sketch Entitny      After Copy Sketch Entitny        This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Move/Copy Sketch Entities with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/move-copy-sketch-entities/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Rotate/Copy Sketch Entities",
        "excerpt":"Introduction   In this post, I tell you about how to Rotate/Copy Sketch Entities using Solidworks VBA Macros in a Sketch.   In this post, I explain about RotateOrCopy method from Solidworks ModelDoc2’s Extension object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to RotateOrCopy Sketch Entities.   This post is similar to previous Sketch Transformation - Move/Copy Sketch Entities post.   If you have not visited my previous Sketch Transformation - Move/Copy Sketch Entities post, then please do check-it if you want to learn Move/Copy Sketch Entitiess.     Code Sample   Below is the code sample to edit Circular Sketch Pattern.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create a local variable for CenterPoint ractangle   Dim vSketch As Variant      ' Create CenterPoint ractangle   vSketch = swSketchManager.CreateCenterRectangle(0, 0, 0, 1 * LengthConversionFactor, 1 * LengthConversionFactor, 0)        ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Select all lines of CenterPoint Ractangle   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   BoolStatus = swDoc.Extension.SelectByID2(\"Line3\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   BoolStatus = swDoc.Extension.SelectByID2(\"Line4\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Rotate CenterPoint Ractangle by 45 degree only   swDoc.Extension.RotateOrCopy False, 1, True, 0, 0, 0, 0, 0, 1, 45 * AngleConversionFactor      ' De-select all after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Create a local variable for CenterPoint ractangle Dim vSketch As Variant  ' Create CenterPoint ractangle vSketch = swSketchManager.CreateCenterRectangle(0, 0, 0, 1 * LengthConversionFactor, 1 * LengthConversionFactor, 0)   In above code sample, we do following:           Create a local variable named vSketch, which is Variant type.            In 2nd line, we Create CenterPoint ractangle by using CreateCenterRectangle method.       This `CreateCenterRectangle` method is available in `swSketchManager` variable.      This CreateCenterRectangle method return a value. We store that value in previously defined variable  vSketch.   Side of CenterPoint ractangle: 1” or 1 inch   If you want to know more about CreateCenterRectangle method, then please visit Sketch - Create Center Rectangle post.   I have given a detail explaination about CreateCenterRectangle method there.   ' De-select the lines after creation swDoc.ClearSelection2 True   After creating a Square, we de-select all entities.   ' Select all lines of Center Ractangle BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault) BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault) BoolStatus = swDoc.Extension.SelectByID2(\"Line3\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault) BoolStatus = swDoc.Extension.SelectByID2(\"Line4\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select all lines of Center Ractangle by using SelectByID2 method from swDoc.Extension object.      I have not create separate variable Extension, because I like to avoid creating extra objects.    Please not that we have selected only Sides, not the diagonals.   ' Rotate Center Ractangle swDoc.Extension.RotateOrCopy False, 1, True, 0, 0, 0, 0, 0, 1, 45 * AngleConversionFactor   For “Rotating” a sketch entity, we need RotateOrCopy method from Solidworks ModelDoc2’s Extension object.   This RotateOrCopy method takes following parameters as explained:           Copy : True to copy the sketch entities, False to not.            NumCopies : Number of copies you want to create.            KeepRelations : True to keep sketch relations after Rotate or Copy operation, False to not.            BaseX : X coordinate of the base point from which to Rotate the sketch entities.            BaseY : Y coordinate of the base point from which to Rotate the sketch entities.            BaseZ : Z coordinate of the base point from which to Rotate the sketch entities.            DestX : X coordinate of the destination point from which to Rotate the sketch entities.            DestY : Y coordinate of the destination point from which to Rotate the sketch entities.            DestZ : Z coordinate of the destination point from which to Rotate the sketch entities.            Angle : Angle of Rotation by which we rotate the selected sketch entities.       NOTE: There are no return value after this function.     Destination Point Values   Destination Point is defined by following parameters:           DestX            DestY            DestZ       The values of these parameters are mainly dependent on the plane, you have selected.   There values as per Default Planes is given below.   On X-Y Plane   When X-Y plane is selected, then values are:           DestX = 0            DestY = 0            DestZ = 1       On Y-Z Plane   When Y-Z plane is selected, then values are:           DestX = 1            DestY = 0            DestZ = 0       On X-Z Plane   When X-Z plane is selected, then values are:           DestX = 0            DestY = 1            DestZ = 0       Since we are creating our Sketch in X-Y plane, hence I used the values accordingly.     Cases   In this section, we will go through different cases by           Modifying different parameters            See images, before and after parameter modification         CASE 1 : Rotate Sketch Entities   In our code, if we want to Rotate Sketch Entities, then we need to use code sample as given below:   ' Rotate circle swDoc.Extension.RotateOrCopy False, 1, True, 0, 0, 0, 0, 0, 1, 45 * AngleConversionFactor   In above code we Rotate Sketch Entities with:           Base Point : 0, 0, 0            Rotation Angle : 45 Degree Anti-clock wise.          If you want to rotate Clock-wise, then then use Negeative (-ve) value.    In above code we need to set following parameters:           Copy : False to not create a copy.            NumCopies : Number of copies you want to create to 1 which is itself.            KeepRelations : True to keep sketch relations after Rotate or Copy operation.            BaseX : X coordinate of the base point  = 0            BaseY : Y coordinate of the base point  = 0            BaseZ : Z coordinate of the base point  = 0       Since we are creating sketch in X-Y plane, hence I used values mentioned in Destination Point Values section of this post.           DestX : X coordinate of the destination  = 0            DestY : Y coordinate of the destination point  = 0            DestZ : Z coordinate of the destination point  = 1            Rotation Angle : Angle of Rotation by which we rotate the selected sketch entities = 45 Degree Anti-clock wise.       Example Images:   Below image shows before and after we Rotate Sketch Entitny.   Before Rotate Sketch Entitny      After Rotate Sketch Entitny      CASE 2 : Copy and Rotate Sketch Entities   In our code, if we want to Copy and Rotate Sketch Entities, then we need to use code sample as given below:   ' Copy circle swDoc.Extension.RotateOrCopy True, 2, True, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0   In above code we Rotate Sketch Entities with:           Create Copy : True            Base Point : 0, 0, 0            Rotation Angle of Copied Entity : 45 Degree Anti-clock wise.          If you want to rotate Clock-wise, then then use Negeative (-ve) value.    In above code we need to set following parameters:           Copy : True to not create a copy.            NumCopies : Number of copies you want to create to 2 which is itself.            KeepRelations : True to keep sketch relations after Rotate or Copy operation.            BaseX : X coordinate of the base point  = 0            BaseY : Y coordinate of the base point  = 0            BaseZ : Z coordinate of the base point  = 0       Since we are creating sketch in X-Y plane, hence I used values mentioned in Destination Point Values sections of this post.           DestX : X coordinate of the destination  = 0            DestY : Y coordinate of the destination point  = 0            DestZ : Z coordinate of the destination point  = 1            Rotation Angle : Angle of Rotation by which we rotate the selected sketch entities = 45 Degree Anti-clock wise.       Example Images:   Below image shows before and after we Rotate Sketch Entitny.   Before Rotate Sketch Entitny      After Rotate Sketch Entitny        This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Rotate/Copy Sketch Entities with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/rotate-copy-sketch-entities/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Toggle (Hide/Show) Sketch Relations",
        "excerpt":"In this post, I tell you about how to Toggle (Hide/Show) Sketch Relations using Solidworks VBA Macros in a Sketch.   This post is extension to Sketch Transformation - Rotate/Copy Sketch Entities post.   Hence I will explained only Toggle (Hide/Show) Sketch Relations related code.   In this post, I explain about SetUserPreferenceToggle method from Solidworks’s ModelDoc2 object.   This method is NOT updated method, but it is easiest way to Toggle (Hide/Show) Sketch Relations.     Code Sample   Below is the code sample to Toggle (Hide/Show) Sketch Relations.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create a local variable for CenterPoint ractangle   Dim vSketch As Variant      ' Create CenterPoint ractangle   vSketch = swSketchManager.CreateCenterRectangle(0, 0, 0, 1 * LengthConversionFactor, 1 * LengthConversionFactor, 0)        ' De-select the lines after creation   swDoc.ClearSelection2 True      ' Select all lines of CenterPoint Ractangle   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   BoolStatus = swDoc.Extension.SelectByID2(\"Line3\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   BoolStatus = swDoc.Extension.SelectByID2(\"Line4\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Rotate CenterPoint Ractangle by 45 degree only   swDoc.Extension.RotateOrCopy True, 2, True, 0, 0, 0, 0, 0, 1, 45 * AngleConversionFactor      ' Toggle (Hide/Show) Sketch Relations   BoolStatus = swDoc.SetUserPreferenceToggle(swUserPreferenceToggle_e.swViewSketchRelations, True)      ' De-select all after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding the Code   I have already discuss above code in previous Sketch Transformation - Rotate/Copy Sketch Entities post except below line of code.   ' Toggle (Hide/Show) Sketch Relations BoolStatus = swDoc.SetUserPreferenceToggle(swUserPreferenceToggle_e.swViewSketchRelations, True)   For “Toggle (Hide/Show)”  Sketch Relations, we need SetUserPreferenceToggle method from Solidworks’s ModelDoc2 object.   This SetUserPreferenceToggle method takes following parameters as explained:      UserPreferenceValue : Use Preference Values to toggle as defined in swUserPreferenceToggle_e.      NOTE: swUserPreferenceToggle_e has many values!!!  Hence it is not possible to list all of them here. If you want to check full list, please visit this page of Solidworks API Help.       OnFlag : True to toggle the value on, false to toggle the value off.   In our code, we used following values:           UserPreferenceValue : swUserPreferenceToggle_e.swViewSketchRelations            OnFlag : True       Return Value:           True: If Toggle (Hide/Show) of Sketch Relations is Success.            False: If Toggle (Hide/Show) of Sketch Relations is Fail.       Before Toggle (Hide/Show) of Sketch Relations      After Toggle (Hide/Show) of Sketch Relations        This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Toggle (Hide/Show) of Sketch Relations with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/toggle-display-sketch-relation/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Add Sketch Relations (Constraints)",
        "excerpt":"In this post, I tell you about how to Add Sketch Relations (Constraints) using Solidworks VBA Macros in a Sketch.   In this post, I explain about SketchAddConstraints method from Solidworks’s ModelDoc2 object.   This method is most updated method, I found in Solidworks API Help.   This post will utilize the methods explained in earlier posts, hence knowledge to those is required but it is not mandatory.   An absolute beginner can follow what is written here.     Add Sketch Relations (Constraints) method   For adding relations to a sketch segment, we use SketchAddConstraints method from Solidworks’s ModelDoc2 object.   This SketchAddConstraints method takes following parameters as explained:      Constraint : ID of constraint as given on this page of Solidworks API Help.   Return Value: There are no return value for this method.   In following sections we add different sketch constraints to sketch segments.     Add ‘Fix’ Sketch Relation to a sketch segment   Here we learn how to add Fixed sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a circle as shown in below image:   Before Add Fix Sketch Relation to Circle      Code to add Fix sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to active part document   Set swDoc = swApp.ActiveDoc      ' Select Circle   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Fix sketch relation   swDoc.SketchAddConstraints (\"sgFIXED\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Fix Sketch Relation to Circle      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Coincident’ Sketch Relation to a sketch segment   Here we learn how to add Coincident sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a circle as shown in below image:   Before Add Coincident Sketch Relation to Circle      Code to add Coincident sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Circle center point   BoolStatus = swDoc.Extension.SelectByID2(\"Point2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Origin   BoolStatus = swDoc.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Coincident sketch relation   swDoc.SketchAddConstraints (\"sgCOINCIDENT\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Coincident Sketch Relation to Circle      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Horizontal’ Sketch Relation to a sketch segment   Here we learn how to add Horizontal sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a Line as shown in below image:   Before Add Horizontal Sketch Relation to Line      Code to add Horizontal sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Horizontal sketch relation   swDoc.SketchAddConstraints (\"sgHORIZONTAL2D\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Horizontal Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Vertical’ Sketch Relation to a sketch segment   Here we learn how to add Vertical sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a Line as shown in below image:   Before Add Vertical Sketch Relation to Line      Code to add Vertical sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Vertical sketch relation   swDoc.SketchAddConstraints (\"sgVERTICAL2D\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Vertical Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Midpoint’ Sketch Relation to a sketch segment   Here we learn how to add Midpoint sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a Line as shown in below image:   Before Add Midpoint Sketch Relation to Line      Code to add Midpoint sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Origin   BoolStatus = swDoc.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Midpoint sketch relation   swDoc.SketchAddConstraints (\"sgATMIDDLE\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Midpoint Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Co-Linear’ Sketch Relation to a sketch segment   Here we learn how to add Co-Linear sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use two Lines as shown in below image:   Before Add Co-Linear Sketch Relation to Line      Code to add Co-Linear sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Co-Linear sketch relation   swDoc.SketchAddConstraints (\"sgCOLINEAR\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Co-Linear Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Perpendicular’ Sketch Relation to a sketch segment   Here we learn how to add Perpendicular sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use two Lines as shown in below image:   Before Add Perpendicular Sketch Relation to Line      Code to add Perpendicular sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Perpendicular sketch relation   swDoc.SketchAddConstraints (\"sgPERPENDICULAR\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Perpendicular Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Parallel’ Sketch Relation to a sketch segment   Here we learn how to add Parallel sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use two Lines as shown in below image:   Before Add Parallel Sketch Relation to Line      Code to add Parallel sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Parallel sketch relation   swDoc.SketchAddConstraints (\"sgPARALLEL\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Parallel Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Equal Length’ Sketch Relation to a sketch segment   Here we learn how to add Equal Length sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use two Lines as shown in below image:   Before Add Equal Length Sketch Relation to Line      Code to add Equal Length sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Equal Length sketch relation   swDoc.SketchAddConstraints (\"sgSAMELENGTH\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Equal Length Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Tangent’ Sketch Relation to a sketch segment   Here we learn how to add Tangent sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a Line and a Circle as shown in below image:   Before Add Tangent Sketch Relation to Line      Code to add Tangent sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Tangent sketch relation   swDoc.SketchAddConstraints (\"sgTANGENT\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Tangent Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Same Curve Length’ Sketch Relation to a sketch segment   Here we learn how to add Same Curve Length sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use a Line and a Circle as shown in below image:   Before Add Same Curve Length Sketch Relation to Line      Code to add Same Curve Length sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Same Curve Length sketch relation   swDoc.SketchAddConstraints (\"sgSAMECURVELENGTH\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Same Curve Length Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Coincident’ Sketch Relation to a sketch segment   Here we learn how to add Coincident sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use two Circles as shown in below image:   Before Add Coincident Sketch Relation to Line      Code to add Coincident sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Arc2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Coincident sketch relation   swDoc.SketchAddConstraints (\"sgCONCENTRIC\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Coincident Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     Add ‘Coradial’ Sketch Relation to a sketch segment   Here we learn how to add Coradial sketch relation to a sketch segment through VBA.   We need an unconstraint sketch segment.   In this post, I use two Circles as shown in below image:   Before Add Coradial Sketch Relation to Line      Code to add Coradial sketch relation   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to new part document   Set swDoc = swApp.ActiveDoc      ' Select Line 1   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Select Line 2   BoolStatus = swDoc.Extension.SelectByID2(\"Arc2\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Add Coradial sketch relation   swDoc.SketchAddConstraints (\"sgCORADIAL\")      ' Clear selection after adding relation   swDoc.ClearSelection2 True  End Sub   After Add Coradial Sketch Relation to Line      I have added comments to each line code sample, hence it is easy to understand.     This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Add Sketch Relations (Constraints) with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/add-sketch-relations/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Add dimension to Sketch Entities",
        "excerpt":"Introduction   In this post, I tell you about how to Add dimension to Sketch Entities using Solidworks VBA Macros in a Sketch.   In this post, I explain about 2 different methods from which are listed below.           From ModelDoc2 object            From ModelDocExtension object       Methods from these objects are updated methods, hence use any one of them for adding dimension.     Method From ModelDoc2 object   Below is the code sample to Add dimension to Sketch Entities using ModelDoc2 object’s AddDimension2 method.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create a circle of diameter 10   Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)      ' Disable dimension input box before adding dimension   swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False      ' Add dimension to circle   swDoc.AddDimension2 10 * LengthConversionFactor, 10 * LengthConversionFactor, 0      ' Enable dimension input box after adding dimension   swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True      ' De-select all after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding ModelDoc2 object method   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Create a circle of diameter 10 Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircle method from Solidworks Sketch Manager.   This CreateCircle method creates a Circle between “2 given point distance as diameter”.   For more information about CreateCircle method, you can read my Solidworks Macro - Create Circle post.   That post describe all the parameters we need for this CreateCircle method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Diameter : 10 unit length       ' Disable dimension input box before adding dimension swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False   In above line of code, we Disable dimension input box before adding dimension.   ' Add dimension to circle swDoc.AddDimension2 10 * LengthConversionFactor, 10 * LengthConversionFactor, 0   For “adding dimension” to an sketch entity, we need AddDimension2 method from Solidworks ModelDoc2 object.   This AddDimension2 method takes following parameters as explained:           X : X coordinate of Dimension text location in meters.            Y : y coordinate of Dimension text location in meters.            Z : z coordinate of Dimension text location in meters.       After the function complete following are the results:   Return Value:      IDisplayDimension: Newly created dimension.   In our code, I have used following values:           X : X coordinate of Dimension text location = 10 * LengthConversionFactor.            Y : y coordinate of Dimension text location = 10 * LengthConversionFactor.            Z : z coordinate of Dimension text location = 0.       Below image shows before and after Circular Sketch Pattern.   Before Circular Sketch Pattern      After Circular Sketch Pattern      ' Enable dimension input box after adding dimension swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True   In above line of code, we Enable dimension input box after adding dimension.   ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Linear Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Linear Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.     Method From ModelDocExtension object   Below is the code sample to Add dimension to Sketch Entities using ModelDocExtension object’s AddDimension method   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Create Variable for Solidworks Display Dimension Dim swDisplayDim As SldWorks.DisplayDimension  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create a circle of diameter 10   Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)      ' Disable dimension input box before adding dimension   swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False      ' Add dimension to circle   Set swDisplayDim = swDoc.Extension.AddDimension(0, 12 * LengthConversionFactor, 0, swSmartDimensionDirection_e.swSmartDimensionDirection_Right)      ' Enable dimension input box after adding dimension   swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True      ' De-select all after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding ModelDocExtension object method   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   ' Create Variable for Solidworks Display Dimension Dim swDisplayDim As SldWorks.DisplayDimension   In this line, we Create a variable which we named as swDisplayDim and the type of this swDisplayDim variable is SldWorks.DisplayDimension.   We create variable swDisplayDim for dimension we create.   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Create a circle of diameter 10 Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircle method from Solidworks Sketch Manager.   This CreateCircle method creates a Circle between “2 given point distance as diameter”.   For more information about CreateCircle method, you can read my Solidworks Macro - Create Circle post.   That post describe all the parameters we need for this CreateCircle method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Diameter : 10 unit length       ' Disable dimension input box before adding dimension swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False   In above line of code, we Disable dimension input box before adding dimension.   ' Add dimension to circle Set swDisplayDim = swDoc.Extension.AddDimension(0, 12 * LengthConversionFactor, 0, swSmartDimensionDirection_e.swSmartDimensionDirection_Right)   For “adding dimension” to an sketch entity, we need AddDimension method from Solidworks ModelDocExtension object.   This AddDimension method takes following parameters as explained:           X : X coordinate of Dimension text location in meters.            Y : y coordinate of Dimension text location in meters.            Z : z coordinate of Dimension text location in meters.            Direction : Direction of dimensioning extension line or rapid dimensioning quadrant as defined in swSmartDimensionDirection_e.       There are 4 values we can use from swSmartDimensionDirection_e enum.   They are as follows:           swSmartDimensionDirection_Down            swSmartDimensionDirection_Left            swSmartDimensionDirection_Right            swSmartDimensionDirection_Up       After the function complete following are the results:   Return Value:      IDisplayDimension: Newly created dimension.   In our code, I have used following values:           X : X coordinate of Dimension text location = 0.            Y : y coordinate of Dimension text location = 12 * LengthConversionFactor.            Z : z coordinate of Dimension text location = 0.            Direction : Direction of dimensioning extension line or rapid dimensioning quadrant = swSmartDimensionDirection_e.swSmartDimensionDirection_Right.       Below image shows before and after Circular Sketch Pattern.   Before Circular Sketch Pattern      After Circular Sketch Pattern      ' Enable dimension input box after adding dimension swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True   In above line of code, we Enable dimension input box after adding dimension.   ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Linear Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Linear Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.     This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Add dimension to Sketch Entities with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/add-dimension-methods/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Convert to Construction Sketch",
        "excerpt":"In this post, I tell you about Convert to Construction Sketch in a Sketch.   In this post, I explain about CreateConstructionGeometry method from Solidworks’s SketchManager object.   This method is most updated method, I found in Solidworks API Help.   This post will utilize the methods explained in earlier posts, hence knowledge to those is required but it is not mandatory.   An absolute beginner can follow what is written here.     Code Sample   Below is the code sample to Convert Sketch Segment to Construction Sketch.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Set Solidworks document to active part document   Set swDoc = swApp.ActiveDoc      ' Select Circle   BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)      ' Convert to construction circle   swDoc.SketchManager.CreateConstructionGeometry      ' De-select the Sketch Segment after Convert to construction   swDoc.ClearSelection2 True    ' Show Front View   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2  End Sub     Understanding the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Set Solidworks document to active part document Set swDoc = swApp.ActiveDoc   In this line, we set the value of our Solidworks variable swDoc to currently opened part document as shown below in our post.   ' Select Circle we want to Pattern BoolStatus = swDoc.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line of code, we select the Circle i.e. Arc 1 and add it to selection list.   ' Convert to construction circle swDoc.SketchManager.CreateConstructionGeometry   In above line, we convert the selected Solidworks Sketch Segment i.e. our circle CreateConstructionGeometry method from Solidworks Sketch Manager.      Please note that here we did not create another variable for Sketch Manger like I have done previously.    This CreateConstructionGeometry method takes NO parameter and did not return any value.   Before Convert Circle      After Convert Circle      ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Circular Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.     This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Convert to Construction Sketch with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/convert-to-construction-sketch-segment/",
        "teaser": null
      },{
        "title": "Solidworks Macro - Split Open/Closed Sketch Entities",
        "excerpt":"Introduction   In this post, I tell you about how to Split Open/Closed Sketch Entities using Solidworks VBA Macros in a Sketch.   In this post, I explain about SplitOpenSegment and SplitClosedSegment method from Solidworks SketchManager object.   This method is most updated method, I found in Solidworks API Help.   So use this method if you want to Split Open/Closed Sketch Entities.     CASE 1 : Split Closed Sketch Entities   Below is the code sample to Split Closed Sketch Entities.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create a circle of diameter 10   Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)      ' Local variant type variable to hold return array of sketch segments   Dim swSketchSegmentArray As Variant      ' Spliting the circle created and store the return array into local variable   swSketchSegmentArray = swSketchManager.SplitClosedSegment(-10 * LengthConversionFactor, 0, 0, 10 * LengthConversionFactor, 0, 0)      ' De-select all after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding Split Closed Sketch Segment the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Create a circle of diameter 10 Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateCircle method from Solidworks Sketch Manager.   This CreateCircle method creates a Circle between “2 given point distance as diameter”.   For more information about CreateCircle method, you can read my Solidworks Macro - Create Circle post.   That post describe all the parameters we need for this CreateCircle method in details.   In above line, we create a Circle with:           Circle Centerpoint : At origin i.e. (0, 0, 0)            Circle Diameter : 10 unit length       ' Local variant type variable to hold return array of sketch segments Dim swSketchSegmentArray As Variant   In above line of code, we create a variant type variable to hold return array of sketch segments.   ' Spliting the circle created and store the return array into local variable swSketchSegmentArray = swSketchManager.SplitClosedSegment(-10 * LengthConversionFactor, 0, 0, 10 * LengthConversionFactor, 0, 0)   For “Spliting” an closed sketch entity, we need SplitClosedSegment method from Solidworks SketchManager object.   This SplitClosedSegment method takes following parameters as explained:           X1 : X coordinate of first point.            Y1 : y coordinate of first point.            Z1 : z coordinate of first point.            X2 : X coordinate of second point.            Y2 : Y coordinate of second point.            Z2 : Z coordinate of second point.       After the function complete following are the results:   Return Value:      Array Sketch Segments: Array of sketch segments of the now split formerly closed sketch skegment.   In our code, I have used following values:           X1 : X coordinate of first point = -10 * LengthConversionFactor.            Y1 : y coordinate of first point = 0.            Z1 : z coordinate of first point = 0.            X2 : X coordinate of second point = 10 * LengthConversionFactor.            Y2 : Y coordinate of second point = 0.            Z2 : Z coordinate of second point = 0.       Below image shows before and after Circular Sketch Pattern.   Before Circular Sketch Pattern      After Circular Sketch Pattern      ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Linear Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Linear Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.     CASE 2 : Split Open Sketch Entities   Below is the code sample to Split Open Sketch Entities.   Option Explicit  ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Boolean Variable Dim BoolStatus As Boolean  ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager  ' Create Variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment  ' Main function of our VBA program Sub main()    ' Set Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Create string type variable for storing default part location   Dim defaultTemplate As String    ' Set value of this string type variable to \"Default part template\"   defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)    ' Set Solidworks document to new part document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      '-----------------------UNIT CONVERSION----------------------------------------    ' Local variables used as Conversion Factors   Dim LengthConversionFactor As Double   Dim AngleConversionFactor As Double      ' Use a Select Case, to get the length of active Unit and set the different factors   Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit          Case swMETER    ' If length is in Meter       LengthConversionFactor = 1       AngleConversionFactor = 1          Case swMM       ' If length is in MM       LengthConversionFactor = 1 / 1000       AngleConversionFactor = 1 * 0.01745329          Case swCM       ' If length is in CM       LengthConversionFactor = 1 / 100       AngleConversionFactor = 1 * 0.01745329          Case swINCHES   ' If length is in INCHES       LengthConversionFactor = 1 * 0.0254       AngleConversionFactor = 1 * 0.01745329          Case swFEET     ' If length is in FEET       LengthConversionFactor = 1 * (0.0254 * 12)       AngleConversionFactor = 1 * 0.01745329          Case swFEETINCHES     ' If length is in FEET &amp; INCHES       LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch       AngleConversionFactor = 1 * 0.01745329          Case swANGSTROM        ' If length is in ANGSTROM       LengthConversionFactor = 1 / 10000000000#       AngleConversionFactor = 1 * 0.01745329          Case swNANOMETER       ' If length is in NANOMETER       LengthConversionFactor = 1 / 1000000000       AngleConversionFactor = 1 * 0.01745329          Case swMICRON       ' If length is in MICRON       LengthConversionFactor = 1 / 1000000       AngleConversionFactor = 1 * 0.01745329   End Select    '----------------------------------------------------------------    ' Select Front Plane   BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)    ' Set Sketch manager for our sketch   Set swSketchManager = swDoc.SketchManager    ' Insert a sketch into selected plane   swSketchManager.InsertSketch True      ' Create a line of distance 10   Set swSketchSegment = swSketchManager.CreateLine(0, 0, 0, 10 * LengthConversionFactor, 0, 0)      ' Local variant type variable to hold return array of sketch segments   Dim swSketchSegmentArray As Variant      ' Spliting the line at distance of 5 and store the return array into local variable   swSketchSegmentArray = swSketchManager.SplitOpenSegment(5 * LengthConversionFactor, 0, 0)      ' De-select all after creation   swDoc.ClearSelection2 True      ' Show Front View after Circular Sketch Pattern   swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView      ' Zoom to fit screen in Solidworks Window   swDoc.ViewZoomtofit2    End Sub     Understanding Split Open Sketch Segment the Code   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   ' Create variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   In this line, we create a variable which we named as swDoc and the type of this swDoc variable is SldWorks.ModelDoc2.   ' Boolean Variable Dim BoolStatus As Boolean   In this line, we create a variable named BoolStatus as Boolean object type.   ' Create variable for Solidworks Sketch Manager Dim swSketchManager As SldWorks.SketchManager   In above line, we create variable swSketchManager for Solidworks Sketch Manager.   As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches.   To see methods and properties related to SketchManager object, please visit this page of Solidworks API Help   ' Create variable for Solidworks Sketch Segment Dim swSketchSegment As SldWorks.SketchSegment   In this line, we Create a variable which we named as swSketchSegment and the type of this swSketchSegment variable is SldWorks.SketchSegment.   We create variable swSketchSegment for Solidworks Sketch Segments.   To see methods and properties related to swSketchSegment object, please visit this page of Solidworks API Help   These all are our global variables.   As you can see in code sample, they are Solidworks API Objects.   So basically I group all the Solidworks API Objects in one place.   I have also place boolean type object at top also, because after certain point we will need this variable frequently.   Thus, I have started placing it here.   Next is our Sub procedure which has name of main.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Create string type variable for storing default part location Dim defaultTemplate As String ' Set value of this string type variable to \"Default part template\" defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)   In 1st statement of above example, we are defining a variable of string type and named it as defaultTemplate.   This variable defaultTemplate, hold the location the location of Default Part Template.   In 2nd line of above example. we assign value to our newly define defaultTemplate variable.   We assign the value by using a Method named GetUserPreferenceStringValue().   This GetUserPreferenceStringValue() method is a part of our main Solidworks variable swApp.   ' Set Solidworks document to new part document Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)   In this line, we set the value of our swDoc variable to new document.   For detailed information about these lines please visit Solidworks Macros - Open new Part document post.   I have discussed them thoroghly in Solidworks Macros - Open new Part document post, so do checkout that post if you want to understand above code in more detail.   '-----------------------UNIT CONVERSION----------------------------------------  ' Local variables used as Conversion Factors Dim LengthConversionFactor As Double Dim AngleConversionFactor As Double  ' Use a Select Case, to get the length of active Unit and set the different factors Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit      Case swMETER    ' If length is in Meter     LengthConversionFactor = 1     AngleConversionFactor = 1      Case swMM       ' If length is in MM     LengthConversionFactor = 1 / 1000     AngleConversionFactor = 1 * 0.01745329      Case swCM       ' If length is in CM     LengthConversionFactor = 1 / 100     AngleConversionFactor = 1 * 0.01745329      Case swINCHES   ' If length is in INCHES     LengthConversionFactor = 1 * 0.0254     AngleConversionFactor = 1 * 0.01745329      Case swFEET     ' If length is in FEET     LengthConversionFactor = 1 * (0.0254 * 12)     AngleConversionFactor = 1 * 0.01745329      Case swFEETINCHES     ' If length is in FEET &amp; INCHES     LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch     AngleConversionFactor = 1 * 0.01745329      Case swANGSTROM        ' If length is in ANGSTROM     LengthConversionFactor = 1 / 10000000000#     AngleConversionFactor = 1 * 0.01745329      Case swNANOMETER       ' If length is in NANOMETER     LengthConversionFactor = 1 / 1000000000     AngleConversionFactor = 1 * 0.01745329      Case swMICRON       ' If length is in MICRON     LengthConversionFactor = 1 / 1000000     AngleConversionFactor = 1 * 0.01745329 End Select  '----------------------------------------------------------------   Above code sample shows how to fix Solidworks API Unit issue.   We 1st get the current unit of the part and apply the switch statements to update our Length and Angle Conversion factors.   I have already explained in detail about Fixing Solidworks API Unit Issue in General - Fix Unit Issue blog post.   Do checkout above post for Fixing Solidworks API Issue.   ' Select Front Plane BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)   In above line, we select the front plane by using SelectByID2 method from Extension object.   For more information about selection method please visit Solidworks Macros - Selection Methods post.   ' Set Sketch manager for our sketch Set swSketchManager = swDoc.SketchManager   In above line, we set the Sketch manager variable to current document’s sketch manager.   ' Insert a sketch into selected plane swSketchManager.InsertSketch True   In above line, we use InsertSketch method of SketchManager and give True value.   This method allows us to insert a sketch in selected plane.   ' Create a line of distance 10 Set swSketchSegment = swSketchManager.CreateLine(0, 0, 0, 10 * LengthConversionFactor, 0, 0)   In above line, we set the value of Solidworks Sketch Segment variable swSketchSegment by CreateLine method from Solidworks Sketch Manager.   This CreateLine method creates a line between “2 given point”.   For more information about CreateLine method, you can read my Solidworks Sketch Macro - Create Line post.   That post describe all the parameters we need for this CreateLine method in details.   In above line, we create a line of 10 unit in X-direction.   ' Local variant type variable to hold return array of sketch segments Dim swSketchSegmentArray As Variant   In above line of code, we create a variant type variable to hold return array of sketch segments.   ' Spliting the line at distance of 5 and store the return array into local variable swSketchSegmentArray = swSketchManager.SplitOpenSegment(5 * LengthConversionFactor, 0, 0)   For “Spliting” an closed sketch entity, we need SplitOpenSegment method from Solidworks SketchManager object.   This SplitOpenSegment method takes following parameters as explained:           X : X coordinate of the point that splits the sketch segment in two.            Y : y coordinate of the point that splits the sketch segment in two.            Z : z coordinate of the point that splits the sketch segment in two.       After the function complete following are the results:   Return Value:      Array Sketch Segments: Array of sketch segments of the now split formerly closed sketch skegment.   In our code, I have used following values:           X : X coordinate of the point that splits the sketch segment in two = 5 * LengthConversionFactor.            Y : y coordinate of the point that splits the sketch segment in twot = 0.            Z : z coordinate of the point that splits the sketch segment in two = 0.       Below image shows before and after Circular Sketch Pattern.   Before Circular Sketch Pattern      After Circular Sketch Pattern      ' De-select the Sketch after creation swDoc.ClearSelection2 True   In the above line of code, we deselect the Sketch after the Linear Sketch Pattern operation.   For de-selecting, we use ClearSelection2 method from our Solidworks document name swDoc.   ' Show Front View after Linear Sketch Pattern swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView   In the above line of code, we update the view orientation to Front View.   In my machine, after inserting a sketch view orientation does not changed.   Because of this I have to update the view to Front view.   For showing Front View we used ShowNamedView2 method from our Solidworks document name swDoc.   This method takes 2 parameter described as follows:           VName : Name of the view to display or an empty string to use ViewId instead            ViewId : ID of the view to display as defined by swStandardViews_e or -1 to use the VName argument instead.       NOTE: If you specify both VName and ViewId, then ViewId takes precedence if the two arguments do not resolve to the same view.   swStandardViews_e has following Standard View Types:           swBackView            swBottomView            swDimetricView            swFrontView            swIsometricView            swLeftView            swRightView            swTopView            swExtendetricView       In our code, we did not use VName instead I used empty string in form of ”“ symbol.   I used ViewId value to specify view and used swStandardViews_e.swFrontView value to use Standard Front View.   ' Zoom to fit screen in Solidworks Window swDoc.ViewZoomtofit   In this last line we use zoom to fit command.   For Zoom to fit, we use ViewZoomtofit method from our Solidworks document variable swDoc.     This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you to Split Open/Closed Sketch Entities with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-macro"],
        "tags": ["Solidworks Macro"],
        "url": "http://localhost:4000/solidworks-macros/split-sketch-segments/",
        "teaser": null
      },{
        "title": "Visual Basic for Application Introduction",
        "excerpt":"To understand Visual Basic for Application, lets look at the following questions.   What is Visual Basic for Application?   Visual Basic for Applications also known as VBA, is a programming language developed by Microsoft.   SOLIDWORKS, along with Excel and other software of Office Suit, includes VBA language (at no extra cost).   In a nutshell, VBA is a tool that people use to develop program that control SOLIDWORKS.   Think about a robot that knows everything about SOLIDWORKS. This robot can read instruction, and it can also operate SOLIDWORKS very fast and accurate.   When you want the robot to do something in SOLIDWORKS, you write up a set of robotic instruction by using special codes.   Tell the robot to follow your instruction, while you sit back and take some rest. That’s kind of what VBA is all about.   What can you do with VBA?   You know that people use different CAD softwares, not just SOLIDWORKS, for different tasks.   Below is a list of some common tasks:           Creating sketches            Creating 3D models            Creating Simple to Complex assemblies of 3D models            Linking files with external softwares mostly excel and many more tasks       This list could go on and on, but you get the idea.   My point is simply that a CAD Software like SOLIDWORKS used for wide variety of things.   Everyone visiting this blog has different needs and expectations.   One thing virtually every visitor has common is the need to automate some aspect of their work. That is what VBA is all about.   What are the advantages and disadvantages of VBA?   In this section, I briefly describe the good things about VBA – and I also explore its darker side.   VBA Advantages   You can automate almost anything you do in SOLIDWORKS.   To do so, you write instructions that SOLIDWORKS carries out.   Automating a task by using VBA offers several advantages:           SOLIDWORKS always executes the tasks in exactly the same way. (In most cases consistency is good.)            SOLIDWORKS performs the task much faster than you do it manually.            If you are a good macro programmer, SOLIDWORKS always performs the task without error.            If you set things properly, someone who don’t know anything about SOLIDWORKS can perform task.            For long, time-consuming tasks, you don’t have to sit in front of your computer and get board. SOLIDWORKS does work, while you drink water.       VBA disadvantages   It’s only fair that I give equal time to listing the disadvantages (or potential disadvantages) of VBA:           You have to know how to write programs in VBA (but that’s why you are here, right?). Fortunately, it’s not as difficult as you might expect.            Sometimes, things go wrong. In other words, you can’t blindly assume that your VBA program will always work correctly under all circumstances. Welcome to world of debugging and, if others are using your macros, be prepared for technical support.       VBA in nutshell   Just to let you know what you are in for, I’ve prepared a quick summary of what VBA is all about.           You perform actions in VBA by writing (or recording) code in a VBA module. You view and edit VBA modules by using the Visual Basic Editor (VBE).            A VBA module consists of Sub procedures. A sub procedure is a chunk of computer code that performs some action on or with objects. The following example shows a simple Sub procedure called AddThem.       This amazing program displays the result of 1 plus 1.   Sub AddThem()     Sum = 1 + 1     MsgBox (\"The answer is \" &amp; Sum) End Sub   Next post will be about Visual Basic Editor or VBE.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-Introduction/",
        "teaser": null
      },{
        "title": "Visual Basic Editor (VBE)",
        "excerpt":"Visual Basic Editor or VBE is a separate application in your CAD application.   In this application you write and edit your Macro code.   This application works without a glitch with most of the CAD programs.   By without a glitch I mean that your CAD program take cares of opening of VBE when you need it.      you can’t run the VBE separately. You CAD program must be running in order to run VBE.    VBE Environment   Below figure shows the VBE program, with some of the key parts given.   Chances are that your VBE program window won’t look exactly like that below figure.   The VBE contains several windows, and it’s highly customizable. You can hide windows, rearrange windows, dock windows, and so on.        Menu Bar   The VBE Menu Bar works just like every menu bar of other applications.   It contains commands that you use to do things with the various components in the VBE.   You also find that many of the menu commands have shortcut keys associated with them.   The VBE also features shortcut menus. You can right-click virtually anything in the VBE and get a shortcut menu of common commands.   Tool Bar   The Standard toolbar, which is directly under the menu bar by default (refer to above figure), is one of four VBE toolbars available. You can customize the toolbars.   If you’re so inclined, use the View Toolbars command to work with VBE toolbars.   Most people just leave them as they are.   Project Window   The Project Window display a tree diagram that shows every file opened.   If the Project Window is not visible, press “Ctrl+R” or use the View -&gt; Project Explorer command.   To hide the Project Window, click the close button in its title bar.   Code Window   Code Window is place where we write our code. Therefore this window contains VBA code.   Every object in a project has association with Code Window. To view the code for any object’s, double click on the object in the Project Window.   Unless you have added some VBA code, the Code window will be empty.   Immediate Window   The Immediate window may or may not visible. If it is not visible, press “Ctrl+G” or use View -&gt; Immediate window command.   To close The Immediate window, click the close button in its title bar.   The Immediate window is most useful for executing VBA statement directly and for debugging your code.   If you are just starting VBA, this window won’t be all that useful, so feel free to hide it and free up some screen space.   Next post will be about VBE Windows.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-vbe-editor/",
        "teaser": null
      },{
        "title": "VBE Windows",
        "excerpt":"In this post we look following windows in Visual Basic Editor:      Project Window   Code Window   Project Window   When you are working in VBE, each file open is called a Project.  You can think of a project as a collection of objects.   You can expand a project by clicking plus sign (+) at the left of the project’s name in Project window.   Contract a project by clicking minus sign (-) to the left of the project’s name in Project window. Or you can simply double click the items to expand or contract them.   Every project expands to show at least one node. In our previous image we have SOLIDWORKS Objects. This node expands to show an item for Solidworks application.   If the project has any VBA module, the project listing also shows a Module node.   A project can also contain a node called Forms, which contains UserForm objects (which holds custom dialog boxes).   The concept of Object may not be clear to you at this moment. However, things become much clearer in subsequent topics.   Don’t be too concerned if you don’t understand what’s going on at this point.   Adding a new VBA module   Follow below steps to add a new VBA module to a project:      Select the projects name in the Project Window.   Select Insert -&gt; Module.   or      Right click the project’s name.   Select Insert -&gt; Module from the shortcut menu.   When you record a macro or create a blank macro, Solidworks automatically adds a module to hold the codes.   Removing a new VBA module   If you want to remove a module from Project window then follow below steps for that:      Select the module’s name in the Project Window.   Select Fie -&gt; Remove.   Or      Right-click the module’s name.   Select remove from the shortcut menu.   VBE always trying to keep you from doing something that you will regret, hence it will ask if you want to export the code in the module before deleting the code.   And in most cases, you don’t want to export. If you do want to export the code, please see next section.   Exporting and Importing of objects   Every object in a VBA project can be saved to a separate file. Saving an individual object in a project is known as Exporting.   Reason for exporting a file is that you can also import objects in a project.   Exporting and Importing objects might be useful if you want to use a particular object (such as a VBA module or a UserForm) in a different project.   Below steps show how to export an object:      Select an object in the Project window.   Select File -&gt; Export file or press Ctrl + E.   You get a dialog box that asks for a filename. Note that the object remains in the original project only a copy of object is exported.   Importing an object is also a similar process, which is shown below:      Select the project’s name in the Explorer window.   Select File -&gt; Import file or press Ctrl + M.   You get a dialog box that asks for a file. Locate the file and click open.   You should only import a file if was export by using File -&gt; Export file command.     Code Window   As you become proficient with VBA, you spend a lot of time with working in the Code window.   Macros that you record are stored in a module, and you can type a VBA code directly into a VBA module.   Minimize and maximize Code windows   If you have several projects open, the VBE may have lots of Code window at any given time. Below figure shows an example of this.      Code windows are much like your files opened in Solidworks. You can minimize them, maximize them, resize them, and hide them and so on.   Most people find it much easier to maximize the code window that they are working on. Doing so lets you see more code and keeps you from getting distracted.   To maximize the Code window, click the maximize button in its title bar or just double-click the title bar of Code window to maximize it.   To restore a window to its original size, click the restore button. When the Code window is maximized, its title bar is not visible, so you will find the restore below the VBE title bar.   Sometimes you want to have two or more Code windows visible.   For example, you want to compare the code in the two modules or copy code from one module to another.   You can arrange the windows manually, or use the Window -&gt; Tile Horizontally or Window ⇨ Tile Vertically command to arrange them automatically.   You can quickly switch among code window by pressing Ctrl + TAB. If you repeat that key combination, you keep cycling through all the open code windows.   Pressing Ctrl + Shift + TAB cycles through the windows in reverse order.   Minimizing a window gets it out of the way. You can also click the window close button in a Code window’s title bar to close the window completely. (Closing a window just hides it; you won’t lose anything.)   To open it again, just double-click the appropriate object in the Project window. Working with these Code windows sounds difficult that it really is.   Creating a Module   In general, a VBA module can hold three types of code:           Declaration: One or more information statement that you provide to VBA. For example, you can declare the data type for variables you plan to use, or set some other module-wide options.            Sub procedures: A set of programming instructions that performs some actions.            Function procedures: A set of programming instructions that returns a single value.       A single VBA module can store any number of Sub procedures, Function procedure and declaration.   Well, there is a limit – about 64,000 characters per module. It is very rare that if anybody reaches that limit but if someone reaches then the solution is simply insert a new module.   How you organize a VBA module is totally up to you. Some people prefer to keep all their VBA code in a single module others (like me) likes to split up the code into several different modules or even classes. It is a personal choice like arranging furniture.   Inserting VBA code into a Module   An empty VBA module is like a fake food you see in the advertisements. It looks good but it does not really do much.   Before you can do anything meaningful, you must have some VBA code in the VBA module. You can insert VBA code into VBA module in three ways:           Insert code directly into code window.            Use the macro recorder to record your actions and convert them into VBA code.            Copy the code from one module and paste it into another module.       Entering code directly into a module   Sometimes the best route is the most direct one. Entering the code directly involves, typing the code via your keyboard.   Entering and editing a text in a VBA module works as you might expect. You can select, copy, cut, paste and do other things as you do in other word processing software.   Use the TAB key to indent some of the lines to make your code easier to read. This is not necessary, but it is a good habit to acquire.   As you go through you will understand why indenting code lines is helpful.   A single line of VBA code can be as long as you like.   However, you may want to use the line-continuation character to break up the lengthy line of code.   To continue a single line of code (also known as statement) from one line to next, end the first line with a space followed by an underscore (_). Then continue the statement in the next line.   Below is given the example of a single statement split into two lines:   set swPart = swApp.NewDocument(swApp.GetUserPreferenceStringValue _     (swUserPreferenceStringValue_e.swDefaultTemplatePart),0,0,0)   This statement would perform the same way if it were entered in a single line (with no continuation characters).   Notice that I indented the second line of statement. Indenting is optional but it clarifies the fact that these lines are not separate statements.      If you are wondering what above statement does, then the answer is above statement open a new part with default part template in SolidWorks. This code is not inserted using macro recorder, instead I write it manually to find a default part template and use that template to open a new part.    The engineers who designed VBE knew that people like us would be making mistakes. Therefore, the VBE has multiple levels of Undo and Redo.   If you deleted a statement that you should not have, use the Undo button on the toolbar (or press Ctrl+Z) until the statement shows up.   After undoing, you can use the Redo button to perform the changes you have undone. This redo/undo stuff is much like you use in other software. Until you use it, you cannot understand.   Ready to enter some live code, try the following steps:      Go to your VBE.   Double-click your module if it is not opened.   Go to COde Window.   Type the following code into Code window:   Sub GuessName()     Msg = \"Is this a CAD Software?\"     Ans = MsgBox(Msg, vbYesNo)     If Ans = vbNo Then MsgBox \"Oh, that’s fine.\"     If Ans = vbYes Then MsgBox \"You must be joking!\" End Sub     Make sure the cursor is located anywhere within the text you typed, and then press F5 to execute the procedure.   F5 is a shortcut for the Run -&gt; Run Sub/UserForm command.   If you entered the code correctly, VBE execute the procedure, and you can respond to the simple dialog box as shown in below figure.      When you enter the code listed in step 4, you might notice that the VBE makes some adjustments to the text you enter.   For example, after you type the sub statement, the VBE automatically insert the End Sub statement, and if omit the space before or after an equal sign, the VBE insert the space for you.   Also, the VBE changes the color and capitalization of some text. This is all perfectly normal. It is just VBE’s way of keeping things neat and readable.   If you followed the previous steps, you just wrote a VBA Sub procedure, also known as a macro.   When you press F5, VBE executes the code and follows the instructions.   In other words, VBE evaluates each statement and does what you told it to do.   This simple macro uses the following concepts:      Defining a Sub procedure (the first line).   Assigning values to variables (Msg and Ans).   Using a built-in VBA function (MsgBox).   Using built-in VBA constants (vbYesNo, vbNo, and vbYes).   Using an If-Then construct (twice).   Ending a Sub procedure (the last line)   Using the Macro recorder   Another way you can get code into a VBA module is by recording your actions, using the in-built macro recorder.   By the way, there is absolutely no way you can record the GuessName procedure shown in the preceding section.   You can record only things that you can do directly in Solidworks.   Displaying a message box is not in application’s normal repertoire. The macro recorder is useful, but in many cases, you’ll probably need to enter at least some code manually.   We have already seen how macros are recorded. So there is no need for us to go twice for same thing. If you want to see how it is done go to Open VBA in Solidworks topic   Copying VBA code   The final method for getting code into a VBA module is to copy it from another module or from some other place (such as a Web site i.e. Solidworks forum).   For example, a Sub or Function procedure that you write for one project might also be useful in another project.   Instead of wasting time in re-entering the code, you can activate the module and use the normal Clipboard copy-and-paste procedures.   After pasting it into a VBA module, you can modify the code if necessary.   You’ll also find lots of VBA code examples on the Web.   If you’d like to try them, select the code in your browser and press Ctrl+C to copy it. Then, activate a module and press Ctrl+V to paste it.   Next post will be about Sub and Function Procedures.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-windows/",
        "teaser": null
      },{
        "title": "Sub and Function Procedures",
        "excerpt":"The VBA code that you write in the Visual Basic Editor is known as a procedure.   The two most common types of procedures are Sub and Function.      A Sub procedure is a group of VBA statements that performs an action (or actions).   A Function procedure is a group of VBA statements that performs a calculation and returns a single value.   Most of the macros you write in VBA are Sub procedures.   You can think of a Sub procedure as being like a command: “Execute the Sub procedure and something happens”.   Exactly what happens depends on the Sub procedure’s VBA code.   A Function is also a procedure, but it’s quite different from a Sub.   For understanding a Function let’s take an example from MS Excel.   Excel includes many worksheet functions that you use every day. Examples include SUM. This SUM function takes input in form of values and then it does calculation behind the scene, and then returns a single value.   The same goes for Function procedure that you develop with VBA.   Sub procedures   Every Sub procedure starts with the keyword Sub and ends with an End Sub statement. Here’s an example:   Sub Message()    MsgBox \"That’s all folks!\" End Sub   This example shows a procedure named Message. A set of parentheses follows the procedure’s name.   In most cases, these parentheses are empty. However, you may pass arguments to Sub procedures from other procedures.   If your Sub uses arguments, list them between the parentheses.      Please remember when you record a macro with the macro recorder; the result is always a Sub procedure.    Function procedures   Every Function procedure starts with the keyword Function and ends with an End Function statement.   Here’s an example:   Function CubeRoot(number)    CubeRoot = number ^ (1/3) End Function  This function, named CubeRoot, takes one argument (named number), which is enclosed in parentheses.   Functions can have any number of arguments or none at all.   When you execute the function, it returns a single value — the cube root of the argument passed to the function.   VBA allows you to specify what type of information (also known as data type) is returned by a Function procedure.   You can execute a Function procedure from another procedure (a Sub or another Function procedure).      Please note that no matter how hard you try, you can’t use the macro recorder to record a Function procedure. You must manually enter every Function procedure that you create.    Naming Subs and Functions   Like humans &amp; pets, every Sub and Function procedure must have a name.   Although it is perfectly acceptable to name anything what you want, it’s usually not a good idea to use such a freewheeling attitude when naming procedures.   When naming procedures, you must follow a few rules:           You can use letters, numbers, and some punctuation characters, but the first character must be a letter.            You can’t use any spaces or periods in the name.            VBA does not distinguish between uppercase and lowercase letters.            You can’t embed any of the following characters in a procedure name: #, $, %, &amp;, @, ^, *, or !            Procedure names can be no longer than 255 characters. (Of course, you would never make a procedure name this long.)       Ideally, a procedure’s name describes the routine’s purpose.   Some programmers prefer using sentence-like names that provide a complete description of the procedure.   Some examples include WriteReportToTextFile and Get_Print_Options_and_Print_Report.   The use of such lengthy names has pros and cons.   On the one hand, such names are descriptive and usually unambiguous.  On the other hand, they take longer to type.   Everyone develops a naming style, but the main objectives are to make the names descriptive and to avoid meaningless names such as Update, Fix, and Macro1.   Next post will be about Executing Sub &amp; Function procedures.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/sub-and-function-procedure/",
        "teaser": null
      },{
        "title": "Executing Sub and Function Procedures",
        "excerpt":"Although you may not know much about developing procedures at this point, I’m going to jump ahead a bit and discuss how to execute these procedures.   This is important because these procedures are worthless unless you know how to execute it.   Executing Sub procedure   Executing a Sub procedure means the same thing as running or calling a Sub procedure.   You can use whatever terminology you like.   You can execute a VBA Sub in many ways - that’s one reason you can do so many useful things with Sub procedures.   Here’s a list of the ways to execute a Sub procedure:      With the Run -&gt; Run Sub/UserForm command (in the VBE). VBE executes the Sub procedure in which the cursor is located. This menu command has two alternatives: the F5 key and the Run Sub/UserForm button on the Standard toolbar in the VBE. These methods don’t work if the procedure requires one or more arguments.   From another Sub procedure that you write.   From a custom item on the ribbon you develop.   From the Immediate window in the VBE. Just type the name of the Sub procedure and press Enter.   From Run Macro -&gt; Select Macro you want to run. By this, your macro runs the Sub procedure without opening VBE.   I demonstrate some of these techniques in the following sections.   Before I can do that, you need to enter a Sub procedure into a VBA module as suggested below:      Open the VBE in Solidworks.   Enter the following code into your module   Sub CubeRoot()    Number = InputBox(\"Enter a positive number.\")    MsgBox number ^ (1/3) &amp; \"is the cube root.\" End Sub   This procedure asks the user for a number and then displays that number’s cube root in a message box.   Below Figures shows what happens when you execute this procedure.      I entered 4 as input value. And get result as shown in below image.      By the way, CubeRoot is not an example of a good macro. It doesn’t check for errors, so it fails easily.   To see what I mean, try clicking the Cancel button in the input box or entering a negative number.   Executing the Sub procedure directly   The quickest way to execute this procedure is by doing so directly from the VBA module in which you defined it.   Follow these steps:      Activate the VBE and select the VBA module that contains the procedure.   Move the cursor anywhere in the procedure’s code.   Press F5 (or choose Run -&gt; Run Sub/UserForm).   Respond to the input box and click OK.   The procedure displays the cube root of the number you entered.   You can’t use the Run -&gt; Run Sub/UserForm command to execute a Sub procedure that uses arguments, because you have no way to pass the arguments to the procedure.   If the procedure contains one or more arguments, the only way to execute it is to call it from another procedure — which must supply the argument(s).   Executing the Sub procedure from another procedure   You can also execute a Sub procedure from another procedure.   Follow these steps if you want to give this a try:      Activate the VBA module that holds the CubeRoot routine.        Enter this new procedure (either above or below CubeRoot code — it makes no difference):        Sub NewSub()     Call CubeRoot  End Sub           Execute the NewSub macro.   The easiest way to do this is to move the cursor anywhere within the NewSub code and press F5.  Notice that this NewSub procedure simply executes the CubeRoot procedure.      Please note that the keyword Call is optional. The statement can consist of only the Sub procedure’s name. I find that using the Call keyword makes it perfectly clear that a procedure is being called.      Executing Function procedure   Function procedures, unlike Sub procedures, can be only executed in only one way:      By calling the function from another Sub procedure or Function procedure.   Try this simple function. Enter it into a VBA module:   Function CubeRoot()    CubeRoot = number ^ (1/3) End Function   This function is pretty bored — it merely calculates the cube root of the number passed to it as its argument.   It does provide a starting point for understanding functions.   It also presents an important concept about functions: how to return the value.   (You do remember that a function returns a value, right?)   Notice that the single line of code that makes up this Function procedure performs a calculation.   The result of the math (number to the power of 1⁄3) is assigned to the variable CubeRoot.   Not coincidentally, CubeRoot is also the name of the function.   To tell the function what value to return, you assign that value to the name of the function.   Executing the Function procedure from a Sub procedure   Because you can’t execute a function directly, you must call it from another procedure.   Enter the following simple procedure in the same VBA module that contains the CubeRoot function:   Sub CubeRoot()    Ans = CubeRoot(125)    MsgBox Ans End Sub   When you execute the CubeRoot procedure (using any of the methods described earlier), Youe software displays a message box that contains the value of the Ans variable, which is 5.   Here’s what’s going on:      CubeRoot(125) means it CubeRoot receive argument of 125.   Then Function CubeRoot(number) is executed. As described previously, number is an argument. And here the value of this is 125.   Then by number ^ (1/3) we get the cube of 125. (why? Because 125 is argument passed by the sub function and this 125 is the value of number.)   After that cube value of 125, i.e. 5, is assigned to or given to or equal to CubeRoot. This CubeRoot assigned to or given to or equal to Ans. After that message boxes show the value of 5 in your screen.      Please read again if you don’t understand what is going on here.    Next post will be about Programming Concepts, Comments and Data-types.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/executing-procedures/",
        "teaser": null
      },{
        "title": "Programming Concepts, Comments and Data-types",
        "excerpt":"Visual Basic for application (VBA) is a real, live programming language, it uses many elements common to all programming languages.   In subsequent topics, we go through several of these elements:      Comments   Variables   Constants   Data types   Arrays and few other concepts   If you’ve programmed with other languages, some of this topics will be familiar or if you’re a programming newbie, it’s time to roll up your sleeves and get busy.   Comments in VBA Code   A comment is the simplest type of VBA statement because VBA ignores these statements, they can consist of anything you want.   You can insert a comment to remind yourself why you did something or to clarify some particularly code you wrote.   Use comments liberally and extensively to describe what the code does (which isn’t always obvious by reading the code itself).   Often, code that makes perfect sense today mystifies you tomorrow.   You begin a comment with an apostrophe (‘). VBA ignores any text that follows an apostrophe in a line of code.   You can use a complete line for your comment or insert your comment at the end of a line of code.   The following example shows a VBA procedure with three comments, although they’re not necessarily good comments:   Sub CommentDemo() '  This procedure does nothing of value    x = 0   'x represents nothing    'Display the result    MsgBox x End Sub   The apostrophe indicates a comment rule has one exception.   VBA doesn’t interpret an apostrophe inside a set of quotation marks as a comment indicator.   For example, the following statement doesn’t contain a comment, even though it has an apostrophe:   MsgBox = \"Can't continue.\"   When you’re writing code, you may want to test a procedure by excluding a particular statement or group of statements.   You could delete the statements and then retype them later but that’s a waste of time.   A better solution is to simply turn those statements into comments by inserting apostrophes.   VBA ignores statements beginning with apostrophes when executing a routine.   To reactivate those commented statements, just remove the apostrophes.   Here’s a quick way to convert a block of statements to comments.   In the VBE, choose View -&gt; Toolbars -&gt; Edit to display the Edit toolbar.   To convert a block of statements to comments, select the statements and click the Comment Block button.   To remove the apostrophes, select the statements and click the Uncomment Block button.   Although comments can be helpful, not all comments are created equal.   For example, the following procedure uses lots of comments, but they add nothing of value.   In this case, the code is clear enough without the comments.   Sub BadComments() '  Declare variables    Dim x As Integer    Dim y As Integer    Dim z As Integer '  Start the routine    x = 100    'Assign 100 to x    y = 100    'Assign 100 to y '  Add x and y and store in z    z = x + y '  Show the result    MsgBox z End Sub   Everyone develops his or her own style of commenting.   To be useful, however, comments should convey information that’s not immediately obvious from reading the code.   Otherwise, comments just chew up bytes and make files larger than necessary.   The following tips can help you make effective use of comments:           Briefly describe the purpose of each Sub or Function procedure you write.            Use comments to keep track of changes you make to a procedure.            Use a comment to indicate that you’re using a function or a construct in an unusual or nonstandard manner.            Use comments to describe the variables you use, especially if you don’t use meaningful variable names.            Use a comment to describe any workarounds you develop to overcome bugs in your code.            Write comments as you develop code, instead of saving the task for a final step.            Depending on your work environment, consider adding a joke or two as a comment. The person who takes over your job when you get promoted might appreciate the humour.       Data types in VBA   When I talk about data type, I’m referring to the manner in which a program stores data in memory - for example, as integers, real numbers, or strings.   Although VBA can take care of these details automatically, it does so at a cost (There’s no free lunch).   Letting VBA handle your data typing results in slower execution and inefficient memory use.   For small applications, this usually doesn’t present much of a problem.   But for large or complex applications, which may be slow or need to conserve every last byte of memory, you need to be on familiar terms with data types.   VBA automatically handles all the data details, which makes life easier for programmers.   Not all programming languages provide this luxury.   For example, some languages are strictly typed, which means the programmer must explicitly define the data type for every variable used.   VBA does not require that you declare the variables that you use, but it’s definitely a good practice.   VBA has a variety of built-in data types. Below table lists the most common types of data that VBA can handle.                 VBA’s Built-In Data Types                   Data Type         Byte used         Range of values                   Boolean         2         True or False                   Integer         2         –32,768 to 32,767                   Long         4         –2,147,483,648 to 2,147,483,647                   Single         4         –3.402823E38 to 1.401298E45                   Double (negative)         8         –1.79769313486232E308 to –4.94065645841247E-324                   Double (positive)         8         4.94065645841247E–324 to  1.79769313486232E308                   Currency         8         –922,337,203,685,477.5808 to 922,337,203,685,477.5807                   Date         8         1/1/100 to 12/31/9999                   String         1 per char         varies                   Object         4         Any defined object                   Variant         Varies         Any data type                   User defined         Varies         Varies                            Next post will be about VBA Variables.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/programming-concepts/",
        "teaser": null
      },{
        "title": "VBA Variables",
        "excerpt":"VBA’s main purpose is to manipulate data. VBA stores the data in your computer’s memory; it may or may not end up on disk.   Some data, such as sketch, resides in objects.   Other data is stored in variables that you create.   A variable is simply a named storage location in your computer’s memory.   You have lots of flexibility in naming your variables, so make the variable names as descriptive as possible.   You assign a value to a variable by using the equal sign operator.   The variable names in these examples appear on both the left and right sides of the equal signs.   Note that the last example uses two variables.   x = 1 InterestRate = 0.075 LoanPayoffAmount = 243089 DataEntered = False x = x + 1 UserName = \"Bill Gates\" DateStarted = #3/14/2010# MyNum = YourNum * 1.25   VBA enforces a few rules regarding variable names:      You can use letters, numbers, and some punctuation characters, but the first character must be a letter.   You cannot use any spaces or periods in a variable name.   VBA does not distinguish between uppercase and lowercase letters.   You cannot use the following characters in a variable name: #, $, %, &amp;, or !.   Variable names can be no longer than 255 characters. Of course, you’re only asking for trouble if you use variable names 255 characters long.   To make variable names more readable, programmers often use mixed case (for example, PartDimension) or the underscore character (part_dimension).   VBA has many reserved words that you can’t use for variable names or procedure names.   These include words such as Sub, Dim, With, End, Next, and For.   If you attempt to use one of these words as a variable, you may get a compile error (which means your code won’t run.   So, if an assignment statement produces an error message, double-check and make sure that the variable name isn’t a reserved word.   VBA does allow you to create variables with names that match names in your CAD's object model, such as sketch and part.   But, obviously, using names like that just increases the possibility of getting confused.   So resist the urge to use a variable named sketch, and use something like swSketch, mySketch or any meaning full name instead.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/variables/",
        "teaser": null
      },{
        "title": "Declaring and Scoping of Variables",
        "excerpt":"If you read the previous topics, you now know a bit about Variables and Data-types.   In this topic, you discover how to declare a variable as a certain data type.   If you don’t declare the data type for a variable you use in a VBA routine, VBA uses the default data type: Variant.   Data stored as a Variant acts like a chameleon; it changes type depending on what you do with it.   For example, if a variable is a Variant data type and contains a text string that looks like a number (such as “123”), you can use this variable for string manipulations as well as numeric calculations.   VBA automatically handles the conversion. Letting VBA handle data types may seem like an easy way out — but remember that you sacrifice speed and memory.   Before you use variables in a procedure, it’s an excellent practice to declare your variables — that is, tell VBA each variable’s data type.   Declaring your variables makes your program run faster and use memory more efficiently.   The default data type, Variant, causes VBA to repeatedly perform time consuming checks and reserve more memory than necessary.   If VBA knows a variable’s data type, it doesn’t have to investigate and can reserve just enough memory to store the data.   To force yourself to declare all the variables you use, include the following as the first statement in your VBA module:   Option Explicit   When this statement is present, you won’t be able to run your code if it contains any undeclared variables.   You need to use Option Explicit only once: at the beginning of your module, prior to the declaration of any procedures in the module.   Keep in mind that the Option Explicit statement applies only to the module in which it resides.   If you have more than one VBA module in a project, you need an Option Explicit statement for each module.   Suppose that you use an undeclared variable (that is, a Variant) named myDimension.   At some point in your routine, you insert the following statement:   myDimnsion = 11   This misspelled variable, which is difficult to spot, will probably cause your routine to give incorrect results.   If you use Option Explicit at the beginning of your module (forcing you to declare the myDimension variable), VBE generates an error if it encounters a misspelled variation of that variable.   To ensure that the Option Explicit statement is inserted automatically whenever you insert a new VBA module; turn on the Require Variable Definition option.   You find it in the Editor tab of the Options dialog box (in the VBE, choose Tools -&gt; Options).      I highly recommend doing so.    Declaring your variables also lets you take advantage of a shortcut that can save some typing.   Just type the first two or three characters of the variable name, and then press Ctrl + Space.   The VBE will either complete the entry for you or — if the choice is ambiguous — show you a list of matching words to select from.   In fact, this slick trick works with reserved words and functions, too.   You now know the advantages of declaring variables, but how do you do this?   The most common way is to use a Dim statement.   Here are some examples of variables being declared:   Dim YourName as String Dim PartLength as Long Dim bRet as Boolean Dim X   The first three variables are declared as a specific data type.   The last variable, X, is not declared as a specific data type, so it’s treated as a Variant (it can be anything).   Besides Dim, VBA has three other keywords that are used to declare variables:      Static   Public   Private   I explain more about the Dim, Static, Public, and Private keywords later on, but first I must cover two other topics that are relevant here: a variable’s scope and a variable’s life.   Recall that your code can have any number of VBA modules and a VBA module can have any number of Sub and Function procedures.   A variable’s scope determines which modules and procedures can use the variable.   Below Table describes the scopes:                 VBA’s Variable’s Scope                   Scope         How the Variable is Declared                   Procedure only         By using a Dim or a Static statement in the procedure that uses the variable.                   Module only         By using a Dim or a Private statement              before the first Sub or Function statement in the module.                            All procedures in all modules                      By using a Public statement before the first Sub or              Function statement in the module.                 If you get confused keep reading next post on these topics.   Next post will be about Variable Scope.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/declaring-and-scoping-of-variables/",
        "teaser": null
      },{
        "title": "Variable Scope",
        "excerpt":"A variable’s scope determines which modules and procedures can use the variable.   Procedure-only Variables   The lowest level of scope for a variable is at the procedure level.   A procedure is either a Sub or a Function procedure.   Variables declared with this scope can be used only in the procedure in which they are declared.   When the procedure ends, the variable no longer exists (it goes to the great big bucket in the sky), and your CAD application frees up its memory.   If you execute the procedure again, the variable comes back to life, but its previous value is lost.   The most common way to declare a procedure-only variable is with a Dim statement.   Dim doesn’t refer to the mental capacity of the VBA designers.   Rather, it’s an old programming term that’s short for dimension, which simply means you are setting aside memory for a particular variable.   You usually place Dim statements immediately after the Sub or Function statement and before the procedure’s code.   The following example shows some procedure-only variables declared by using Dim statements:   Sub MySub()   Dim x As Integer   Dim First As Long   Dim PartDimension As Single   Dim myValue ' ...[The procedure’s code goes here]... End Sub    Notice that the last Dim statement in the preceding example doesn’t declare a data type; it declares only the variable itself. The effect is that the variable MyValue is a Variant.   By the way, you can also declare several variables with a single Dim statement, as in the following example:   Dim x As Integer, y As Integer, z As Integer Dim First As Long, Last As Double   Unlike some languages, VBA doesn’t allow you to declare a group of variables to be a particular data type by separating the variables with commas.   For example, though valid, the following statement does not declare all the variables as Integers:   Dim i, j, k As Integer   In this example, only k is declared to be an Integer; the other variables are declared to be Variants.   If you declare a variable with procedure-only scope, other procedures in the same module can use the same variable name, but each instance of the variable is unique to its own procedure.      In general, variables declared at the procedure level are the most efficient because VBA frees up the memory they use when the procedure ends.    Module-only Variables   Sometimes, you want a variable to be available to all procedures in a module.   If so, just declare the variable (using Dim or Private) before the module’s first Sub or Function statement — outside any procedures.   This is done in the Declarations section, at the beginning of your module.   This is also where the Option Explicit statement is located.   Below figure shows how you know when you’re working with the Declarations section.      As shown in above image, I want a variable named swApp, so that it can available to all procedures in this module.   Hence I declare this variable in Declaration section of VBE.   Next post wil be about Public, Static and Variable’s Life.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/variable-scope/",
        "teaser": null
      },{
        "title": "Public, Static and Variable's Life",
        "excerpt":"In the following sections we will discussed about following topics:           Public Variables            Static Variables            Life of Variables       Let’s look at them one by one.   Public Variables   If you need to make a variable available to all the procedures in all your VBA modules, declare the variable at the module level (in the Declarations section) by using the Public keyword.   For example, in previous figure, if I use Public in place of Dim in declaration section of VBE, then you can use those variables in other procedures of same modules, and for other modules also.   If you would like a variable to be available to other modules, you must declare the variable as Public.   In practice, sharing a variable across modules is hardly ever done.   But I guess it’s nice to know that it can be done.   Static Variables   Normally, when a procedure ends, all the procedure’s variables are reset.   Static variables are a special case because they retain their value even when the procedure ends.   You declare a static variable at the procedure level.   A static variable may be useful if you need to track the number of times you execute a procedure.   Life of Variables   Nothing lives forever, including variables.   The scope of a variable not only determines where that variable may be used, it also affects under which circumstances the variable is removed from memory.   You can purge (remove) all variables from memory by using three methods:           Click the Reset toolbar button (the little blue square button on the Standard toolbar in previous figure).            Click End when a runtime error message dialog box shows up.            Include an End statement anywhere in your code. This is not the same as an End Sub or End Function statement. Generally it is an Exit statement.       Otherwise, only procedure-level variables will be removed from memory when the macro code has completed running.   Static variables, module level variables, and global (public) variables all retain their values in between runs of your code.      If you use module-level or global-level variables, make sure they have the value you expect them to have. You never know whether one of the situations I just mentioned may have caused your variables to lose their content!    Next post will be about VBA Constants.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/publc-static-variable-life/",
        "teaser": null
      },{
        "title": "VBA Constants",
        "excerpt":"A variable’s value may (and usually does) change while your procedure is executing.   That’s why they call it a variable.   Sometimes you need to refer to a value or string that never changes.   In such a case, you need a constant — a named element whose value doesn’t change.   As shown in the following examples, you declare constants by using the Const statement.   The declaration statement also gives the constant its value:   Const BlockLength As Integer = 4. Const BlockThickness = .5 Const PartName As String = \"Part Name:\" Public Const AppName As String = \"Part Calculation\"   Using constants in place of hard-coded values or strings is an excellent programming practice.   For example, if your procedure needs to refer to a specific value (such as sheet thickness) several times.   It is better to declare the value as a constant and refer to its name rather than the value.   This makes your code more readable and easier to change.   When sheet thickness changes, you have to change only one statement rather than several.   Like variables, constants have a scope. Keep these points in mind:      To make a constant available within only a single procedure, declare the constant after the procedure’s Sub or Function statement.   To make a constant available to all procedures in a module, declare the constant in the Declarations section for the module.   To make a constant available to all modules, use the Public keyword and declare the constant in the Declarations section of any module.   If you attempt to change the value of a constant in a VBA routine, you get an error.   This isn’t too surprising because a Constant is constant.   Unlike a variable, the value of a constant does not vary.   If you need to change the value of a constant while your code is running, what you really need is a variable.   Pre-made constants   Your CAD Application and VBA contain many predefined constants, which you can use without the need to declare them yourself.   The macro recorder (in Solidworks) usually uses constants rather than actual values.   In general, you don’t need to know the value of these constants to use them.   The following simple procedure uses a built-in constant swDefaultTemplatePart to select the default part template while opening a new file.   set swPart = swApp.NewDocument(swApp.GetUserPreferenceStringValue _     (swUserPreferenceStringValue_e.swDefaultTemplatePart),0,0,0)   In above example, Solidworks did not record these constants.   It simply generates the direct path to open part document.   To find the actual value of a built-in constant, use the “Immediate window” in the VBE, and execute a VBA statement such as the following:   ?swDefaultTemplatePart      If the Immediate window isn’t visible, press Ctrl+G. The question mark is a shortcut for typing Print.    Next post will be about VBA Strings Basics.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/constant/",
        "teaser": null
      },{
        "title": "VBA String Basics",
        "excerpt":"The String data type represents a series of characters. This topic introduces the basic concepts of strings in Visual Basic.   String Variables   An instance of a string can be assigned a value that represents a series of characters as shown in below example:   Dim MyString As String MyString = \"This is an example of the String data type\"   A String variable can also accept any expression that evaluates to a string as shown in below example:   Dim OneString As String Dim TwoString As String OneString = \"one, two, three, four, five\" TwoString = OneString.Substring(5, 3) ' Output -&gt; \"two\".  OneString = \"1\" TwoString = OneString &amp; \"1\" ' Output -&gt; \"11\".   Any literal that is assigned to a String variable must be enclosed in quotation marks (“”).   This means that a quotation mark (“”) within a string cannot be represented by a quotation mark.   For example, the following code causes a compiler error:   Dim myString As String  ' This line would cause an error. myString = \"He said, \"Look at this example!\"\"   This code causes an error because the compiler terminates the string after the second quotation mark, and the remainder of the string is interpreted as code.   This means compiler think He said,  is a string and Look at this example! as a VB code.   But we want compiler to know that we want He said, \"Look at this example!\" as a string value.   To solve this problem, Visual Basic interprets two quotation marks in a string literal as one quotation mark in the string.   The following example shows the correct way to include a quotation mark in a string:   ' The value of myString is: He said, \"Look at this example!\" myString = \"He said, \"\"Look at this example!\"\" \"   In the preceding example, the two quotation marks before and after the word Look become one quotation mark in the string.   The Immutability of Strings   A string is immutable, which means its value cannot be changed once it has been created.   However, this does not prevent us from assigning more than one value to a string variable as shown in below example:   Dim myString As String = \"This string is immutable\" myString = \"Or is it?\"   Here, a string variable is created, given a value, and then its value is changed.   In the first line, an instance of type String is created and given the value This string is immutable.   In the second line of the example, a new instance is created and given the value Or is it?, and the string variable discards its reference to the first instance and stores a reference to the new instance.   Unlike other intrinsic data types, String is a reference type.   When a variable of reference type is passed as an argument to a function or subroutine, a reference to the memory address where the data is stored is passed instead of the actual value of the string.   So in the previous example, the name of the variable remains the same, but it points to a new and different instance of the String class, which holds the new value.   Next post will be about VBA Assignment Statements And Operators.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/string-basic/",
        "teaser": null
      },{
        "title": "VBA Assignment Statements And Operators",
        "excerpt":"An assignment statement is a VBA statement that assigns the result of an expression to a variable or an object.   In a book I read Excel’s Help system defines the term expression as:      “Combination of keywords, operators, variables, and constants that yields a string, number, or object. An expression can be used to perform a calculation, manipulate characters, or test data.”    Much of your work in VBA involves developing (and debugging) expressions.   If you know how to create simple formulas in Excel, you’ll have no trouble creating expressions.   With a formula, Excel displays the result in a cell.   A VBA expression, on the other hand, can be assigned to a variable.      For understanding purpose, I used Excel as an example. Please don’t get confused with it.    In the assignment statement examples that follow, the expressions are to the right of the equal sign:   X = 1 X = x + 1 X = (y * 2) / (z * 2) NumberOfParts = 15 SelectObject = True   Expressions can be as complex as you need them to be; use the line continuation character (a space followed by an underscore) to make lengthy expressions easier to read.   Operators   As you can see in the VBA uses the equal sign as its assignment operator.   You’re probably accustomed to using an equal sign as a mathematical symbol for equality.   Therefore, an assignment statement like the following may cause you to raise your eyebrows:   x = x + 1   How can the variable x be equal to itself plus 1?   Answer: It can’t.   In this case, the assignment statement is increasing the value of x by 1.   Just remember that an assignment uses the equal sign as an operator, not a symbol of equality.   Smooth Operators   Operators play a major role in VBA. Besides the assignment operator i.e. equal sign (discussed in the previous topic), VBA provides several other operators.   Below table lists these operators.                 VBA’s Operators                   Function         Operator Symbol                   Addition         +                   Multiplication         *                   Division         /                   Subtraction         -                   Exponentiation         ^                   String concatenation         &#38;                   Integer division (the result is always an integer)         \\                   Modulo arithmetic (returns the remainder of a division operation)         Mod        The term concatenation is programmer speak for “join together”.   Thus, if you concatenate strings, you are combining strings to make a new and improved string.   VBA also provides a full set of logical operators. Below table, shows some of logical operators.                 VBA’s Logical Operators                   Operator         What is does                   Not         Performs a logical negation on an expression.                   And         Performs a logical conjunction on two expressions.                   Or         Performs a logical disjunction on two expressions.                   XoR         Performs a logical exclusion on two expressions.                   Eqv         Performs a logical equivalence on two expressions.                   Imp         Performs a logical implication on two expressions.        The precedence order for operators in VBA is exactly the same as in Excel formulas.   Exponentiation has the highest precedence. multiplication and division come next, followed by addition and subtraction.   You can use parentheses to change the natural precedence order, making whatever’s operation in parentheses come before any operator.   Take a look at this code:   z = x + 5 * y   When this code is executed, what’s the value of z?   If you answered 13, you get a gold star that proves you understand the concept of operator precedence.   If you answered 16, read this: The multiplication operation (5 * y) is performed first, and that result is added to x.   If you answered something other than 13 or 16, I have no comment.   By the way, I can never remember how operator precedence works, so I tend to use parentheses even when they aren’t required.   For example, in real life I would write that last assignment statement like this:   z = x + (5 * y)      Don’t be shy about using parentheses even if they aren’t required — especially if doing so makes your code easier to understand. VBA doesn’t care if you use extra parentheses.    Next post will be about VBA Arrays.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/assignment-statement-and-operator/",
        "teaser": null
      },{
        "title": "VBA Arrays",
        "excerpt":"Most programming languages support arrays. An array is a group of variables that share a common name.   You refer to a specific variable in the array by using the array name and an index number in parentheses.   For example, you can define an array of 12 string variables to hold the names of the months of the year.   If you name the array MonthNames, you can refer to the first element of the array as MonthNames(1), the second element as MonthNames(2), and so on.   Dim MonthNames(\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\", \"Jun\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\") As string print(MonthNames(1))    'print Feb   Declaring Arrays   Before you can use an array, you must declare it. No exceptions.   Unlike normal variables, VBA is very strict about this rule.   You declare an array with a Dim or Public statement, just as you declare a regular variable.   However, you also need to specify the number of elements in the array.   You do this by specifying the first index number, the keyword To, and the last index number — all inside parentheses.   The following example shows how to declare an array of 100 integers:   Dim MyArray(1 To 100) As Integer   When you declare an array, you can choose to specify only the upper index.   VBA assumes that 0 is the lower index. Therefore, both of the following statements declare the same 101-element array:   Dim MyArray(1 To 100) As Integer Dim MyArray(1 To 100)   If you want VBA to assume that 1 (rather than 0) is the lower index for your arrays, include the following statement in the Declarations section of your module:   Option Base 1   This statement forces VBA to use 1 as the first index number for arrays that declare only the upper index.   If above statement is present, the following statements are identical, both declaring a 100-element array:   Dim MyArray(1 To 100) As Integer Dim MyArray(1 To 100)   There are two other arrays           Multi-dimensional array            Dynamic array       But I don’t think these two are that much useful for use to learn hence we will not delve into them.   Next post will be about VBA Functions.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/arrays/",
        "teaser": null
      },{
        "title": "VBA Functions",
        "excerpt":"A function essentially performs a calculation and returns a single value.   The SUM function in MS Excel returns the sum of a range of values.   The same holds true for functions used in your VBA expressions: Each function does its thing and returns a single value.   The functions you use in VBA can come from two sources:      Built-in functions provided by VBA   Custom functions that you (or someone else) write, using VBA.   Built-In VBA Functions   VBA provides numerous built-in functions. Some of these functions take arguments and some do not.   I present a few examples of VBA functions in code.   In many of these examples, I use the MsgBox function to display a value in a message box.   Yes, MsgBox is a VBA function — a rather unusual one, but a function nonetheless.   This useful function displays a message in a pop-up dialog box.   Displaying the system date or time   The first example uses VBA’s Date function to display the current system date in a message box:   Sub ShowDate()   MsgBox Date End Sub   Notice that the Date function doesn’t use an argument.   A VBA function with no argument doesn’t require an empty set of parentheses.   In fact, if you type an empty set of parentheses, the VBE will promptly remove them.   To get the system time, use the Time function. And if you want it all, use the Now function to return both the date and the time.   Sub ShowDate()   MsgBox Now End Sub   Finding a string length   The following procedure uses the VBA’s Len function, which returns the length of a text string.   The Len function takes one argument: the string.   When you execute this procedure, the message box displays 11 because the argument has 11 characters.   Sub StringLength()   Dim MyString As String   Dim StringLength As Integer   MyString = “Hello World”   StringLength = Len(MyString)   MsgBox StringLength End Sub   Displaying the integer part of a number   The following procedure uses the Fix function, which returns the integer portion of a value — the value without any decimal digits:   Sub GetIntegerPart()   Dim MyValue As Double   Dim IntValue As Integer   MyValue = 123.456   IntValue = Fix(MyValue)   MsgBox IntValue End Sub   In this case, the message box displays 123.   VBA has a similar function called Int Function.   The difference between Int and Fix is how each deals with negative numbers.   It’s a subtle difference, but sometimes it’s important.   Int Function returns the first negative integer that’s less than or equal to the argument. Int(-123.456) returns -124.   Fix Function returns the first negative integer that’s greater than or equal to the argument. Fix(-123.456) returns -123.   Determining a file size   The following Sub procedure displays the size, in bytes, of the executable file.   It finds this value by using the FileLen function.   Sub GetFileSize()   Dim TheFile As String   TheFile “C:\\ProgramFiles\\Program File\\SolidworksCorp\\SLDWORKS\\SLDWORKS.exe”   MsgBox FileLen(TheFile) End Sub   Notice that this routine hard codes the filename (that is, it explicitly states the path).   Generally, this isn’t a good idea. The file might not be on the C drive, or the Program File folder may have a different location.   The following statement shows a better approach:   TheFile = Application.Path &amp; “\\SLDWORKS.EXE”    Path is a property of the Application object.   It simply returns the name of the folder in which the application (that is, Solidworks) is installed (without a trailing backslash).   Identifying the type of a selected object   The following procedure uses the TypeName function, which returns the type of the selection (as a string):   Sub ShowSelectionType()   Dim SelType As String   SelType = TypeName(Selection)   MsgBox SelType End Sub   This could be a Sketch, a Part, a Assembly or any other type of object that can be selected.   The TypeName function is very versatile. You can also use this function to determine the data type of a variable.   Next post will be about VBA Functions that do more.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/functions/",
        "teaser": null
      },{
        "title": "VBA Functions that do more",
        "excerpt":"A few VBA functions go above and beyond the call of duty. Rather than simply return a value, these functions have some useful side effects.   Below table lists them.                 Functions with Useful Side Benefits                   Function         What is does                   MsgBox                      Displays a handy dialog box containing a message and buttons.              The function returns a code that identifies which button the user clicks.                            InputBox                      Displays a simple dialog box that asks the user for some input.              The function returns whatever the user enters into the dialog box.                            Shell                      Executes another program. The function returns the task ID (a unique identifier)              of the other program (or an error if the function can’t start the other program).                            GetObject/CreateObject                      Returns/Create a reference to an object provided by an ActiveX component.              (If you don't understand, don't bother about it. Just remember we use this              function to for checking &#38; creating objects in later topics)                   Discovering VBA functions   How do we find out which function does VBA provides?   The best source is the Visual Basic Help system in build in your CAD Application.   I compiled a partial list of functions, which I share with you in following Table.   I omitted some of the more specialized or obscure functions.   For complete details on a particular function, type the function name into a VBA module, move the cursor anywhere in the text, and press F1.                 VBA’s Most Useful Built-In Functions                   Function         What is does                   Abs         Returns a number’s absolute value.                   Array         Returns a variant containing an array.                   Asc         Converts the first character of a string to its ASCII value.                   Atn         Returns the arctangent of a number.                   Choose         Returns a value from a list of items.                   Chr         Converts an ANSI value to a string.                   Cos         Returns a number’s cosine.                   CurDir         Returns the current path.                   Date         Returns the current system date.                   DateAdd         Returns a date to which a specified time interval has been added — for example, one month from a particular date.                   DatePart         Returns an integer containing the specified part of a given date — for example, a date’s day of the year.                   DateSerial         Converts a date to a serial number.                   DateValue         Converts a string to a date.                   Day         Returns the day of the month from a date value.                   Dir         Returns the name of a file or directory that matches a pattern.                   Erl         Returns the line number that caused an error.                   Err         Returns the error number of an error condition.                   Error         Returns the error message that corresponds to an error number.                   Exp         Returns the base of the natural logarithm (e) raised to a power.                   FileLen         Returns the number of bytes in a file.                   Fix         Returns a number’s integer portion.                   Format         Displays an expression in a particular format.                   GetSetting         Returns a value from the Windows registry.                   Hex         Converts from decimal to hexadecimal.                   Hour         Returns the hours portion of a time.                   InputBox         Displays a box to prompt a user for input.                   InStr         Returns the position of a string within another string.                   Int         Returns the integer portion of a number.                   IPmt         Returns the interest payment for an annuity or loan.                   IsArray         Returns True if a variable is an array.                   IsDate         Returns True if an expression is a date.                   IsEmpty         Returns True if a variable has not been initialized.                   IsError         Returns True if an expression is an error value.                   IsMissing         Returns True if an optional argument was not passed to a procedure.                   IsNull         Returns True if an expression contains no valid data.                   IsNumeric         Returns True if an expression can be evaluated as a number.                   IsObject         Returns True if an expression references an OLE Automation object.                   LBound         Returns the smallest subscript for a dimension of an array.                   LCase         Returns a string converted to lowercase.                   Left         Returns a specified number of characters from the left of a string.                   Len         Returns the number of characters in a string.                   Log         Returns the natural logarithm of a number to base.                   LTrim         Returns a copy of a string, with any leading spaces removed.                   Mid         Returns a specified number of characters from a string.                   Minutes         Returns the minutes portion of a time value.                   Month         Returns the month from a date value.                   MsgBox         Displays a message box and (optionally) returns a value.                   Now         Returns the current system date and time.                   RGB         Returns a numeric RGB value representing a color.                   Replace         Replaces a substring in a string with another substring.                   Right         Returns a specified number of characters from the right of a string.                   Rnd         Returns a random number between 0 and 1.                   RTrim         Returns a copy of a string, with any trailing spaces removed.                   Second         Returns the seconds portion of a time value.                   Sgn         Returns an integer that indicates a number’s sign.                   Shell         Runs an executable program.                   Sin         Returns a number’s sine.                   Space         Returns a string with a specified number of spaces.                   Split         Splits a string into parts, using a delimiting character.                   Sqr         Returns a number’s square root.                   Str         Returns a string representation of a number.                   StrComp         Returns a value indicating the result of a string comparison.                   String         Returns a repeating character or string.                   Tan         Returns a number’s tangent.                   Time         Returns the current system time.                   Timer         Returns the number of seconds since midnight.                   TimeSerial         Returns the time for a specified hour, minute, and second.                   TimeValue         Converts a string to a time serial number.                   Trim         Returns a string without leading or trailing spaces.                   TypeName         Returns a string that describes a variable’s data type.                   UBound         Returns the largest available subscript for an array’s dimension.                   UCase         Converts a string to uppercase.                   Val         Returns the numbers contained in a string.                   VarType         Returns a value indicating a variable’s subtype.                   Weekday         Returns a number representing a day of the week.                   Year         Returns the year from a date value.        ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/more-functions/",
        "teaser": null
      },{
        "title": "Controlling Program Flow and Making Decisions",
        "excerpt":"Some VBA procedures start at the code’s beginning and progress line by line to the end, never deviating from this top-to-bottom program flow.   Macros that you record always work like this.   In many cases, however, you need to control the flow of your code by skipping over some statements, executing some statements multiple times, and testing conditions to determine what the procedure does next.   Some programming newbies can’t understand how a dumb computer can make intelligent decisions.   The secret is in several programming constructs that most programming languages support.   Following table provides a quick summary of these constructs.                 Programming Constructs for Making Decisions                   Construct         How it works                   If-Then structure                      Does something if something else is true.                            Select Case                      Does any of several things, depending on something’s value.                            For-Next loop                      Executes a series of statements a specified number of times.                            Do-While loop                      Does something as long as something else remains true.                            Do-Until loop                      Does something until something else becomes true.                 Next post will be about If-Then-Else and Select Case structure.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/controlling-flow-making-desicions/",
        "teaser": null
      },{
        "title": "If-Then-Else and Select Case structure",
        "excerpt":"If-Then is VBA’s most important control structure. You’ll probably use this command on a daily basis.   As in many other aspects of life, effective decision-making is the key to success in writing CAD or any other macros.   The If-Then structure has this basic syntax:   If condition Then statements [Else elsestatements]   Use the If-Then structure when you want to execute one or more statements conditionally.   The optional Else clause, if included, lets you execute one or more statements if the condition you’re testing is not true.   Sound confusing? Don’t worry; a few examples make this crystal clear.   If-Then examples   The following routine demonstrates the If-Then structure without the optional Else clause:   Sub GoodMorning()   If Time &lt; 0.5 Then MsgBox “Good Morning.” End Sub   The GoodMorning procedure uses VBA’s Time function to get the system time.   If the current system time is less than .5 (in other words, before noon), the routine displays a friendly greeting.   If Time is greater than or equal to .5, the routine ends and nothing happens.   To display a different greeting if Time is greater than or equal to .5, add another If-Then statement after the first one:   Sub GoodMorning2()   If Time &lt; 0.5 Then MsgBox “Good Morning.”   If Time &gt;= 0.5 Then MsgBox “Good Afternoon.” End Sub   Notice that I used &gt;= (greater than or equal to) for the second If-Then statement.   This ensures that the entire day is covered. Had I used &gt; (greater than), then no message would appear if this procedure were executed at precisely 12:00 noon.   If-Then-Else examples   Another approach to the preceding problem uses the Else clause.   Here’s the same routine recoded to use the If-Then-Else structure:   Sub GoodMorning3()   If Time &lt; 0.5 Then MsgBox “Good Morning.” Else _   MsgBox “Good Afternoon.” End Sub   Notice that I use the line continuation character (underscore) in the preceding example.   The If-Then-Else statement is actually a single statement.   VBA provides a slightly different way of coding If-Then-Else constructs that use an End-If statement.   Therefore, the GoodMorning procedure can be rewritten as:   Sub GoodMorning4()   If Time &lt; 0.5 Then     MsgBox “Good Morning.”   Else     MsgBox “Good Afternoon.”   End If End Sub   In fact, you can insert any number of statements under the If part, and any number of statements under the Else part.   I prefer to use this syntax because it’s easier to read and makes the statements shorter.   What if you need to expand the GoodMorning routine to handle three conditions: morning, afternoon, and evening?   You have two options: Use three If-Then statements or use a nested If-Then-Else structure.   Nesting means placing an If-Then-Else structure within another If-Then-Else structure.   The first approach, the three statements, is simplest:   Sub GoodMorning5()   If Time &lt; 0.5 Then Msg = “Morning.”   If Time &gt;= 0.5 And Time &lt; 0.75 Then Msg = “Afternoon.”   If Time &gt;= 0.75 Then Msg = “Evening.”   MsgBox “Good” &amp; Msg End Sub   The Msg variable gets a different text value, depending on the time of day.   The final MsgBox statement displays the greeting: Good Morning, Good Afternoon, or Good Evening.   The following routine performs the same action but uses an If-Then-End If structure:   Sub GoodMorning6()   Dim Msg As String   If Time &lt; 0.5 Then     Msg = “Morning.”   If Time &gt;= 0.5 And Time &lt; 0.75 Then     Msg = “Afternoon.”   If Time &gt;= 0.75 Then     Msg = “Evening.”   End If   MsgBox “Good” &amp; Msg End Sub   If-ElseIf-Else examples   In the previous examples, every statement in the routine is executed — even in the morning.   A more efficient structure would exit the routine as soon as a condition is found to be true.   In the morning, for example, the procedure should display the Good Morning message and then exit — without evaluating the other superfluous conditions.   With a tiny routine like this, you don’t have to worry about execution speed.   But for larger applications in which speed is important, you should know about another syntax for the If-Then structure.   The ElseIf syntax follows:   If condition Then [statements] [Else condition-n Then [elseifstatements]] [Else [elsestatements]]   Here’s how you can rewrite the GreetMe routine by using this syntax:   Sub GoodMorning7()   Dim Msg As String   If Time &lt; 0.5 Then     Msg = “Morning.”   ElseIf Time &gt;= 0.5 And Time &lt; 0.75 Then     Msg = “Afternoon.”   Else     Msg = “Evening.”   End If   MsgBox “Good” &amp; Msg End Sub   When a condition is true, VBA executes the conditional statements and the If structure ends.   In other words, VBA doesn’t waste time evaluating the extraneous conditions, which makes this procedure a bit more efficient than the previous examples.   The trade-off (there are always trade-offs) is that the code is more difficult to understand. (Of course, you already knew that.)   Select Case structure   The Select Case structure is useful for decisions involving three or more options (although it also works with two options, but using If-Then-Else structure is more efficient for that).   The syntax for the Select Case structure follows:   Select Case testexpression [Case expressionlist-n    [statements-n]] [Case Else   [elsestatements]] End Select   Don’t be scared off by this official syntax. Using the Select Case structure is quite easy.   Select Case example   The following example shows how to use the Select Case structure.   This also shows another way to code the examples presented in the previous section:   Sub SelectPartLength()   Dim PartNumber As Integer   Dim PartLength As Integer   PartNumber = InputBox(“Please Enter part number:”)   Select Case PartNumber     Case Part001       PartLength = 1     Case Part002       PartLength = 2     Case Part003       PartLength = 3   End Select   MsgBox “Part Length for this” &amp; PartNumber &amp; “is” &amp; PartLength End Sub   In this example, the PartNumber variable is being evaluated.   The routine is checking for three different cases.   Next post will be about VBA Looping.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/if-then-structure-select-case/",
        "teaser": null
      },{
        "title": "VBA Looping",
        "excerpt":"The term looping refers to repeating a block of VBA statements numerous times.   VBA provides various looping command for repeating code to make correct decision making.   We will go through them in following topics:   For -Next Loop   The simplest type of loop is a For-Next loop. Here’s the syntax for this structure:   For counter = start To end [Step stepval] [statements] [Exit For] [statements] Next [counter]   The looping is controlled by a counter variable, which starts at one value and stops at another value.   The statements between the For statement and the Next statement are the statements that get repeated in the loop.   To see how this works, keep reading.   For-Next example   The following example shows a For-Next loop that doesn’t use the optional Step value or the optional Exit For statement.   This routine loops 10 times and uses the VBA MsgBox function to show a number from 1 to 10:   Sub ShowNumbers1()   Dim i As Integer   For i = 1 to 10     MsgBox i   Next i End Sub   In this example, i (the loop counter variable) starts with a value of 1 and increases by 1 each time through the loop.   Because I didn’t specify a Step value the MsgBox method uses the value of i as an argument.   The first time through the loop, i is 1 and the procedure shows a number.   The second time through (i = 2), the procedure show a number, and so on.   Sub ShowNumbers2()   Dim i As Integer Step 2   For i = 1 to 10     MsgBox i   Next i End Sub   Count starts out as 1 and then takes on a value of 3, 5, 7, and 9. The final Count value is 9.   The Step value determines how the counter is incremented. Notice that the upper loop value (9) is not used because the highest value of Count after 9 would be 11, and 11 is larger than 10.   For-Next example with an Exit For statement   A For-Next loop can also include one or more Exit For statements within the loop.   When VBA encounters this statement, the loop terminates immediately.   Here’s the same procedure as in the preceding section, rewritten to insert random numbers.   Sub ShowNumbers3()   Dim i As Integer Step 2   For i = 1 to 10     If i = 5 Then       MsgBox “This is a mid value”       Exit For     End If     MsgBox i   Next i End Sub   This routine performs the as earlier but when the variable i reached to 5, it shows a message, stating that this is a mid value and exit from loop.   Do-While Loop   VBA supports another type of looping structure known as a Do-While loop.   Unlike a For-Next loop, a Do-While loop continues until a specified condition is met.   Here’s the Do-While loop syntax:   ' Do-While Structure Do [While condition]   [statements]   [Exit Do]   [statements] Loop   The following example uses a Do-While loop. This routine uses 1 as a starting point and runs through next numbers.   The loop continues until the routine encounter the condition of i = 8.   ' Do-While Example Sub ShowNumbers4()   Dim i As Integer   Do While i &lt;&gt; 8     MsgBox i     i = i + 1   Loop End Sub   Some people prefer to code a Do-While loop as a Do-Loop While loop.   This example performs exactly as the previous procedure but uses different loop syntax:   ' Do-Loop While Example Sub ShowNumbers5()   Dim i As Integer   Do      MsgBox i     i = i + 1   Loop While i &lt;&gt; 8 End Sub   Here’s the key difference between the Do-While and Do-Loop While loops.   The Do-While loop always performs its conditional test first. If the test is not true, the instructions inside the loop are never executed.   The Do-Loop While loop, on the other hand, always performs its conditional test after the instructions inside the loop are executed.   Thus, the loop instructions are always executed at least once, regardless of the test.   This difference can sometimes have a big effect on how your program functions.   Do-Until Loop   The Do-Until loop structure is similar to the Do-While structure.   The two structures differ in their handling of the tested condition.   A program continues to execute a Do-While loop while the condition remains true.   In a Do-Until loop, the program executes the loop until the condition is true. Here’s the Do-Until syntax:   ' Do-Until Structure Do [Until condition]   [statements]   [Exit Do]   [statements] Loop   The following example is the same one presented for the Do-While loop but recoded to use a Do-Until loop:   Sub ShowNumbers6()   Dim i As Integer   Do Until i &lt;&gt; 8     MsgBox i     i = i + 1   Loop End Sub   Just like with the Do-While loop, you may encounter a different form of the Do-Until loop — a Do-Loop Until loop.   The following example, which has the same effect as the preceding procedure, demonstrates an alternate syntax for this type of loop:   Sub ShowNumbers7() ' Do-Loop Until Example   Dim i As Integer   Do      MsgBox i     i = i + 1   Loop Until i &lt;&gt; 8 End Sub   There is a subtle difference in how the Do-Until loop and the Do-Loop Until loop operate.   In the former, the test is performed at the beginning of the loop, before anything in the body of the loop is executed.   This means that it is possible that the code in the loop body will not be executed if the test condition is met.   In the later version, the condition is tested at the end of the loop.   Therefore, at a minimum, the Do-Loop Until loop always results in the body of the loop being executed once.   Another way to think about it is like this: The Do-While loop keeps looping as long as the condition is true.   The Do-Until loop keeps looping as long as the condition is False.   Looping through a Collection   VBA supports yet another type of looping — looping through each object in a collection of objects.   Please note that I have not covered Object topic so far. For your understanding I give a brief explanation about collection.   A collection is a group of same type of objects.   For example, a drawing file in any CAD application is a collection of Sheets, and each sheet is a collection of drawing views and so on.   When you need to loop through each object in a collection, use the For Each-Next structure. The syntax is   ' For Each-Next Structure For Each element In collection   [statements]   [Exit For]   [statements] Next [element]   The following example loops through each drawing sheet in the active drawing and shows name of each active drawing sheet:   ' For Each-Next Example Option Explicit Dim swApp As SldWorks.SldWorks Dim swPart As SldWorks.ModelDoc2 Dim swDwg As SldWorks.DrawingDoc Dim BoolStatus As Boolean Dim SheetNamesList As Variant Sub ShowSheetName()   Set swApp = Application.SldWorks   Set swPart = swApp.ActiveDoc   Set swDwg = swPart   SheetNamesList = swDwg.GetSheetNames   Dim SheetName As Variant   For Each SheetName In SheetNamesList     MsgBox SheetName   Next SheetName End Sub   In this example, first we get the list of all sheet names in opened drawing, then we loop through each sheet name in collection and show sheet name in a message box.   For this example please notes that we did not need to load all sheet, this code can work on non-activate and non-loaded sheets also.   Next post will be about Bug Finding.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/looping/",
        "teaser": null
      },{
        "title": "Bug Finding",
        "excerpt":"A bug is an error in your programming. Here I cover the topic of programming bugs — how to identify them and how to remove them from your module.   Types of Bugs   The term program bug, as you probably know, refers to a problem with software.   In other words, if software doesn’t perform as expected, it has a bug.   Fact is, all major software programs have bugs — lots of bugs.   A CAD software like Solidworks itself has hundreds (if not thousands) of bugs.   Fortunately, the vast majority of these bugs are relatively obscure and appear in only very specific circumstances.   When you write non-trivial VBA programs, your code probably will have bugs.   This is a fact of life and not necessarily a reflection of your programming ability. The bugs may fall into any of the following categories:           Logical flaws in your code: You can often avoid these bugs by carefully thinking through the problem your program addresses.            Incorrect context bugs: This type of bug surfaces when you attempt to do something at the wrong time. For example, you may try to update the sketch dimension and there are no sketch is activated.            Extreme-case bugs: These bugs rear their heads when you encounter data you didn’t anticipate, such as very large or very small numbers.            Wrong data types bugs: This type of bug occurs when you try to process data of the wrong type, such as attempting to take the square root of a text string.       Debugging is the process of identifying and correcting bugs in your program.   Developing debugging skills takes time, so don’t be discouraged if this process is difficult at first.   It’s important to understand the distinction between bugs and syntax errors.   A syntax error is a language error. For example, you might misspell a keyword, omit the Next statement in a For-Next loop, or have a mismatched parenthesis.   Before you can even execute the procedure, you must correct these syntax errors.   A program bug is much subtler. You can execute the routine, but it doesn’t perform as expected.   Identifying Bugs   Before you can do any debugging, you must determine whether a bug actually exists.   You can tell that your macro contains a bug if it doesn’t work the way it should. Usually, but not always, you can easily discern this.   A key fact known to all programmers is that bugs often appear when you least expect them.   For example, just because your macro works fine with one data set doesn’t mean you can assume it will work equally as well with all data sets.   Or your macro runs fine in your system but not working properly in your friend’s system.   Such cases happened all the time and are part of debugging.   The best debugging approach is to start with thorough testing, under a variety of real-life conditions.   Because any changes made by your VBA code cannot be undone, it is always a good idea to use a backup copy of your CAD files that you use for testing.   I usually copy some files into a temporary folder and use those files for my testing.   Debugging Techniques   In this section, I discuss the some of the most common methods for debugging VBA code:      Examine your code   Inserting MsgBox functions at various locations in your code   Inserting Debug.Print statement   Examine your code   Perhaps the most straightforward debugging technique is simply taking a close look at your code to see whether you can find the problem.   If you’re lucky, the error jumps right out, and you can fix the problem.   Notice I said, “If you’re lucky.” That’s because often you discover errors when you have been working on your program for long hours and you are running on caffeine and willpower.   At times like that, you are lucky if you can even see your code.   Thus, don’t be surprised if simply examining your code isn’t enough to make you find and expunge all the bugs it contains.   Using the MsgBox function   A common problem in many programs involves one or more variables not taking on the values you expect.   In such cases, monitoring the variable(s) while your code runs is a helpful debugging technique.   One way to do this is by inserting temporary MsgBox functions into your routine.   For example, I used MsgBox function to check conditions. Whenever I use If-Else statement, I put one message in If condition and put another message in Else condition.   By this way, I make sure condition which I want is working correct or not.   Feel free to use MsgBox functions frequently when you debug your code.   Just make sure that you remove them after you identify and correct the problem.   Inserting Debug.Print Statement   As an alternative to using MsgBox functions in your code, you can insert one or more temporary Debug.Print statements.   Use these statements to print the value of one or more variables in the Immediate window.   Here’s an example that displays a message of “This condition is working fine”.   If swPart Is Nothing Then   Debug.Print \"This condition is working fine.\"   If VBE’s Immediate window is not visible, press Ctrl+G.   Unlike MsgBox, Debug.Print statements do not halt your code.   So you’ll need to keep an eye on the Immediate window to see what’s going on.   After you’ve debugged your code, be sure to remove all the Debug.Print statements.   Next post will be about VBA Debugger.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/bug-finding/",
        "teaser": null
      },{
        "title": "VBA Debugger",
        "excerpt":"In this section, I discuss the details of using the VBA debugging tools.   These tools are much more powerful than the techniques I discuss in the previous section.   But along with power comes responsibility. Using the debugging tools takes a bit of setup work.   Setting breakpoints in your code   In earlier sections, I discuss using MsgBox functions in your code to monitor the values of certain variables.   Displaying a message box essentially halts your code in mid-execution, and clicking the OK button resumes execution.   Wouldn’t it be nice if you could halt a routine’s execution, take a look at the value of any of your variables, and then continue execution?   Well, that’s exactly what you can do by setting a breakpoint.   You can set a breakpoint in your VBA code in several ways:      Move the cursor to the statement at which you want execution to stop; then press F9.   Click in the gray margin to the left of the statement at which you want execution to stop. This is I used mainly.   Position the insertion point in the statement at which you want execution to stop. Then use the Debug -&gt; Toggle Breakpoint command.   Right-click a statement and choose Toggle -&gt; Breakpoint from the shortcut menu.   The results of setting a breakpoint are shown in below figure.   VBE highlights the line to remind you that you set a breakpoint there; it also inserts a large dot in the gray margin.      When you execute the procedure, VBE goes into Break mode before the line with the breakpoint is executed.   In Break mode, the word break is displayed in the VBE title bar.   To get out of Break mode and continue execution, press F5 or click the Run Sub/UserForm button in the VBE toolbar.   To quickly remove a breakpoint, click the large dot in the gray margin or move the cursor to the highlighted line and press F9.   To remove all breakpoints in the module, press Ctrl+Shift+F9.   What is Break mode? You can think of it as a state of suspended animation.   Your VBA code stops running and the current statement is highlighted in bright yellow. In Break mode, you can      Type VBA statements in the Immediate window.   Press F8 to step through your code one line at a time to check various things while the program is paused.   Move the mouse pointer over a variable to display its value in a small pop-up window.   Skip the next statement(s) and continue execution there (or even go back a couple of statements).   Edit a statement and then continue.   Below figure shows some debugging action.   A breakpoint is set (notice the big dot), and I’m using the F8 key to step through the code line by line (notice the arrow that points to the current statement).   I used the Immediate window to print Hello world.      Using the Immediate window   The Immediate window may not be visible in the VBE.   You can display the VBE’s Immediate window at any time by pressing Ctrl+G.   In Break mode, the Immediate window is particularly useful for finding the current value of any variable in your program.   For example, if you want to know the current value of a variable, enter the following in the Immediate window and press Enter.   The Immediate window lets you do other things besides check variable values.   For example, you can change the value of a variable, try for a new condition.   Just make sure that the command you enter is a valid VBA statement.   Stepping through your code   While in Break mode, you can also step through your code line by line.   One statement is executed each time you press F8.   Throughout this line-by-line execution of your code, you can activate the Immediate window at any time to check the status of your variables.   You can use your mouse to change which statement VBA will execute next.   If you put your mouse pointer in the gray margin to the left of the currently highlighted statement (which will usually be yellow), your pointer changes to a right-pointing arrow.   Simply drag your mouse to the statement you want done next and watch that statement turn yellow.   Using the Watch window   In some cases, you may want to know whether a certain variable or expression takes on a particular value.   For example, suppose that a procedure loops through 1,000 times.   You notice that a problem occurs during the 800th iteration of the loop.   Well, you could insert a breakpoint in the loop, but that would mean responding to 799 prompts before the code finally gets to the iteration you want to see (and that gets boring real fast).   A more efficient solution involves setting a watch expression.   For example, you can create a watch expression that puts the procedure into Break mode whenever a certain variable takes on a specific value — for example, AnyNumber=800.   To create a watch expression, choose Debug -&gt; Add Watch to display the Add Watch dialog box. See below figure.      The Add Watch dialog has three parts:           Expression: Enter a valid VBA expression or a variable here. For example, AnyNumber=900 or just AnyNumber.            Context: Select the procedure and the module you want to watch. Note that you can select All Procedures and All Modules.            Watch Type: Select the type of watch by clicking an option button. Your choice here depends on the expression you enter. The first choice, Watch Expression, does not cause a break; it simply displays the expression’s value when a break occurs.       Execute your procedure after setting up your watch expression(s).   Things run normally until your watch expression is satisfied (based on the Watch Type you specified).   When that happens, VBE enters Break mode (you did set the Watch Type to “Break When Value Is True,” didn’t you?).   From there, you can step through the code or use the Immediate window to debug your code.   When you create a watch, VBE displays the Watches window shown in below figure.   This window displays the value of all watches that you’ve defined.   In this figure, when the value hit 800, which caused VBE to enter Break mode.      The best way to understand how this Watch business works is to use it and try various options.   Before long, you’ll probably wonder how you ever got along without it.   Using the Locals window   Another useful debugging aid is the Locals window.   You can show this window by choosing View -&gt; Locals Window from the VBE’s menu.   When you are in Break mode, this window will show you a list of all variables that are local to the current procedure (see below figure).   The nice thing about this window is that you don’t have to add a load of watches manually if you want to look at the content of many variables.   The VBE has done all the hard workfor you.      Next post will be about VBA Bug Reduction Tips.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/debugger/",
        "teaser": null
      },{
        "title": "VBA Bug Reduction Tips",
        "excerpt":"I can’t tell you how to completely eliminate bugs in your programs.   Finding bugs in software can be a profession by itself, but I can provide a few tips to help you keep those bugs to a minimum:           Use an Option Explicit statement at the beginning of your modules. This statement requires you to define the data type for every variable you use. This creates a bit more work for you, but you avoid the common error of misspelling a variable name. And it has a nice side benefit: Your routines run a bit faster.            Format your code with indentation. Using indentations helps delineate different code segments. If your program has several nested For-Next loops, for example, consistent indentation helps you keep track of them all.            Use lots of comments. Nothing is more frustrating than revisiting code you wrote six months ago and not having a clue as to how it works. By adding a few comments to describe your logic, you can save lots of time down the road.            Keep your Sub and Function procedures simple. By writing your code in small modules, each of which has a single, well-defined purpose, you simplify the debugging process.            Use the macro recorder to help identify properties and methods. When I can’t remember the name or the syntax of a property or method, I often simply record a macro and look at the recorded code       Debugging code is not one of my favorite activities, but it’s a necessary evil that goes along with programming.   As you gain more experience with VBA, you spend less time debugging and, when you have to debug, are more efficient at doing so.   Next post will be about VBA Dialog Boxes.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/bug-reduction-tips/",
        "teaser": null
      },{
        "title": "VBA Dialog Boxes",
        "excerpt":"You can’t use VBA very long without being exposed to dialog boxes.   They seem to pop up almost every time you select a command.   VBA uses dialog boxes to obtain information, clarify commands, and display messages.   If you develop VBA macros, you can create your own dialog boxes that work just like those built in.   Those custom dialog boxes are called UserForms in VBA. About which we look into next section.   UserForm Alternatives   Some of the VBA macros you create behave the same every time you execute them.   For example, you may develop a macro for intermediate steps you do every day.   This macro always produces the same result and requires no additional user input.   You might develop other macros that behave differently under various circumstances or that offer the user options.   In such cases, the macro may benefit from a custom dialog box.   A custom dialog box provides a simple means for getting information from the user.   Your macro then uses that information to determine what it should do.   UserForms can be quite useful, but creating them takes time.   Before I cover the topic of creating UserForms in the next section, you need to know about some potentially timesaving alternatives.   VBA lets you display several different types of dialog boxes that you can sometimes use in place of a UserForm.   You can customize these built-in dialog boxes in some ways, but they certainly don’t offer the options available in a UserForm.   In some cases, however, they’re just what you need.   In the following sections you read about           VBA MsgBox function            VBA InputBox function            VBA GetOpenFilename method            VBA GetSaveAsFilename method            VBA FileDialog method       Next post will be about VBA MsgBox Function.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/dialog-boxes/",
        "teaser": null
      },{
        "title": "VBA MsgBox Function",
        "excerpt":"You’re probably already familiar with the VBA MsgBox function — I use it quite a bit in the examples.   The MsgBox function, which accepts the arguments shown in below table, is handy for displaying information and getting simple user input.   It’s able to get user input because it’s a function.   A function, as you recall, returns a value.   In the case of the Msgbox function, it uses a dialog box to get the value that it returns.   Keep reading to see exactly how it works.   Here’s a simplified version of the syntax for the MsgBox function:   ' MsgBox Structure MsgBox(prompt[, buttons][, title])                   Arguments       What it does                       prompt       The text your application displays in the message box                 buttons       A number that specifies which buttons (along with what icon) appear in the message box (optional)                 title       The text that appears in the message box’s title bar (optional) displaying a simple message box           You can use the MsgBox function in two ways:      To simply show a message to the user. In this case, you don’t care about the result returned by the function.   To get a response from the user. In this case, you do care about the result returned by the function. The result depends on the button that the user clicks.   If you use the MsgBox function by itself, don’t include parentheses around the arguments.   The following example simply displays a message and does not return a result.   When the message is displayed, the code stops until the user clicks OK.   ' MsgBox function Example Sub main()   MsgBox \"Hello, world!\" End Sub   Below figure shows how this message box looks:      Getting a response from a message box   If you display a message box that has more than just an OK button, you’ll probably want to know which button the user clicks.   The MsgBox function can return a value that represents which button is clicked.   You can assign the result of the MsgBox function to a variable.   In the following code, I use some built-in constants that make it easy to work with the values returned by MsgBox:   ' MsgBox built-in constants Example Sub GetAnswer()   Dim Ans as Integer   Ans = MsgBox (\"Did you eat lunch?\", vbYesNo)   Select Case Ans     Case vbYes     '......[Some code here]....     Case vbNo     '......[Some code here]....   End Select End Sub   Below figure shows how it looks.   When you execute this procedure, the Ans variable is assigned a value of either vbYes or vbNo, depending on which button the user clicks.   The Select Case statement uses the Ans value to determine which action the code should perform.      You can also use the MsgBox function result without using a variable, as the following example demonstrates:   ' MsgBox without variable Sub GetAnswer2()   If MsgBox (\"Continue?\", vbYesNo) = vbYes Then   '......[Some code here]....   Else   '......[Some code here]....   End If End Sub   Customizing message boxes   The flexibility of the buttons argument makes it easy to customize your message boxes.   You can specify which buttons to display, determine whether an icon appears, and decide which button is the default (the default button is “clicked” if the user presses Enter).   Below table lists some of the built-in constants you can use for the buttons argument.   If you prefer, you can use the value rather than a constant (but I think using the built-in constants is a lot easier).                    Constant       Value       What it does                       vbOKOnly       0       Display OK button only.                 vbOKCancel       1       Display OK and Cancel buttons                 vbAbortRetryIgnore       2       Displays Abort, Retry, and Ignore buttons.                 vbYesNoCancel       3       Displays Yes, No, and Cancel buttons.                 vbYesNo       4       Displays Yes and No buttons.                 vbRetryCancel       5       Displays Retry and Cancel buttons.                 vbCritical       16       Displays Critical Message icon.                 vbQuestion       32       Displays Warning Query icon.                 vbExclamation       48       Displays Warning Message icon.                 vbInformation       64       Displays Information Message icon.                 vbDefaultButton1       0       First button is default.                 vbDefaultButton2       256       Second button is default.                 vbDefaultButton3       512       Third button is default.                 vbDefaultButton4       768       Fourth button is default.           For using more than one of these constants as an argument, just connect them with a + operator.   For example, to display a message box with Yes and No buttons and an exclamation icon, use the following expression as the second MsgBox argument:   ' Using multiple MsgBox built-in constants vbYesNo + vbExclamation   Or, if you prefer to make your code less understandable, use a value of 52 (that is, 4 + 48).   The following example uses a combination of constants to display a message box with a Yes button and a No button (vbYesNo) as well as a question mark icon (vbQuestion).   The constant vbDefaultButton2 designates the second button (No) as the default button — that is, the button that is clicked if the user presses Enter.   For simplicity, we assign these constants to the Config variable and then use Config as the second argument in the MsgBox function:   ' Using multiple MsgBox built-in constants Sub GetAnswer3()   Dim Config As Integer   Dim Ans as Integer   Config = vbYesNo + vbQuestion + vbDefaultButton2   Ans = MsgBox(\"Is part opened?\", Config)   If Ans = vbYes Then OpenPart End Sub   Below figure shows the message box application displays when you execute the GetAnswer3 procedure.   If the user clicks the Yes button, the routine executes the procedure named OpenPart (which is not shown).   If the user clicks the No button (or presses Enter), the routine ends with no action.   Because I omitted the title argument in the MsgBox function, our application uses the default title, in my case it is Solidworks.      Previous examples have used constants (such as vbYes and vbNo) for the return value of a MsgBox function.   Besides these two constants, below table lists a few others.                    Constant       Value       What it does                       vbOK       1       User clicked OK.                 vbCancel       2       User clicked Cancel.                 vbAbort       3       User clicked Abort.                 vbRetry       4       User clicked Retry.                 vbIgnore       5       User clicked Ignore.                 vbYes       6       User clicked Yes.                 vbNo       7       User clicked No.           Next post will be about VBA InputBox Function.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/msgBox-function/",
        "teaser": null
      },{
        "title": "VBA InputBox Function",
        "excerpt":"The VBA’s InputBox function is useful for obtaining a single piece of information from the user.   That information could be a value, a text string, or even a range address.   This is a good alternative to developing a UserForm when you need to get only one value.   InputBox syntax   Here’s a simplified version of the syntax for the InputBox function:   ' InputBox syntax InputBox(prompt[, title][, default])   The InputBox function accepts the arguments listed in below.                    Arguments       What it means                       prompt       The text displayed in the input box.                 Title       The text displayed in the input box’s title bar (optional).                 Default       The default value for the user’s input (optional)           An InputBox example   Here’s an example showing how you can use the InputBox function:   ' InputBox example TheName = InputBox(\"What is your name?\", \"Greetings\")   When you execute this VBA statement, application displays the dialog box shown in below figure.   Notice that this example uses only the first two arguments and does not supply a default value.   When the user enters a value and clicks OK, the routine assigns the value to the variable TheName.      Please note that VBA’s InputBox function always returns a string, so if you need to get a value, your code will need to do some additional checking.   The following example uses the InputBox function to get a number.   It uses the IsNumeric function to check whether the string is a number.   If the string does contain a number, all is fine.   If the user’s entry cannot be interpreted as a number, the code displays a message box.   ' InputBox example Sub GetDrawingSheetNumber()   Dim NumberOfSheets as String   Prompt = \"How many sheets drawing have?\"   NumberOfSheets = InputBox (Prompt)    If NumberOfSheets = \"\" Then Exit Sub   If (IsNumeric)NumberOfSheets Then     '......[Some code here]....     Else     MsgBox \"Please enter a number.\"   End If End Sub   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/inputbox-function/",
        "teaser": null
      },{
        "title": "VBA GetOpenFilename, GetSaveAsFilename and Getting a Folder Name",
        "excerpt":"If your VBA procedure needs to ask the user for a filename, you could use the InputBox function.   An input box usually isn’t the best tool for this job, however, because most users find it difficult to remember paths, backslashes, filenames, and file extensions.   In other words, it’s far too easy to make a typographical error when typing a filename.   For a better solution to this problem, use the GetOpenFilename method of the Application object, which ensures that your code gets its hands on a valid filename, including its complete path.   The GetOpenFilename method displays the familiar Open dialog box.   The GetOpenFilename method doesn’t actually open the specified file.   This method simply returns the user-selected filename as a string.   Then you can write code to do whatever you want with the filename.   Syntax for the GetOpenFilename method   The official syntax for the GetOpenFilename method is as follows:   ' The GetOpenFilename method syntax object.GetOpenFilename ([fileFilter], [filterIndex], [title],[buttonText], [multiSelect])   The GetOpenFilename method takes the optional arguments shown in below Table.                    Arguments       What it does                       FileFilter       Determines the types of files that appear in the dialog box (for example, *.TXT).                 You can specify several different filters from which the user can choose.                         FilterIndex       Determines which of the file filters the dialog box displays by default.                 Title       Specifies the caption for the dialog box’s title bar.                 ButtonText       Ignored                 MultiSelect       If True, the user can select multiple files.           A GetOpenFilename example   The fileFilter argument determines what appears in the dialog box’s Files of Type drop-down list.   This argument consists of pairs of file filter strings followed by the wild card file filter specification, with commas separating each part and pair.   If omitted, this argument defaults to the following:   ' A GetOpenFilename example All Files (*.*), *.*   Notice that this string consists of two parts:   All Files (*.*)   and   *.*   The first part of this string is the text displayed in the Files of Type dropdown list.   The second part determines which files the dialog box displays. For example, . means all files.   The code in the following example brings up a dialog box that asks the user for a filename.   The procedure defines five file filters.   Notice that I use the VBA line continuation sequence to set up the Filter variable; doing so helps simplify this rather complicated argument.   ' A GetOpenFilename example Sub GetImportFileName()   Dim Finfo As String   Dim FilterIndex As Integer   Dim Title As String   Dim FileName As Variant    'Set up list of file filters   If (IsNumeric)NumberOfSheets Then   FInfo = \"Text Files (*.txt),*.txt,\" &amp; _   \"Lotus Files (*.prn),*.prn,\" &amp; _   \"Comma Separated Files (*.csv),*.csv,\" &amp; _   \"ASCII Files (*.asc),*.asc,\" &amp; _   \"All Files (*.*),*.*\"    'Display *.* by default   FilterIndex = 5    'Set the dialog box caption   Title = \"Select a File to Import\"    'Get the filename   FileName = Application.GetOpenFilename (FInfo, FilterIndex, Title)    'Handle return info from dialog box   If FileName = False Then     MsgBox \"No file was selected.\"   Else     MsgBox \"You selected \" &amp; FileName   End If End Sub   Notice that the FileName variable is declared as a Variant data type.   If the user clicks Cancel, that variable contains a Boolean value (False).   Otherwise, FileName is a string. Therefore, using a Variant data type handles both possibilities.   GetSaveAsFilename Method   The GetSaveAsFilename method works just like the GetOpenFilename method, but it displays the Save As dialog box rather than its Open dialog box.   The GetSaveAsFilename method gets a path and filename from the user but doesn’t do anything with it.   It’s up to you to write code that actually saves the file.   The syntax for this method follows:   ' The GetSaveAsFilename method syntax object.GetSaveAsFilename ([InitialFilename], [FileFilter], [FilterIndex], [Title], [ButtonText])   The GetSaveAsFilename method takes below arguments, all of which are optional.                    Arguments       What it does                       InitialFileName       Specifies a default filename that appears in the File Name box.                 FileFilter       Determines the types of files that appear in the dialog box (for example, *.TXT).                 You can specify several different filters from which the user can choose.                         FilterIndex       Determines which of the file filters the dialog box displays by default.                 Title       Specifies the caption for the dialog box’s title bar.           Getting a Folder Name   Sometimes, you don’t need to get a filename; you just need to get a folder name.   If that’s the case, the FileDialog object is just what the doctor ordered.   The following procedure displays a dialog box that allows the user to select a directory.   The selected directory name (or “Canceled”) is then displayed by using the MsgBox function.   ' FileDialog example Sub GetAFolder()   With Application.FileDialog(msoFileDialogFolderPicker)     .InitialFileName = Application.DefaultFilePath &amp; \"\\\"     .Title = \"Please select a location for the backup\"     .Show     If .SelectedItems.Count = 0 Then       MsgBox \"Canceled\"     Else       MsgBox .SelectedItems(1)     End If   End With End Sub   The FileDialog object lets you specify the starting directory by specifying a value for the InitialFileName property.   In this case, the code uses default file path as the starting directory.   Next post will be about VBA UserForms.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/other-dialogs/",
        "teaser": null
      },{
        "title": "VBA UserForms",
        "excerpt":"A UserForm is useful if your VBA macro needs to get information from a user.   For example, your macro may have some options that can be specified in a UserForm.   If only a few pieces of information are required (for example, a Yes/No answer or a text string), one of the techniques I describe in previous articles may do the job.   But if you need to obtain more information, you must create a UserForm.   To create a UserForm, you usually take the following general steps:           Determine how the dialog box will be used and where it will be displayed in your VBA macro.            Activate the VBE and insert a new UserForm object. A UserForm object holds a single UserForm.            Add controls to the UserForm. Controls include items such as text boxes, buttons, check boxes, and list boxes.            Use the Properties window to modify the properties for the controls or for the UserForm itself.            Write event-handler procedures for the controls (for example, a macro that executes when the user clicks a button in the dialog box). These procedures are stored in the Code window for the UserForm object.            Write a procedure (stored in a VBA module) that displays the dialog box to the user.       When you are designing a UserForm, you are creating what developers call the Graphical User Interface (GUI) to your application.   Take some time to consider what your form should look like and how your users are likely to want to interact with the elements on the UserForm.   Try to guide them through the steps they need to take on the form by carefully considering the arrangement and wording of the controls.   Like most things VBA-related, the more you do it, the easier it gets.   Userforms Working   Each dialog box that you create is stored in its own UserForm object — one dialog box per UserForm.   You create and access these UserForms in the Visual Basic Editor.   Inserting a new UserForm   To insert a UserForm object with the following steps:      In the macro, you can insert User form with following 2 ways:           From “Menu Bar” -&gt; “UserForm”            From “Standard Toolbar” by clicking “Insert UserForm”        The VBE insert a new UserForm object with an empty dialog box.      If “Property window” is not available in your macro, press F4 to display “Property window”.   The VBE inserts a new UserForm object, which contains an empty dialog box.   Below figure shows a UserForm — an empty dialog box with some controls in Toolbox.      Adding controls to a UserForm   When you activate a UserForm, the VBE displays the Toolbox in a floating window, as shown in above figure.   You use the tools in the Toolbox to add controls to your UserForm.   If the Toolbox doesn’t appear when you activate your UserForm, choose View -&gt; Toolbox.   To add a control, just click the desired control in the Toolbox and drag it into the dialog box to create the control.   After you add a control, you can move and resize it by using standard techniques.   Below table indicates the various tools, as well as their capabilities.   To determine which tool is which, hover your mouse pointer over the control and read the small pop-up description.                    Controls       What it does                       Label       Shows text                 TextBox       Determines which of the file filters the dialog box displays by default.                 ComboBox       Display a drop-down list.                 ListBox       Display a list of items.                 CheckBox       Useful for On/off or Yes/No options.                 OptionButton       Used in groups; allows the user to select one of several options.                 ToggleButoon       A button that is either on or off.                 Frame       A container for other control.                 CommandButton       A clickable button.                 TabStrip       Display Tabs                 MultiPage       A tabbed container for other objects.                 ScrollBar       A draggable bar.                 SpinButton       A clickable button often used for changing a value.                 Image       Contains an image                 RefEdit       Allows the user to select a range.           Changing properties for a UserForm control   Every control you add to a UserForm has a number of properties that determine how the control looks or behaves.   In addition, the UserForm itsel also has its own set of properties.   You can change these properties with the Properties window.   Below figure shows the properties window when a CommandButton control is selected:      Properties for controls include the following:      Name   Width   Height   Value   Caption   Each control has its own set of properties (although many controls have some common properties). To change a property using the Properties window:      Make sure that the correct control is selected in the UserForm.   Make sure the Properties window is visible (press F4 if it’s not).   In the Properties window, click on the property that you want to change.   Make the change in the right portion of the Properties window.   If you select the UserForm itself (not a control on the UserForm), you can use the Properties window to adjust UserForm properties      Some of the UserForm properties serve as default settings for new controls you drag onto the UserForm. For example, if you change the Font property for a UserForm, controls that you add will use that same font. Controls that are already on the UserForm are not affected.    Viewing the UserForm Code window   Every UserForm object has a Code module that holds the VBA code (the event-handler procedures) executed when the user works with the dialog box.   To view the Code module, press F7.   The Code window is empty until you add some procedures. Press Shift+F7 to return to the dialog box.   Here’s another way to switch between the Code window and the UserForm display:           Use the View Code and View Object buttons in the Project window’s title bar.            Or right-click the UserForm and choose View Code.       If you’re viewing code, double-click the UserForm name in the Project window to return to the UserForm.   Showing the UserForm   You display a UserForm by using the UserForm’s Show method in a VBA procedure.   The macro that displays the dialog box must be in a VBA module — not in the Code window for the UserForm.   The following procedure displays the dialog box named UserForm1:   ' Showing the UserForm Sub ShowDialogBox()   UserForm.Show   'Other statements can go here End Sub   When Solidworks displays the dialog box, the ShowDialogBox macro halts until the user closes the dialog box.   Then VBA executes any remaining statements in the procedure.   Most of the time, you won’t have any more code in the procedure.   Using information from a UserForm   The VBE provides a name for each control you add to a UserForm.   The control’s name corresponds to its Name property.   Use this name to refer to a particular control in your code.   For example, if you add a CheckBox control to a UserForm named UserForm1, the CheckBox control is named CheckBox1 by default.   The following statement makes this control appear with a check mark:   UserForm1.CheckBox1.Value = True   Most of the time, you write the code for a UserForm in the UserForm’s code module.   If that’s the case, you can omit the UserForm object qualifier and write the statement like this:   CheckBox1.Value = True      I recommend that you change the default name the VBE has given to your controls to something more meaningful.    This will sum-up our tutorials on Visual Basic for Application. From now on I will give tutorials on how to use Solidworks commands with the help of VBA Macro.   If you want to know any explaination on any topic related to VBA, please drop a comment and I will try to give it to you.   Thank you!!!!   UPDATE:   I have started VBA UserForm Example in this tutorials lists.   So if you want to learn how I use these Forms, you can watch them in UserForm Example List Post.    ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/userform/",
        "teaser": null
      },{
        "title": "VBA Userforms - Open new Part document",
        "excerpt":"In this post, we learn how can we open a part document from a Visual Basic for Application’s Userform.   For this please we need to do following steps as described below.   Video of Code on YouTube   Please see below video on Solidworks VBA Macro - Open new Part document in Solidwoks VBA Userforms.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.   Create a new macro   1st we need to create a new macro in Solidworks 3D CAD Software.   If you don’t know how to create a new macro in Solidworks, please go to VBA in Solidworks post for this.   This will open a new macro in Visual Basic Editor with some code as shown in below image.      Insert userform in the macro   After this we need to insert a userform in our macro.   For this, select the button shown in below image.      This button is called insert userform.   As the name suggest, function of this button is inserting a userform.      Please note that in a macro we can insert any number of userform as we like. But for this example we insert only 1 userform.    After clicking the insert userform button we get the userform window as shown in below image.      Adding a Button   Now in our userform window, we add a Command Button at center of window.   You can find Command Button highlighted in red in below image.      You can place command button at your desire. I placed it at center of the userform window as shown in below image.      Updating Properties of Command Button and Userform Windows   Now we update some properties of Command Button and Userform Windows for our use.      It is not necessary to update properties but it is a good habit to update them for our purpose.    1st we update the properties of Userform.   In below image, I have shown the properties of Userform1 and update following properties:           Name of Userform            Caption of Userform          Update the value of Name property from UserForm1 to OurWindow.      From Name property, we access the Userform.    Update the value of Caption property from UserForm1 to Our Window.      From Caption property, we update the text appears in the window of our Userform.    Now, we repeat the same process for Command Button.   1st we need to select the Command Button in the user form after that we update same properties of Command Button.           Name of Command Button            Caption of Command Button       Update the value of Name property from CommandButton1 to OpenNewPartButton.      From Name property, we access the Command Button.    Update the value of Caption property from CommandButton1 to Open NewPart Button.      From Caption property, we update the text appears in the Command Button of our Userform.    Add Functionality to Open NewPart Button   To add functionality in our Open NewPart Button, just double click the Open NewPart Button.   This will add give some code behind the designer and opens the code window of Userform designer.   Private Sub OpenNewPartButton_Click()  End Sub   We need to update this code for opening new part after clicking the button.   For this replace all above code with below code.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Private function of Open New Part Button  Private Sub OpenNewPartButton_Click()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default part location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default part template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)      ' Setting Solidworks document to new part document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  End Sub   The above code will open New part document when we click the button.   But first, we need to call the our Userform inside main module.   For this goto main Sub procedure inside the main Module.   Code inside the main Module is as given below.   Dim swApp As Object Sub main()  Set swApp = Application.SldWorks End Sub   To call our Userform, replace above code with below code:   ' Main function of our VBA program Sub main()     ' Calling our window to show     OurWindow.Show End Sub   Above function call our window to appears on screen.   When the window appears on screen, we hit the button.   After hitting the button, the code behind the userform run, which opens a new Part document.   If you want to know more about how we open new part with macro please see Open new Part document.   That’s it for now.   Hope you learn some use of Userforms and by this post you can get the idea how they works.   I will provide more tutorials on using of Userform time to time.   Till then do come to visit this blog.   Till then, Happy learning!!!   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/open-part-from-userform/",
        "teaser": null
      },{
        "title": "VBA Userforms - Open new Assembly and Drawing document",
        "excerpt":"In this post, we learn how can we Open new Assembly and Drawing document from a Visual Basic for Application’s Userform.   For this please we need to do following steps as described below.   Video of Code on YouTube   Please see below video how visually we Open new Assembly and Drawing document in Solidworks VBA macro Userform.        Please note that there are no explanation in the video.   Explanation of each line and why we write code this way is given in this post.   Create a new macro   1st we need to create a new macro in Solidworks 3D CAD Software.   If you don’t know how to create a new macro in Solidworks, please go to VBA in Solidworks post for this.   This will open a new macro in Visual Basic Editor with some code as shown in below image.      Insert userform in the macro   After this we need to insert a userform in our macro.   For this, select the button shown in below image.      This button is called insert userform.   As the name suggest, function of this button is inserting a userform.      Please note that in a macro we can insert any number of userform as we like. But for this example we insert only 1 userform.    After clicking the insert userform button we get the userform window.   Adding Controls into Userform   Now in our userform window, we add following controls:           A ComboBox            A CommandButton       Adding ComboBox   You can find ComboBox option, as highlighted in Red Square in below image.      After adding ComboBox, we get window as shown in below image.      Adding CommandButton   You can find CommandButton option, as highlighted in Red Square in below image.      After adding CommandButton, we get window as shown in below image.      Updating Properties   Now we update some properties of following:           UserForm            ComboBox            CommandButton       Updating Properties of the UserForm   We update following properties of the Userform:           Name of Userform            Caption of Userform       In below image, I have shown the properties of Userform1 and update the properties:      Update the value of Name property from UserForm1 to OpenDocumentWindow.      From Name property, we access the Userform.   Update the value of Caption property from UserForm1 to Open Document.      From Caption property, we update the text appears in the window of our Userform.      Please note that it is not necessary to update properties but it is a good habit to update them for our purpose.    Updating Properties of the ComboBox   Now, we update following property of the ComboBox:      Name of ComboBox   In below image, I have shown the properties of ComboBox1 and update the properties:      Update the value of Name property from ComboBox1 to DocumentTypeComboBox.      From Name property, we access the ComboBox.   Updating Properties of the Command Button   Now, we update following property of the Command Button:           Name of Command Button            Caption of Command Button       In below image, I have shown the properties of CommandButton1 and update the properties:      Update the value of Name property from CommandButton1 to OpenDocumentButton.      From Name property, we access the Command Button.    Update the value of Caption property from CommandButton1 to Open Selected Document.      From Caption property, we update the text appears in the Command Button of our Userform.    Calling UserForm in Main Module   Now, we need to call the our Userform inside main module.   For this goto main Sub procedure inside the main Module.   Code inside the main Module is as given below.   Dim swApp As Object Sub main()  Set swApp = Application.SldWorks End Sub  To call our Userform, replace above code with below code:   ' Main function of our VBA program Sub main()   ' Calling our window to show   OpenDocumentWindow.Show End Sub  Above function call our window to appears on screen.   When the window appears on screen, we 1st select the document we want to open and then hit the button to open selected document.   Adding Document list   Before anything we need to add a list of documents inside our combobox.   From this list, we select the document which we want to open.   In this post, we are listing only “Assembly” and “Drawing” documents.   For “Part” document, I will give you a simple exercise.   To add documents list inside our combobox, we 1st need to go in Code Window of userform.   For this, we need to right click on userform and select “View Code” option.   Please see below image for “how to open code window of userform”.      After selecting “View Code” a Code window appears, which is shown in below image.      Now before adding document list we need to understand one important thing!!!   We want to add document list, when we load our Userform.   For this we need to create an Initialize Function.   Below Code is that Initialize Function which load document lists in our combobox.   ' Call when user load Private Sub UserForm_Initialize()   ' Adding items in Combo Box and also set index to '0'   ' '0' index means by default we can see \"Assembly Document\" as already filled   With DocumentTypeComboBox     .AddItem \"Assembly Document\"    ' Adding Assembly Document in Combo Box     .AddItem \"Drawing Document\"     ' Adding Drawing Document in Combo Box     .ListIndex = 0                  ' Select list index for default value to show in combobox   End With End Sub   Now, above code is fully commented and self explanatory hence I will not explain it.   First Test of Macro   After writing code sample in previous section, we will test if every thing is working correct?   By working correct means:           When we Run macro, is Open Document window appears or not?            If window appears, then combobox has documents listed in it?            If both item listed, then “Assembly document” is showing as pre-filled value or not?            Since we have not given any functionality to “Open Document” button, hence it should not any done anything when clicking!!!       For testing all the above points we need to Run the macro as shown in below image.      After running the window we got a window as shown in below image.      Please do check if your macro is running perfectly till now or not!   If not, then I suggest you to read this article again.   Add Functionality to Open NewPart Button   To add functionality in our Open Selected Button, just double click the Open NewPart Button.   This will add give some code behind the designer and opens the code window of Userform designer.   Private Sub OpenDocumentButton_Click()  End Sub   We need to update this code for opening new part after clicking the button.   For this replace all above code with below code.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Private function of Open New Part Button  Private Sub OpenDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default Assembly location   Dim defaultTemplate As String      If DocumentTypeComboBox.Value = \"Assembly Document\" Then     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)   Else     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)   End If    ' Setting Solidworks document to new Assembly document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Hiding the Window after opening the selected document   OpenDocumentWindow.Hide      ' Reset the Index of Combo Box to \"0\" again   DocumentTypeComboBox.ListIndex = 0      End Sub   Now I have added codes in 2 parts.   In 1st part I added below code lines at top of the code window.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   Please see below image for more reference.      In 2nd part I added OpenDocumentButton_Click function in the code window as shown in below image.      I have already explained code inside OpenDocumentButton_Click function in Open Assembly and Drawing document.   But here, I have added a condition which is shown in Red colored box in below image.      Basically, this condition stated that, if we select “Assembly Document” in combobox, then by clicking “Open Select Document” button our macro open “Assembly” document in Solidworks.   Otherwise, it will always open “Drawing” document in Solidworks.   The above code will open New part document when we click the button.   Run the macro, and check wheather our macro is working correct document or not!!   If not, send your macro and I will guide you in doing it correctly!   Exercise to do   For those who wants to do more I have an exercise!!           Add “Part Document” in ComboBox list.            Make “Part Document” as pre-filled value in ComboBox.            Change the conditional statement, so that it can handle all 3 conditions!!       Send me the Code of macro in my below e-mail and I will verify it.   That’s it for now.   Hope you learn some use of Userforms and by this post you can get the idea how they works.   I will provide more tutorials on using of Userform time to time.   Till then do come to visit this blog and Happy learning!!!   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/open-assembly-and-drawing-from-userform/",
        "teaser": null
      },{
        "title": "VBA Userforms - Testing Open new Assembly and Drawing document",
        "excerpt":"Introduction   In this post, we test our Open new Assembly and Drawing document code sample.   This post is supplement of VBA Userforms - Open new Assembly and Drawing document post.      Please visit above post before this post.    From VBA Userforms - Open new Assembly and Drawing document post we expect following results :           Open Assembly document when we select “Assembly document”.            Open Drawing document when we select “Drawing document”.       When we run our VBA macro we get the expected result.   Now, as a developer, we want to give a thoroughly tested macro/application to our users.   For testing our VBA macro, we apply some checks so that macro perform same at all machine.     Code block to check   Below is code block where we want to apply our check.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Private function of Open New Part Button  Private Sub OpenDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default Assembly location   Dim defaultTemplate As String      If DocumentTypeComboBox.Value = \"Assembly Document\" Then     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)   Else     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)   End If    ' Setting Solidworks document to new Assembly document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Hiding the Window after opening the selected document   OpenDocumentWindow.Hide      ' Reset the Index of Combo Box to \"0\" again   DocumentTypeComboBox.ListIndex = 0      End Sub     Apply check   In above code there is only one check we apply.   We need to check if get the template value or not.   For this, we need to put an If condition before opening a new document.   Please see below code for condition.   ' Checking if we got template path If defaultTemplate = vbNullString Then     ' If template path is empty then show message and exit from procedure.     MsgBox \"Failed to open \" + DocumentTypeComboBox.Value + \" template.\"     Exit Sub End If   In above code, we check if got the template path or not.   If template path is empty then      we show a message to user as show in below image.   we end our sub procedure from here.      After adding our check, procedure has following code.   ' Private function of Open New Part Button Private Sub OpenDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default Assembly location   Dim defaultTemplate As String      If DocumentTypeComboBox.Value = \"Assembly Document\" Then     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)   Else     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)   End If      ' Checking if we got template path   If defaultTemplate = vbNullString Then     ' If template path is empty then show message and exit from procedure.     MsgBox \"Failed to open \" + DocumentTypeComboBox.Value + \" template.\"     Exit Sub   End If    ' Setting Solidworks document to new Assembly document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Hiding the Window aft er opening the selected document   OpenDocumentWindow.Hide      ' Reset the Index of Combo Box to \"0\" again   DocumentTypeComboBox.ListIndex = 0      End Sub     Cause of Error   You might wondering how can we have such error?   We have this error, if the value of templates path is not set in option setting.   For reference please see below image.      As you can see, in my machine these value are already set.   But they are empty in case of fresh installation.   Hence if someone runs this macro on fresh SOLIDWORKS copy, they might get error message which we give.     This is it !!!   I hope this be will helpful to someone!   If you found anything to add or update, please let me know on my e-mail which is given in bottom.   this post helps us to test our Open new Assembly and Drawing document macro.   We will see this type of testing of all our macros which we in this website.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": [],
        "tags": ["VBA Macro Testing"],
        "url": "http://localhost:4000/vba/testing-open-assembly-and-drawing-document-macro/",
        "teaser": null
      },{
        "title": "VBA Userforms - Browse SOLIDWORKS file(s)",
        "excerpt":"Introduction   In this article, we learn how to browse SOLIDWORKS file(s) from a SOLIDWORKS VBA Userform.   In this article, I explain about 2 different methods which are listed below.           From SldWorks object directly.            From Microsoft Excel externally.       Methods from these objects are updated methods, hence use any one of them for browsing SOLIDWORKS file(s).      Creating Userform   1st we need to create a new macro in SOLIDWORKS.   If you don’t know how to create a new macro in Solidworks, please go to VBA in Solidworks post for this.   This opens a Visual Basic Editor with some code as shown in below image.      After this we need to insert a userform in our macro.   For this, select the button shown in below image.      This button is called insert userform.   As the name suggest, function of this button is inserting a userform.      Please note that in a macro we can insert any number of userform as we like. But for this example we insert only 1 userform.    After clicking the insert userform button we get the userform window as shown in above image.     Adding Controls into Userform   Now in our userform window, we add following controls:           A TextBox            A CommandButton       Adding ComboBox   You can find TextBox option, as highlighted in Red Square in below image.      After adding ComboBox, we get window as shown in below image.      Adding CommandButton   You can find CommandButton option, as highlighted in Red Square in below image.      After adding CommandButton, we get window as shown in below image.        Updating Properties   Now we update some properties of following:           Userform            TextBox            CommandButton       Update Userform Properties   We update following properties of the Userform:           Name of Userform            Caption of Userform       In below image, I have shown the properties of Userform1 and update the properties:      Update the value of Name property from UserForm1 to BrowseDocumentWindow.      From Name property, we access the Userform.   Update the value of Caption property from UserForm1 to Browse Document.      From Caption property, we update the text appears in the window of our Userform.      Please note that it is not necessary to update properties but it is a good habit to update them for our purpose.    Update TextBox Properties   We update following property of the TextBox:      Name of TextBox   In below image, I have shown the properties of TextBox and update the properties:      Update the value of Name property from TextBox to SelectedFileTextBox.      From Name property, we access the TextBox properties like Text we want to show.   Update CommandButton Properties   We update following properties of the Command Button:           Name of Command Button            Caption of Command Button       In below image, I have shown the properties of CommandButton1 and update the properties:      Update the value of Name property from CommandButton1 to BrowseDocumentButton.      From Name property, we access the Command Button.    Update the value of Caption property from CommandButton1 to Browse SOLIDOWRKS File(s).      From Caption property, we update the text appears in the Command Button of our Userform.      Call UserForm in Main Module   Now, we need to call the our Userform inside main module.   For this goto main Sub procedure inside the main Module.   Code inside the main Module is as given below.   Dim swApp As Object Sub main()  Set swApp = Application.SldWorks End Sub  To call our Userform, replace above code with below code:   ' Main function of our VBA program Sub main()   ' Calling our window to show   BrowseDocumentWindow.Show End Sub  Above function call our window to appears on screen.   When the window appears on screen, we hit the Browse button to browse SOLIDWORKS File(s).     Add Functionality to Button   To add functionality in our BrowseDocumentButton, just double click the button.   This will add some code behind the designer.   Now open the code window of Userform designer.   Private Sub CommandButton1_Click()  End Sub   We need to update this code for opening new part after clicking the button.   Method 1 - From SldWorks object directly   For this replace all above code with below code.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Private function of Open New Part Button Private Sub BrowseDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Solidworks file filter string   Dim swFilter As String      ' Method parameters   Dim fileName As String   Dim fileConfig As String   Dim fileDispName As String   Dim fileOptions As Long    ' Set filters for different Solidworks files.   swFilter = \"SOLIDWORKS Files (*.sldprt; *.sldasm; *.slddrw)|*.sldprt;*.sldasm;*.slddrw\"      ' Browse and get the Selected file name   fileName = swApp.GetOpenFileName(\"Browse Document\", \"\", swFilter, fileOptions, fileConfig, fileDispName)    ' Show the selected file's full path in text box   SelectedFileTextBox.Text = fileName      End Sub     Understanding Method 1   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   Next is our button click event BrowseDocumentButton_Click procedure.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Solidworks file filter string Dim swFilter As String  ' Method parameters Dim fileName As String Dim fileConfig As String Dim fileDispName As String Dim fileOptions As Long   In above lines of code, we create SOLIDWORKS files filter string and Method parameters.   ' Set filters for different Solidworks files. Filter = \"SOLIDWORKS Files (*.sldprt; *.sldasm; *.slddrw)|*.sldprt;*.sldasm;*.slddrw\"   In above line of code, we set filters for different SOLIDWORKS files.   ' Browse and get the Selected file name fileName = swApp.GetOpenFileName(\"Browse Document\", \"\", swFilter, fileOptions, fileConfig, fileDispName)   For “Browse and get the Selected file name”, we use GetOpenFileName method from Solidworks SldWorks object.   This GetOpenFileName method takes following parameters as explained:           DialogTitle : Title of the dialog.            InitialFileName : Path and file name of the file to open.            FileFilter : File name extension of the file to open.            OpenOptions : Not used.            ConfigName : Name of the configuration.            DisplayName : Recommended file name to use.       After the function complete following are the results:   Return Value:      Path and file name of the file to open.   Below image shows our form in SOLIDWORKS.      Below image shows the opened window.      ' Show the selected file's full path in text box SelectedFileTextBox.Text = fileName   Now we set the value of text box to browsed file name.   Final window of method 1 is shown below/.        Method 2 - From Microsoft Excel externally   Prerequisite:           Office 365            Following below steps carefully       For this method we need to use Microsoft Excel from SOLIDWORKS.   For using Microsoft Excel, we need to add reference files.   Please see following steps for adding reference files:      Select reference option as shown in below image.         This open Reference window as shown in below image.         Now select option given in below images and Press OK after selecting files..      Now, replace code in Add Functionality to Button with below code sample.   Option Explicit  ' Private function of Open New Part Button Private Sub BrowseDocumentButton_Click()        ' Excel object   Dim xlObj As Object      ' File dialog object   Dim fDialog As Object      ' File name sting   Dim strFile As String      ' Create Excel object   Set xlObj = CreateObject(\"Excel.Application\")      ' Create File dialog object by setting option 3   Set fDialog = xlObj.FileDialog(3)      ' Setting different properties of file dialog   With fDialog     .Title = \"Browse Document\"  ' Title of window     .AllowMultiSelect = True    ' Allowing multiple select     .Filters.Clear              ' Clear the filters     .Filters.Add \"SOLIDWORKS Files\", \"*.sldprt; *.sldasm; *.slddrw\"       ' Add filters for Solidworks files       If .Show Then         strFile = .SelectedItems(1)       Else         strFile = vbNullString       End If   End With        ' Show the selected file's full path in text box   SelectedFileTextBox.Text = strFile      End Sub     Understanding Method 2   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   Next is our button click event BrowseDocumentButton_Click procedure.   This procedure hold all the statements (instructions) we give to computer.   ' Excel object Dim xlObj As Object   In this line, we create object for Microsoft Excel Application.   ' File dialog object Dim fDialog As Object  ' File name sting Dim strFile As String   In above lines of code, we create objects for File Dialog and string for file name.   ' Create Excel object Set xlObj = CreateObject(\"Excel.Application\")   In above line of code, we create Microsoft Excel Application and set the value of excel object.   ' Create File dialog object by setting option 3 Set fDialog = xlObj.FileDialog(3)   In above line of code, we create File dialog and set the value of file dialog by FileDialog method.   FileDialog method take 1 parameter enum. Please see below links for more details about FileDialog   Application.FileDialog property (Excel)   MsoFileDialogType enumeration (Office)   ' Setting different properties of file dialog With fDialog   .Title = \"Browse Document\"  ' Title of window   .AllowMultiSelect = True    ' Allowing multiple select   .Filters.Clear              ' Clear the filters   .Filters.Add \"SOLIDWORKS Files\", \"*.sldprt; *.sldasm; *.slddrw\"       ' Add filters for Solidworks files     If .Show Then       strFile = .SelectedItems(1)     ' Select 3rd item from list     Else       strFile = vbNullString     End If End With   In above code we set different properties of File dialog object.           Title : Title of the dialog.            AllowMultiSelect : Allowing multi select of files.            FileFilter : File name extension of the file to open.       If statement shows that, if file dialog is shown then assign the first value to file name string object.   After the function complete following are the results:   Return Value:      Path and file name of the selected file(s).   Below image shows our form in SOLIDWORKS.      Below image shows the opened window.      Below image shows the multi-selection in opened window.      ' Show the selected file's full path in text box SelectedFileTextBox.Text = fileName   Now we set the value of text box to browsed file name.   Final window of method 1 is shown below/.      Final window of both method is same.     Final words   This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you in Browsing SOLIDWORKS file(s) with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/browse-solidworks-file/",
        "teaser": null
      }]

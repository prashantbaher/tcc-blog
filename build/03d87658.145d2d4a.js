(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{152:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,u=s["".concat(i,".").concat(d)]||s[d]||m[d]||o;return n?r.a.createElement(u,c(c({ref:t},b),{},{components:n})):r.a.createElement(u,c({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var b=2;b<o;b++)i[b]=n[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(152)),i={id:"sw-sketch-macro-create-perimeter-circle",title:"Create Perimeter Circle"},c={unversionedId:"solidworks-macros/sw-sketch-macro-create-perimeter-circle",id:"solidworks-macros/sw-sketch-macro-create-perimeter-circle",isDocsHomePage:!1,title:"Create Perimeter Circle",description:"In this post, I tell you about how to create Perimeter Circle through Solidworks VBA Macros in a sketch.",source:"@site/docs\\solidworks-macros\\2019-05-18-create-perimeter-circle.md",slug:"/solidworks-macros/sw-sketch-macro-create-perimeter-circle",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-perimeter-circle",version:"current",sidebar:"swvba",previous:{title:"Create Circle By Radius",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-circle-by-radius"},next:{title:"Create Centerpoint Arc",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-centerpoint-arc"}},l=[{value:"Understanding the Code",id:"understanding-the-code",children:[{value:"NOTE",id:"note",children:[]}]}],b={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this post, I tell you about ",Object(o.b)("em",{parentName:"p"},"how to create Perimeter Circle through Solidworks VBA Macros")," in a sketch."),Object(o.b)("p",null,"The process is identical with previous ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-circle"}),"Solidworks Sketch Macros - Create Circle"))," post."),Object(o.b)("p",null,"In this post, I tell you about ",Object(o.b)("inlineCode",{parentName:"p"},"PerimeterCircle")," method from ",Object(o.b)("strong",{parentName:"p"},"Solidworks")," ",Object(o.b)("inlineCode",{parentName:"p"},"SketchManager")," object."),Object(o.b)("p",null,"This method is ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"most updated"))," method, I found in ",Object(o.b)("em",{parentName:"p"},"Solidworks API Help"),". "),Object(o.b)("p",null,"So ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"use this method"))," if you want to create a new ",Object(o.b)("strong",{parentName:"p"},"Perimeter Circle"),"."),Object(o.b)("p",null,"Below is the ",Object(o.b)("inlineCode",{parentName:"p"},"code")," sample for creating ",Object(o.b)("em",{parentName:"p"},"a Perimeter Circle"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n\n' Creating variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n' Creating variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n' Boolean Variable\nDim BoolStatus As Boolean\n' Creating variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n\n' Main function of our VBA program\nSub main()\n\n    ' Setting Solidworks variable to Solidworks application\n    Set swApp = Application.SldWorks\n    \n    ' Creating string type variable for storing default part location\n    Dim defaultTemplate As String\n    ' Setting value of this string type variable to \"Default part template\"\n    defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n\n    ' Setting Solidworks document to new part document\n    Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n\n    ' Selecting Front Plane\n    BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n    \n    ' Setting Sketch manager for our sketch\n    Set swSketchManager = swDoc.SketchManager\n\n    ' Inserting a sketch into selected plane\n    swSketchManager.InsertSketch True\n    \n    ' Creating object type Variable\n    Dim myPerimeterCircle As Object\n    \n    ' Creating a Perimeter circle\n    Set myPerimeterCircle = swSketchManager.PerimeterCircle(0, 0, 1, 0, 0, 1)\n    \n    ' De-select the circle after creation\n    swDoc.ClearSelection2 True\n    \n    ' Zoom to fit screen in Solidworks Window\n    swDoc.ViewZoomtofit\n\nEnd Sub\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"understanding-the-code"},"Understanding the Code"),Object(o.b)("p",null,"Now let us walk through ",Object(o.b)("em",{parentName:"p"},"each line")," in the above code, and ",Object(o.b)("strong",{parentName:"p"},"understand")," the meaning of every line."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n")),Object(o.b)("p",null,"This line forces us to define every variable we are going to use. "),Object(o.b)("p",null,"For more information please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),Object(o.b)("p",null,"In this line, we are creating a variable which we named as ",Object(o.b)("inlineCode",{parentName:"p"},"swApp")," and the type of this ",Object(o.b)("inlineCode",{parentName:"p"},"swApp")," variable is ",Object(o.b)("inlineCode",{parentName:"p"},"SldWorks.SldWorks"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),Object(o.b)("p",null,"In this line, we are creating a variable which we named as ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc")," and the type of this ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc")," variable is ",Object(o.b)("inlineCode",{parentName:"p"},"SldWorks.ModelDoc2"),"."),Object(o.b)("p",null,"Next is our ",Object(o.b)("inlineCode",{parentName:"p"},"Sub")," procedure named ",Object(o.b)("inlineCode",{parentName:"p"},"main"),". This procedure hold all the ",Object(o.b)("em",{parentName:"p"},"statements (instructions)")," we give to computer."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting Solidworks variable to Solidworks application\nSet swApp = Application.SldWorks\n")),Object(o.b)("p",null,"In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating string type variable for storing default part location\nDim defaultTemplate As String\n' Setting value of this string type variable to \"Default part template\"\ndefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n")),Object(o.b)("p",null,"In 1st statement of above example, we are defining a variable of ",Object(o.b)("inlineCode",{parentName:"p"},"string")," type and named it as ",Object(o.b)("inlineCode",{parentName:"p"},"defaultTemplate"),"."),Object(o.b)("p",null,"This variable ",Object(o.b)("inlineCode",{parentName:"p"},"defaultTemplate"),", hold the location the location of ",Object(o.b)("strong",{parentName:"p"},"Default Part Template"),"."),Object(o.b)("p",null,"In 2nd line of above example. we assign value to our newly define ",Object(o.b)("inlineCode",{parentName:"p"},"defaultTemplate")," variable."),Object(o.b)("p",null,"We assign the value by using a ",Object(o.b)("em",{parentName:"p"},"Method")," named ",Object(o.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()"),". This method is a part of our main Solidworks variable ",Object(o.b)("inlineCode",{parentName:"p"},"swApp"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting Solidworks document to new part document\nSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n")),Object(o.b)("p",null,"In this line, we set the value of our ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc")," variable to new document."),Object(o.b)("p",null,"For ",Object(o.b)("strong",{parentName:"p"},"detailed information")," about these lines please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Boolean Variable\nDim BoolStatus As Boolean\n\n\' Selecting Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(o.b)("p",null,"In 1st line, we create a variable named ",Object(o.b)("inlineCode",{parentName:"p"},"BoolStatus")," as ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," object."),Object(o.b)("p",null,"In next line, we select the ",Object(o.b)("em",{parentName:"p"},"front plane")," by using ",Object(o.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(o.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(o.b)("p",null,"For more information about selection method please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n")),Object(o.b)("p",null,"In above line, we create variable ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchManager")," for ",Object(o.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(o.b)("p",null,"As the name suggested, a Sketch Manager holds variours methods and properties to manage Sketches."),Object(o.b)("p",null,"To see methods and properties related to SketchManager object, please visit ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this page")),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting Sketch manager for our sketch\nSet swSketchManager = swDoc.SketchManager\n")),Object(o.b)("p",null,"In above line, we set the sketch manager variable to current document's sketch manager."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Inserting a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(o.b)("p",null,"In above line, we use ",Object(o.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(o.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(o.b)("inlineCode",{parentName:"p"},"True")," value."),Object(o.b)("p",null,"This method allows us to insert a sketch in selected plane."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating object type Variable\nDim myPerimeterCircle As Object\n    \n' Creating a Perimeter circle\nSet myPerimeterCircle = swSketchManager.PerimeterCircle(0, 0, 1, 0, 0, 1)\n")),Object(o.b)("p",null,"In above sample code, we 1st create a variable named ",Object(o.b)("inlineCode",{parentName:"p"},"myPerimeterCircle")," of type ",Object(o.b)("inlineCode",{parentName:"p"},"Object"),"."),Object(o.b)("p",null,"An ",Object(o.b)("inlineCode",{parentName:"p"},"object")," can hold ",Object(o.b)("strong",{parentName:"p"},"any")," type of ",Object(o.b)("em",{parentName:"p"},"return value"),". In our example, it holds a ",Object(o.b)("em",{parentName:"p"},"3 point Perimeter Arc")," as return value."),Object(o.b)("p",null,"In 2nd line, we set the value of object variable ",Object(o.b)("inlineCode",{parentName:"p"},"myPerimeterCircle"),"."),Object(o.b)("p",null,"We get this value from ",Object(o.b)("inlineCode",{parentName:"p"},"PerimeterCircle")," method which is inside the ",Object(o.b)("inlineCode",{parentName:"p"},"swSketchManager")," variable."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"swSketchManager")," variable is a type of SketchManager, hence we used ",Object(o.b)("inlineCode",{parentName:"p"},"PerimeterCircle")," method from SketchManager."),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"PerimeterCircle")," method takes following parameters as explained:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"X1")," : X coordinate of the first point")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"Y1")," : Y coordinate of the first point")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"X2")," : X coordinate of the second point")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"Y2")," : Y coordinate of the second point")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"X3")," : X coordinate of the third point")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("em",{parentName:"p"},"Y3")," : Y coordinate of the third point"))),Object(o.b)("p",null,"In the above code sample I have used (0, 0) for first point which is at origin."),Object(o.b)("p",null,"For 2nd point on the circle I used (1, 0) which is 1 point distance in X-direction."),Object(o.b)("p",null,"For 3rd point on the circle I used (0, 1) which is 1 point distance in Y-direction."),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"PerimeterCircle")," method returns ",Object(o.b)("em",{parentName:"p"},"3 point Perimeter Arc")," object."),Object(o.b)("hr",null),Object(o.b)("h3",{id:"note"},"NOTE"),Object(o.b)("p",null,"It is ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"very important"))," to remember that, when you give distance or any other numeric value in ",Object(o.b)("strong",{parentName:"p"},"Solidworks API"),", Solidworks takes that numeric value in ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Meter only")),"."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Solidworks API")," does not care about your application's Unit systems."),Object(o.b)("p",null,'For example, I works in ANSI system means "inches" for distance. '),Object(o.b)("p",null,"But when I used Solidworks API through ",Object(o.b)("em",{parentName:"p"},"VBA macros")," or ",Object(o.b)("em",{parentName:"p"},"C#"),", I have to use ",Object(o.b)("strong",{parentName:"p"},"converted")," numeric values."),Object(o.b)("p",null,"Because Solidworks API output the distance in ",Object(o.b)("strong",{parentName:"p"},"Meter")," only; which is not my requirement."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the circle after creation\nswDoc.ClearSelection2 True\n")),Object(o.b)("p",null,"In the this line of code, we de-select the created circle."),Object(o.b)("p",null,"For de-selecting, we use ",Object(o.b)("inlineCode",{parentName:"p"},"ClearSelection2")," method from our Solidworks document variable ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Zoom to fit screen in Solidworks Window\nswDoc.ViewZoomtofit\n")),Object(o.b)("p",null,"In this last line we use ",Object(o.b)("em",{parentName:"p"},"zoom to fit")," command."),Object(o.b)("p",null,"For Zoom to fit, we use ",Object(o.b)("inlineCode",{parentName:"p"},"ViewZoomtofit")," method from our Solidworks document variable ",Object(o.b)("inlineCode",{parentName:"p"},"swDoc"),". "),Object(o.b)("p",null,"Hope this post helps you to ",Object(o.b)("em",{parentName:"p"},"create Circle")," in Sketches with Solidworks VB Macros."),Object(o.b)("p",null,"For more such tutorials on ",Object(o.b)("strong",{parentName:"p"},"Solidworks VBA Macros"),", do come to this blog after sometime."),Object(o.b)("p",null,"Till then, Happy learning!!!"))}p.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{135:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),o=n(6),r=(n(0),n(152)),i={id:"sw-sketch-macro-create-spline",title:"Create a Spline"},l={unversionedId:"solidworks-macros/sw-sketch-macro-create-spline",id:"solidworks-macros/sw-sketch-macro-create-spline",isDocsHomePage:!1,title:"Create a Spline",description:"In this post, I tell you about how to create a Spline through Solidworks VBA Macros in a sketch.",source:"@site/docs\\solidworks-macros\\2019-10-01-create-spline.md",slug:"/solidworks-macros/sw-sketch-macro-create-spline",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-spline",version:"current",sidebar:"swvba",previous:{title:"Create a Point",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-point"},next:{title:"Create a Fillet",permalink:"/docs/solidworks-macros/sw-sketch-macro-create-fillet"}},c=[{value:"Video of Code on YouTube",id:"video-of-code-on-youtube",children:[]},{value:"For Experience Macro Developer",id:"for-experience-macro-developer",children:[]},{value:"For Beginners Macro Developers",id:"for-beginners-macro-developers",children:[{value:"Understanding the Code",id:"understanding-the-code",children:[]},{value:"NOTE",id:"note",children:[]}]},{value:"VBA Language feature used in this post",id:"vba-language-feature-used-in-this-post",children:[]},{value:"Solidworks API Objects",id:"solidworks-api-objects",children:[]}],b={rightToc:c};function s(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this post, I tell you about ",Object(r.b)("em",{parentName:"p"},"how to create a Spline through Solidworks VBA Macros")," in a sketch."),Object(r.b)("p",null,"This post take some functionality from previous ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-line"}),"Sketch - Create Create a Point"))," post."),Object(r.b)("p",null,"Hence if you have not read ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-line"}),"Sketch - Create Create a Point"))," post, then it is ",Object(r.b)("strong",{parentName:"p"},"recommended")," that please read it 1st."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"video-of-code-on-youtube"},"Video of Code on YouTube"),Object(r.b)("p",null,"Please see below video how visually we can create ",Object(r.b)("em",{parentName:"p"},"a Spline")," from ",Object(r.b)("strong",{parentName:"p"},"Solidworks VBA macro"),"."),Object(r.b)("div",{class:"youtube-responsive-container"},Object(r.b)("iframe",{src:"https://www.youtube.com/embed/B_W-f3cqUPM",frameborder:"0",allowfullscreen:!0})),Object(r.b)("p",null,"Please note that there are no explaination given in the video. "),Object(r.b)("p",null,"Explaination of each line and why we write code this way is explained here."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"for-experience-macro-developer"},"For Experience Macro Developer"),Object(r.b)("p",null,"If you are an experience ",Object(r.b)("strong",{parentName:"p"},"Solidworks Macro developer"),", then you are looking for a specific code sample."),Object(r.b)("p",null,"Below is the code for creating ",Object(r.b)("strong",{parentName:"p"},"A Spline")," from ",Object(r.b)("strong",{parentName:"p"},"Solidworks VBA Macro"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n      \n' Set the value of Solidworks Sketch segment by \"CreateSpline2\" method from Solidworks sketch manager\nSet swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)\n")),Object(r.b)("p",null,"For creating a ",Object(r.b)("strong",{parentName:"p"},"Spline")," first you need to ",Object(r.b)("strong",{parentName:"p"},"Create")," a variable of ",Object(r.b)("inlineCode",{parentName:"p"},"SketchSegment")," type."),Object(r.b)("p",null,"After creating variable, you need to set the value of this variable."),Object(r.b)("p",null,"For this you used ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method from ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method set the value of ",Object(r.b)("inlineCode",{parentName:"p"},"SketchSegment")," type variable."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method takes following parameters as explained:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"PointData")," : ",Object(r.b)("em",{parentName:"p"},"Array of X,Y,Z point coordinates to use in creating the spline"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"SimulateNaturalEnds")," : ",Object(r.b)("em",{parentName:"p"},"True to simulate natural ends, false to not simulate natural ends"),"."))),Object(r.b)("p",null,"If you want a more detail explaination then please read further otherwise this will help you to ",Object(r.b)("strong",{parentName:"p"},"Create a Spline From VBA Macro"),"."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"for-beginners-macro-developers"},"For Beginners Macro Developers"),Object(r.b)("p",null,"In this post, I tell you about ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method from ",Object(r.b)("strong",{parentName:"p"},"Solidworks")," ",Object(r.b)("inlineCode",{parentName:"p"},"SketchManager")," object."),Object(r.b)("p",null,"By this method we create ",Object(r.b)("em",{parentName:"p"},"a simple Spline from a sequence of points"),"."),Object(r.b)("p",null,"This method is ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"most updated"))," method, I found in ",Object(r.b)("em",{parentName:"p"},"Solidworks API Help"),". "),Object(r.b)("p",null,"So ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"use this method"))," if you want to create ",Object(r.b)("strong",{parentName:"p"},"a new Spline"),"."),Object(r.b)("p",null,"Below is the ",Object(r.b)("inlineCode",{parentName:"p"},"code")," sample for creating ",Object(r.b)("em",{parentName:"p"},"a Spline"),"."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Please don't get distracted by length of code, I  just want to do everything programatically. So that you have some sort of experience in developing logic."))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n\n' Creating variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n\n' Creating variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n\n' Boolean Variable\nDim BoolStatus As Boolean\n\n' Creating variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n\n' Creating variable for Solidworks Sketch\nDim swSketch As SldWorks.Sketch\n\n' Creating variable for Solidworks Sketch Point\nDim swSketchPoint As SldWorks.SketchPoint\n\n' Creating variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n\n' Main function of our VBA program\nSub main()\n\n  ' Set Solidworks application variable to Solidworks application\n  Set swApp = Application.SldWorks\n  \n  ' Creating string type variable for storing default part location\n  Dim defaultTemplate As String\n  \n  ' Set value of this string type variable to \"Default part template\"\n  defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n\n  ' Set Solidworks document to new part document\n  Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n\n  ' Select Front Plane\n  BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n  \n  ' Set Sketch manager for our sketch\n  Set swSketchManager = swDoc.SketchManager\n  \n  ' Insert a sketch into selected plane\n  swSketchManager.InsertSketch True\n  \n  ' Create integer type local variable\n  Dim i As Integer\n  \n  ' Loop through 0 to 10\n  For i = 0 To 10\n    \n    ' Create integer type variables\n    Dim x, y, z, incrementFactor As Integer\n    \n    ' Set value of incrementFactor\n    incrementFactor = i * 0.5\n    \n    ' Set value of x co-ordinate\n    x = i\n    ' Set value of y co-ordinate\n    y = x + incrementFactor\n    ' Set value of z co-ordinate\n    z = 0\n\n    ' Create a Sketch Point using x, y & z variables\n    Set swSketchPoint = swSketchManager.CreatePoint(x, y, z)\n\n  Next i\n  \n  ' De-select the points after creation\n  swDoc.ClearSelection2 True\n  \n  ' Set Solidworks Sketch variable to active sketch\n  Set swSketch = swSketchManager.ActiveSketch\n  \n  ' Create variant type variable named \"sketchPointArray\"\n  Dim sketchPointArray As Variant\n  \n  ' Get all the points in this active sketch and store them into our variant type variable\n  sketchPointArray = swSketch.GetSketchPoints2()\n  \n  ' Creating a new Collection,\n  ' we use this collecction to store x,y,z co-ordinates of all sketch points\n  Dim pointCollection As New Collection\n  \n  ' Loop through all points in \"sketchPointArray\"\n  For i = 0 To UBound(sketchPointArray)\n    ' Set Solidworks sketch point variable to current point\n    Set swSketchPoint = sketchPointArray(i)\n    \n    ' Add X co-ordinate of current point into collection\n    pointCollection.Add (swSketchPoint.x)\n    \n    ' Add Y co-ordinate of current point into collection\n    pointCollection.Add (swSketchPoint.y)\n    \n    ' Add Z co-ordinate of current point into collection\n    pointCollection.Add (swSketchPoint.z)\n  Next i\n  \n  ' Create an array variable, this is Double type variable\n  Dim point() As Double\n  \n  ' Define the size of array Dynamically\n  ReDim point(0 To pointCollection.Count) As Double\n  \n  ' Loop through the collection we have\n  For i = 0 To (pointCollection.Count - 1)\n    ' Add each item of collection into our array variable\n    point(i) = pointCollection(i + 1)\n  Next i\n  \n  ' Create a local variable name \"pointArray\" of variant type\n  Dim pointArray As Variant\n  \n  ' Set the new created variable equal to point array variable\n  pointArray = point\n  \n  ' Exit the sketch\n  swSketchManager.InsertSketch True\n  \n  ' De-select the sketch\n  swDoc.ClearSelection2 True\n  \n  ' Select Front Plane\n  BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n  \n  ' Insert a sketch into \"Front Plane\"\n  swSketchManager.InsertSketch True\n  \n  ' Set the value of Solidworks Sketch segment by \"CreateSpline2\" method from Solidworks sketch manager\n  Set swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)\n\n  ' De-select the Spline after creation\n  swDoc.ClearSelection2 True\n  \n  ' Zoom to fit screen in Solidworks Window\n  swDoc.ViewZoomtofit2\n\n  ' Exit the sketch\n  swSketchManager.InsertSketch True\n\n  ' Force Re-build the model\n  swDoc.Rebuild (swRebuildOptions_e.swForceRebuildAll)\n\nEnd Sub\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"understanding-the-code"},"Understanding the Code"),Object(r.b)("p",null,"Now let us walk through ",Object(r.b)("em",{parentName:"p"},"each line")," in the above code, and ",Object(r.b)("strong",{parentName:"p"},"understand")," the meaning of every line."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n")),Object(r.b)("p",null,"This line forces us to define every variable we are going to use. "),Object(r.b)("p",null,"For more information please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),Object(r.b)("p",null,"In this line, we are creating a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SldWorks"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),Object(r.b)("p",null,"In this line, we are creating a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.ModelDoc2"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Boolean Variable\nDim BoolStatus As Boolean\n")),Object(r.b)("p",null,"In this line, we create a variable named ",Object(r.b)("inlineCode",{parentName:"p"},"BoolStatus")," as ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," object type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n")),Object(r.b)("p",null,"In above line, we create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"As the name suggested, a ",Object(r.b)("strong",{parentName:"p"},"Sketch Manager")," holds variours methods and properties to manage ",Object(r.b)("em",{parentName:"p"},"Sketches"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"SketchManager")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks Sketch\nDim swSketch As SldWorks.Sketch\n")),Object(r.b)("p",null,"In this line, we are creating a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swSketch")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swSketch")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.Sketch"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketch")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketches"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"Sketch")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketch_members.html?verRedirect=1"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks Sketch Point\nDim swSketchPoint As SldWorks.SketchPoint\n")),Object(r.b)("p",null,"In this line, we are creating a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchPoint")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchPoint")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SketchPoint"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchPoint")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Points"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"SketchPoint")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchPoint_members.html"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n")),Object(r.b)("p",null,"In this line, we are creating a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SketchSegment"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Segments"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this page")),"."),Object(r.b)("p",null,"These all are our global variables."),Object(r.b)("p",null,"As you can see in code sample, they are ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects"),"."),Object(r.b)("p",null,"So basically I group all the ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects")," in one place."),Object(r.b)("p",null,"I have also place ",Object(r.b)("inlineCode",{parentName:"p"},"boolean")," type object at top also, because after certain point we will ",Object(r.b)("em",{parentName:"p"},"need")," this variable frequently."),Object(r.b)("p",null,"Thus, I have started placing it here."),Object(r.b)("p",null,"Next is our ",Object(r.b)("inlineCode",{parentName:"p"},"Sub")," procedure named as ",Object(r.b)("inlineCode",{parentName:"p"},"main"),". This procedure hold all the ",Object(r.b)("em",{parentName:"p"},"statements (instructions)")," we give to computer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting Solidworks variable to Solidworks application\nSet swApp = Application.SldWorks\n")),Object(r.b)("p",null,"In this line, we are setting the value of our Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," which we defined earlier to Solidworks application."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating string type variable for storing default part location\nDim defaultTemplate As String\n\n' Setting value of this string type variable to \"Default part template\"\ndefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n")),Object(r.b)("p",null,"In 1st statement of above example, we are defining a variable of ",Object(r.b)("inlineCode",{parentName:"p"},"string")," type and named it as ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),"."),Object(r.b)("p",null,"This variable ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),", holds the location the location of ",Object(r.b)("strong",{parentName:"p"},"Default Part Template"),"."),Object(r.b)("p",null,"In 2nd line of above example. we assign value to our newly define ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate")," variable."),Object(r.b)("p",null,"We assign the value by using a ",Object(r.b)("em",{parentName:"p"},"Method")," named ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()"),". "),Object(r.b)("p",null,"This method is a part of our main Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting Solidworks document to new part document\nSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n")),Object(r.b)("p",null,"In this line, we set the value of our ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable to new document."),Object(r.b)("p",null,"For ",Object(r.b)("strong",{parentName:"p"},"more detailed information")," about above lines please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post. "),Object(r.b)("p",null,"I have discussed them ",Object(r.b)("strong",{parentName:"p"},"thoroghly")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post, so do checkout this post if you don't understand above code."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Selecting Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(r.b)("p",null,"In above line, we select the ",Object(r.b)("em",{parentName:"p"},"front plane")," by using ",Object(r.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"For more information about selection method please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(r.b)("p",null,"I have discussed about different ",Object(r.b)("em",{parentName:"p"},"Selection methods")," in details in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Soldworks Macros - Selection Methods"))," post, so do visit this post for more ",Object(r.b)("em",{parentName:"p"},"Selection methods"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting Sketch manager for our sketch\nSet swSketchManager = swDoc.SketchManager\n")),Object(r.b)("p",null,"In above line, we set the ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch manager")," variable to current document's sketch manager."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Inserting a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(r.b)("p",null,"In above line, we use ",Object(r.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(r.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(r.b)("inlineCode",{parentName:"p"},"True")," value."),Object(r.b)("p",null,"This method allows us to insert/exit ",Object(r.b)("strong",{parentName:"p"},"a sketch")," in selected plane."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Now I have created a sequence of Points for our Spline.")),Object(r.b)("p",null,"Because if you already have co-ordinates of points in your machine somewhere you can use the approach I shown here to create a Spline."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"I like to save co-ordinates in MS Excel file and then use it."))),Object(r.b)("hr",null),Object(r.b)("h4",{id:"creating-sequence-of-points"},"Creating sequence of Points"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Below code shows how to create Sequence of Points.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create integer type local variable\nDim i As Integer\n\n' Loop through 0 to 10\nFor i = 0 To 10\n  \n  ' Create integer type variables\n  Dim x, y, z, incrementFactor As Integer\n  \n  ' Set value of incrementFactor\n  incrementFactor = i * 0.5\n  \n  ' Set value of x co-ordinate\n  x = i\n  ' Set value of y co-ordinate\n  y = x + incrementFactor\n  ' Set value of z co-ordinate\n  z = 0\n\n  ' Create a Sketch Point using x, y & z variables\n  Set swSketchPoint = swSketchManager.CreatePoint(x, y, z)\n\nNext i\n\n' De-select the points after creation\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Let us understand each line of code and how above Lines of code creates a number of points.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create integer type local variable\nDim i As Integer\n")),Object(r.b)("p",null,"In above line, we create a local variable named ",Object(r.b)("inlineCode",{parentName:"p"},"i")," of ",Object(r.b)("strong",{parentName:"p"},"integer")," type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Looping through 1 to 10\nFor i = 0 To 10\n  \nNext\n")),Object(r.b)("p",null,"In above lines, we create a ",Object(r.b)("inlineCode",{parentName:"p"},"For")," loop."),Object(r.b)("p",null,"This loop iterate the value of ",Object(r.b)("inlineCode",{parentName:"p"},"i")," variable from ",Object(r.b)("strong",{parentName:"p"},"0 -> 10"),"."),Object(r.b)("p",null,"I use max value of ",Object(r.b)("strong",{parentName:"p"},"10"),", because I want to create 10 points."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create integer type variables\nDim x, y, z, incrementFactor As Integer\n\n' Set value of incrementFactor\nincrementFactor = i * 0.5\n\n' Setting values of x, y and z\nx = i\ny = x + incrementFactor\nz = 0\n")),Object(r.b)("p",null,"In above lines, we 1st declare 4 variable ",Object(r.b)("em",{parentName:"p"},"x, y, z and incrementFactor")," of ",Object(r.b)("strong",{parentName:"p"},"integer")," type."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"x, y and z")," are co-ordinates of a single point in ",Object(r.b)("em",{parentName:"p"},"X, Y")," and ",Object(r.b)("em",{parentName:"p"},"Z")," direction."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"incrementFactor")," is the factor by which I want to increase the value of ",Object(r.b)("em",{parentName:"p"},"Y co-ordinate")," of a single point."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set value of incrementFactor\nincrementFactor = i * 0.5\n")),Object(r.b)("p",null,"In above line, I set the value of ",Object(r.b)("em",{parentName:"p"},"incrementFactor"),"."),Object(r.b)("p",null,"This value is ",Object(r.b)("strong",{parentName:"p"},"0.5")," times of value of ",Object(r.b)("inlineCode",{parentName:"p"},"i")," variable."),Object(r.b)("p",null,"Example: ",Object(r.b)("inlineCode",{parentName:"p"},"i = 3")," then ",Object(r.b)("em",{parentName:"p"},"incrementFactor = 3 ")," 0.5 => incrementFactor = 1.5*"),Object(r.b)("p",null,"In next 3 lines, we set the values of ",Object(r.b)("em",{parentName:"p"},"x, y and z"),"."),Object(r.b)("p",null,"For all points, we set the value of ",Object(r.b)("em",{parentName:"p"},"z")," to ",Object(r.b)("strong",{parentName:"p"},"0")," because we want to place our points in ",Object(r.b)("strong",{parentName:"p"},"X-Y plane"),"."),Object(r.b)("p",null,"If the value of ",Object(r.b)("inlineCode",{parentName:"p"},"i = 0"),", then we set the value of ",Object(r.b)("em",{parentName:"p"},"x")," equal to ",Object(r.b)("em",{parentName:"p"},"i"),"."),Object(r.b)("p",null,"This makes ",Object(r.b)("inlineCode",{parentName:"p"},"x = 0")," also."),Object(r.b)("p",null,"Now, we set the value of ",Object(r.b)("em",{parentName:"p"},"y")," which is equal to ",Object(r.b)("strong",{parentName:"p"},"SUM")," of ",Object(r.b)("em",{parentName:"p"},"x")," and ",Object(r.b)("em",{parentName:"p"},"incrementFactor"),"."),Object(r.b)("p",null,"Hence for ",Object(r.b)("em",{parentName:"p"},"i = 0"),", ",Object(r.b)("em",{parentName:"p"},"x = 0"),", ",Object(r.b)("em",{parentName:"p"},"y = 0")," and ",Object(r.b)("em",{parentName:"p"},"incrementFactor = 0"),"."),Object(r.b)("p",null,"For ",Object(r.b)("em",{parentName:"p"},"i = 1"),", ",Object(r.b)("em",{parentName:"p"},"x = 1"),", ",Object(r.b)("em",{parentName:"p"},"y = 1.5")," and ",Object(r.b)("em",{parentName:"p"},"incrementFactor = 0.5"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create a Sketch Point using x, y & z variables\nSet swSketchPoint = swSketchManager.CreatePoint(x, y, z)\n")),Object(r.b)("p",null,"In above line, we create a Point using ",Object(r.b)("inlineCode",{parentName:"p"},"CreatePoint")," function of ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager")," variable with the values of ",Object(r.b)("em",{parentName:"p"},"x, y and z"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the Points after creation\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,"In the this line of code, we de-select the created ",Object(r.b)("em",{parentName:"p"},"Points"),"."),Object(r.b)("p",null,"For de-selecting, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ClearSelection2")," method from our Solidworks document variable ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("hr",null),Object(r.b)("h4",{id:"create-a-collection-of-points-co-ordinates"},"Create a Collection of Points Co-ordinates"),Object(r.b)("p",null,"After creating points, I want to do following things:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Get all points in this sketch")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add co-ordinates of each point into a collection"))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Why I want to do this when I already know co-ordinates of all points in previous section?"))),Object(r.b)("p",null,"It is because I create points from this macro hence I know their co-ordinates."),Object(r.b)("p",null,"I can add them to collection there BUT I want to take this opportunity to show following things:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"How you get points of an Sketch.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"How to create a Collection and Add values in it."))),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Below code shows how to do all those things.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks Sketch variable to active sketch\nSet swSketch = swSketchManager.ActiveSketch\n\n' Create variant type variable named \"sketchPointArray\"\nDim sketchPointArray As Variant\n\n' Get all the points in this active sketch and store them into our variant type variable\nsketchPointArray = swSketch.GetSketchPoints2()\n\n' Creating a new Collection,\n' we use this collecction to store x,y,z co-ordinates of all sketch points\nDim pointCollection As New Collection\n\n' Loop through all points in \"sketchPointArray\"\nFor i = 0 To UBound(sketchPointArray)\n  ' Set Solidworks sketch point variable to current point\n  Set swSketchPoint = sketchPointArray(i)\n  \n  ' Add X co-ordinate of current point into collection\n  pointCollection.Add (swSketchPoint.x)\n  \n  ' Add Y co-ordinate of current point into collection\n  pointCollection.Add (swSketchPoint.y)\n  \n  ' Add Z co-ordinate of current point into collection\n  pointCollection.Add (swSketchPoint.z)\nNext i\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Let us understand each line of code.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks Sketch variable to active sketch\nSet swSketch = swSketchManager.ActiveSketch\n")),Object(r.b)("p",null,"In the above line, I set the value of ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch")," variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketch")," to active sketch."),Object(r.b)("p",null,"For this we use ",Object(r.b)("inlineCode",{parentName:"p"},"ActiveSketch")," method of ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch Manager")," variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager"),"."),Object(r.b)("p",null,"This method give us a ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.Sketch")," type return value which we store into ",Object(r.b)("inlineCode",{parentName:"p"},"swSketch")," variable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variant type variable named \"sketchPointArray\"\nDim sketchPointArray As Variant\n\n' Get all the points in this active sketch and store them into our variant type variable\nsketchPointArray = swSketch.GetSketchPoints2()\n")),Object(r.b)("p",null,"In 1st line of above code, I create a variable ",Object(r.b)("inlineCode",{parentName:"p"},"sketchPointArray"),"."),Object(r.b)("p",null,"This variable is ",Object(r.b)("inlineCode",{parentName:"p"},"Variant")," type variable."),Object(r.b)("p",null,"In 2nd line of above code, I set the value of variable ",Object(r.b)("inlineCode",{parentName:"p"},"sketchPointArray")," using ",Object(r.b)("inlineCode",{parentName:"p"},"GetSketchPoints2()")," method."),Object(r.b)("p",null,"We use ",Object(r.b)("inlineCode",{parentName:"p"},"GetSketchPoints2()")," method from our ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch")," type variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketch"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"GetSketchPoints2()")," method gives us all points in this sketch and we store those points into ",Object(r.b)("inlineCode",{parentName:"p"},"sketchPointArray")," variable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Creating a new Collection,\n' we use this collecction to store x,y,z co-ordinates of all sketch points\nDim pointCollection As New Collection\n")),Object(r.b)("p",null,"In the above line, I create variable ",Object(r.b)("inlineCode",{parentName:"p"},"pointCollection")," of ",Object(r.b)("strong",{parentName:"p"},"Collection")," type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Loop through all points in "sketchPointArray"\nFor i = 0 To UBound(sketchPointArray)\n\nNext i\n')),Object(r.b)("p",null,"In above lines, we create a ",Object(r.b)("inlineCode",{parentName:"p"},"For")," loop."),Object(r.b)("p",null,"This loop iterate the value of ",Object(r.b)("inlineCode",{parentName:"p"},"i")," variable from ",Object(r.b)("strong",{parentName:"p"},"0 -> UBound(sketchPointArray)"),"."),Object(r.b)("p",null,"I use max value of ",Object(r.b)("strong",{parentName:"p"},"UBound(sketchPointArray)"),", because I want to iterate through Maximum number of points we get from the ",Object(r.b)("inlineCode",{parentName:"p"},"GetSketchPoints2()")," method."),Object(r.b)("p",null,"If number of points are other than ",Object(r.b)("em",{parentName:"p"},"10"),", then ",Object(r.b)("inlineCode",{parentName:"p"},"UBound(sketchPointArray)")," method return only that number of points."),Object(r.b)("p",null,"Hence it is ",Object(r.b)("strong",{parentName:"p"},"useful")," to know for future use."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks sketch point variable to current point\nSet swSketchPoint = sketchPointArray(i)\n")),Object(r.b)("p",null,"Now inside, this loop in 1st line we set ",Object(r.b)("em",{parentName:"p"},"Solidworks sketch point")," variable to ",Object(r.b)("strong",{parentName:"p"},"current")," point of ",Object(r.b)("inlineCode",{parentName:"p"},"sketchPointArray"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Add X co-ordinate of current point into collection\npointCollection.Add (swSketchPoint.x)\n\n' Add Y co-ordinate of current point into collection\npointCollection.Add (swSketchPoint.y)\n\n' Add Z co-ordinate of current point into collection\npointCollection.Add (swSketchPoint.z)\n")),Object(r.b)("p",null,"In above 3 lines, we add ",Object(r.b)("em",{parentName:"p"},"X, Y and Z")," co-ordinates of current point into our collection."),Object(r.b)("hr",null),Object(r.b)("h4",{id:"preparing-co-ordinates-of-points"},"Preparing Co-ordinates of Points"),Object(r.b)("p",null,"You know from ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-spline#for-experience-macro-developer"}),"For Experience Macro Developers"))," section, we need an ",Object(r.b)("em",{parentName:"p"},"Array")," of ",Object(r.b)("strong",{parentName:"p"},"PointData"),"."),Object(r.b)("p",null,"This array contains ",Object(r.b)("em",{parentName:"p"},"X, Y and Z")," co-ordinates for Spline Points."),Object(r.b)("p",null,"Now I tried to add ",Object(r.b)("em",{parentName:"p"},"X, Y and Z")," co-ordinates directly into an Array and then use this array to create Spline."),Object(r.b)("p",null,"But it did not work, hence I had to store all ",Object(r.b)("em",{parentName:"p"},"X, Y and Z")," co-ordinates 1st into ",Object(r.b)("strong",{parentName:"p"},"Collection"),"."),Object(r.b)("p",null,"Now I have all co-ordinates in my ",Object(r.b)("strong",{parentName:"p"},"Collection")," and I have to create an ",Object(r.b)("inlineCode",{parentName:"p"},"Array")," for Spline from this ",Object(r.b)("strong",{parentName:"p"},"Collection"),"."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Below code sample show how to prepare Co-ordinate points for Spline"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create an array variable, this is Double type variable\nDim point() As Double\n\n' Define the size of array Dynamically\nReDim point(0 To pointCollection.Count) As Double\n\n' Loop through the collection we have\nFor i = 0 To (pointCollection.Count - 1)\n  ' Add each item of collection into our array variable\n  point(i) = pointCollection(i + 1)\nNext i\n\n' Create a local variable name \"pointArray\" of variant type\nDim pointArray As Variant\n\n' Set the new created variable equal to point array variable\npointArray = point\n\n' Exit the sketch\nswSketchManager.InsertSketch True\n\n' De-select the sketch\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Let us understand each line of above code sample.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create an array variable, this is Double type variable\nDim point() As Double\n\n' Define the size of array Dynamically\nReDim point(0 To pointCollection.Count) As Double\n")),Object(r.b)("p",null,"In above code, 1st line creates an ",Object(r.b)("inlineCode",{parentName:"p"},"Array")," variable. This is ",Object(r.b)("inlineCode",{parentName:"p"},"double")," type variable."),Object(r.b)("p",null,"If you don't know what an array is, then please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-arrays"}),"VBA Arrays"))," post."),Object(r.b)("p",null,"In 2nd line, we define the size of array. This size is ",Object(r.b)("em",{parentName:"p"},"dynamic")," means it ",Object(r.b)("strong",{parentName:"p"},"automatic")," in nature."),Object(r.b)("p",null,"We don't have to give exact value every time, this code adjust the values if there is any change in our ",Object(r.b)("em",{parentName:"p"},"Collection"),"."),Object(r.b)("p",null,"This size of this array is ",Object(r.b)("em",{parentName:"p"},"from")," 0 to Number of Co-ordinates in the collection."),Object(r.b)("p",null,"In our case size of array is ",Object(r.b)("strong",{parentName:"p"},"0 -> 30"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Loop through the collection we have\nFor i = 0 To (pointCollection.Count - 1)\n  ' Add each item of collection into our array variable\n  point(i) = pointCollection(i + 1)\nNext i\n")),Object(r.b)("p",null,"In above code we 1st create a ",Object(r.b)("em",{parentName:"p"},"Loop"),"."),Object(r.b)("p",null,"This ",Object(r.b)("em",{parentName:"p"},"Loop")," iterate ",Object(r.b)("em",{parentName:"p"},"from 0")," to ",Object(r.b)("em",{parentName:"p"},"pointCollection.Count - 1"),"."),Object(r.b)("p",null,"Why ",Object(r.b)("em",{parentName:"p"},"pointCollection.Count - 1")," ? It is because ",Object(r.b)("em",{parentName:"p"},"pointCollection.Count")," starts from ",Object(r.b)("em",{parentName:"p"},"1")," and our loop start with ",Object(r.b)("em",{parentName:"p"},"0"),"."),Object(r.b)("p",null,"Because of additional 1 count in ",Object(r.b)("em",{parentName:"p"},"pointCollection"),", we need to remove 1 from the count."),Object(r.b)("p",null,"Inside this loop, we add every item of ",Object(r.b)("em",{parentName:"p"},"pointCollection")," into our ",Object(r.b)("strong",{parentName:"p"},"point() array"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create a local variable name \"pointArray\" of variant type\nDim pointArray As Variant\n\n' Set the new created variable equal to point array variable\npointArray = point\n")),Object(r.b)("p",null,'In 1st line of above code, we create local variable "pointArray". This variable is ',Object(r.b)("inlineCode",{parentName:"p"},"Variant")," type."),Object(r.b)("p",null,'In 2nd line of above code, we set the value of variable "pointArray" to value of variable "point".'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Exit the sketch\nswSketchManager.InsertSketch True\n\n' De-select the sketch\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,"In 1st line of above code, we Exit the sketch."),Object(r.b)("p",null,"In 2nd line of above code, we De-select the sketch."),Object(r.b)("hr",null),Object(r.b)("h4",{id:"create-spline"},"Create Spline"),Object(r.b)("p",null,"Now we have all information available for creating ",Object(r.b)("strong",{parentName:"p"},"a Spline"),"."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Below code sample shows how to create a Spline.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Select Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n\' Insert a sketch into "Front Plane"\nswSketchManager.InsertSketch True\n\n\' Set the value of Solidworks Sketch segment by "CreateSpline2" method from Solidworks sketch manager\nSet swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)\n\n\' De-select the Spline after creation\nswDoc.ClearSelection2 True\n\n\' Zoom to fit screen in Solidworks Window\nswDoc.ViewZoomtofit2\n\n\' Exit the sketch\nswSketchManager.InsertSketch True\n\n\' Force Re-build the model\nswDoc.Rebuild (swRebuildOptions_e.swForceRebuildAll)\n')),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Let us understand each line of above code sample.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Selecting Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(r.b)("p",null,"In above line, we select the ",Object(r.b)("em",{parentName:"p"},"front plane")," by using ",Object(r.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"For more information about selection method please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(r.b)("p",null,"I have discussed about different ",Object(r.b)("em",{parentName:"p"},"Selection methods")," in details in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Soldworks Macros - Selection Methods"))," post, so do visit this post for more ",Object(r.b)("em",{parentName:"p"},"Selection methods"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Inserting a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(r.b)("p",null,"In above line, we use ",Object(r.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(r.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(r.b)("inlineCode",{parentName:"p"},"True")," value."),Object(r.b)("p",null,"This method allows us to insert/exit ",Object(r.b)("strong",{parentName:"p"},"a sketch")," in selected plane."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Set the value of Solidworks Sketch segment by "CreateSpline2" method from Solidworks sketch manager\nSet swSketchSegment = swSketchManager.CreateSpline2((pointArray), True)\n')),Object(r.b)("p",null,"In above line we set the value of ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch segment variable")," ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment"),"."),Object(r.b)("p",null,"For this we use, ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method from ",Object(r.b)("em",{parentName:"p"},"Solidworks sketch manager variable")," ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager"),"."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method takes following parameters as explained:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"PointData")," : ",Object(r.b)("em",{parentName:"p"},"Array of X,Y,Z point coordinates to use in creating the spline"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"SimulateNaturalEnds")," : ",Object(r.b)("em",{parentName:"p"},"True to simulate natural ends, false to not simulate natural ends"),"."),Object(r.b)("p",null,"Below Image described ",Object(r.b)("strong",{parentName:"p"},"the Parameters for a Spline"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"spline_parameters",src:n(339).default})),Object(r.b)("p",null,"In this ",Object(r.b)("inlineCode",{parentName:"p"},"CreateSpline2")," method, we pass our ",Object(r.b)("inlineCode",{parentName:"p"},"pointArray")," variable as ",Object(r.b)("strong",{parentName:"p"},"PointData"),"."),Object(r.b)("p",null,"We want our spline to simulate natural ends. Hence we ",Object(r.b)("inlineCode",{parentName:"p"},"True")," as second parameter."),Object(r.b)("hr",null),Object(r.b)("h3",{id:"note"},"NOTE"),Object(r.b)("p",null,"It is ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"very important"))," to remember that, when you give distance or any other numeric value in ",Object(r.b)("strong",{parentName:"p"},"Solidworks API"),", Solidworks takes that numeric value in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Meter only")),"."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Solidworks API")," does not care about your application's Unit systems."),Object(r.b)("p",null,"For example, I works in ",Object(r.b)("strong",{parentName:"p"},"ANSI"),' system means "inches" for distance. '),Object(r.b)("p",null,"But when I used Solidworks API through ",Object(r.b)("em",{parentName:"p"},"VBA macros")," or ",Object(r.b)("em",{parentName:"p"},"C#"),", I have to use ",Object(r.b)("strong",{parentName:"p"},"converted")," numeric values."),Object(r.b)("p",null,"Because Solidworks API output the distance in ",Object(r.b)("strong",{parentName:"p"},"Meter")," only; which is not my requirement."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the Spline after creation\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,"In above line, we de-select the created ",Object(r.b)("em",{parentName:"p"},"Spline"),"."),Object(r.b)("p",null,"For de-selecting, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ClearSelection2")," method from our Solidworks document variable ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Zoom to fit screen in Solidworks Window\nswDoc.ViewZoomtofit\n")),Object(r.b)("p",null,"In above line we use ",Object(r.b)("em",{parentName:"p"},"zoom to fit")," command."),Object(r.b)("p",null,"For Zoom to fit, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ViewZoomtofit")," method from our Solidworks document variable ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Exit the sketch\nswSketchManager.InsertSketch True\n")),Object(r.b)("p",null,"In above line, we exit the sketch."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Force Re-build the model\nswDoc.Rebuild (swRebuildOptions_e.swForceRebuildAll)\n")),Object(r.b)("p",null,"In above line, we Force Re-build the model the model."),Object(r.b)("p",null,'For "Force Re-build" we use ',Object(r.b)("strong",{parentName:"p"},"Rebuild")," method from ",Object(r.b)("em",{parentName:"p"},"Solidworks Document variable")," ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("p",null,"In this ",Object(r.b)("strong",{parentName:"p"},"Rebuild")," method, we use ",Object(r.b)("inlineCode",{parentName:"p"},"swRebuildOptions_e.swForceRebuildAll")," option for re-build all."),Object(r.b)("p",null,"This is it !!!"),Object(r.b)("p",null,"It is a BIG post but I tried to explain all."),Object(r.b)("p",null,"If you found anything to add or update, please let me know on my e-mail."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"vba-language-feature-used-in-this-post"},"VBA Language feature used in this post"),Object(r.b)("p",null,"In this post used some features of ",Object(r.b)("strong",{parentName:"p"},"VBA programming language"),"."),Object(r.b)("p",null,"This section of post, has some brief information about the VBA programming language specific features."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"We use ",Object(r.b)("strong",{parentName:"li"},"Option Explicit")," for capturing un-declared variables.")),Object(r.b)("p",null,"If you want to read more about ",Object(r.b)("strong",{parentName:"p"},"Option Explicit")," then please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-variables-decl"}),"Declaring and Scoping of Variables")),"."),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Then we create ",Object(r.b)("strong",{parentName:"li"},"variable")," for different data types.")),Object(r.b)("p",null,"If you don't know about them, then please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-variables"}),"Variables"))," and ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-prog-concept#data-types-in-vba"}),"Data-types"))," posts of this blog."),Object(r.b)("p",null,"These posts will help you to understand what ",Object(r.b)("strong",{parentName:"p"},"Variables")," are and how to use them."),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"Then we create ",Object(r.b)("strong",{parentName:"li"},"main Sub procedure")," for our macro.")),Object(r.b)("p",null,"If you don't know about the ",Object(r.b)("strong",{parentName:"p"},"Sub procedure"),", then I suggest you to visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-procedures"}),"VBA Sub and Function Procedures"))," and ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-procedures-exec"}),"Executing Sub and Function Procedures"))," posts of this blog."),Object(r.b)("p",null,"These posts will help you to understand what ",Object(r.b)("strong",{parentName:"p"},"Procedures")," are and how to use them."),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"In most part we create some variables and set their values. We set those values by using some ",Object(r.b)("strong",{parentName:"li"},"functions")," provided from objects.")),Object(r.b)("p",null,"If you don't know about the ",Object(r.b)("strong",{parentName:"p"},"functions"),", then you should visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-functions"}),"VBA Functions"))," and ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-functions-adv"}),"VBA Functions that do more"))," posts of this blog."),Object(r.b)("p",null,"These posts will help you to understand what ",Object(r.b)("strong",{parentName:"p"},"functions")," are and how to use them."),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"For creating a sequence of points and data for Spline, we use a ",Object(r.b)("strong",{parentName:"li"},"For-Next loop"),". We use a loop to set values of x, y and z co-ordinates of each points.")),Object(r.b)("p",null,"If you don't know about the ",Object(r.b)("strong",{parentName:"p"},"For-Next loop"),", then you should visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"../vba/vba-looping"}),"VBA Looping"))," post of this blog."),Object(r.b)("p",null,"This posts will help you to understand what ",Object(r.b)("strong",{parentName:"p"},"For-Next loop")," are and how to use them."),Object(r.b)("ol",{start:6},Object(r.b)("li",{parentName:"ol"},"For storing co-ordinates of points we use ",Object(r.b)("strong",{parentName:"li"},"Collection"),". In an ",Object(r.b)("strong",{parentName:"li"},"Collection"),", we store objects or data.")),Object(r.b)("p",null,"This is very helpful and important language feature."),Object(r.b)("p",null,"If you don't know about the ",Object(r.b)("strong",{parentName:"p"},"Collection"),", then you should visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/concepts/collections"}),"Collections (Visual Basic)"))," from ",Object(r.b)("strong",{parentName:"p"},"Microsoft Official Document Website"),"."),Object(r.b)("p",null,"This will help you to understand what ",Object(r.b)("strong",{parentName:"p"},"Collection")," are and how to use them."),Object(r.b)("ol",{start:7},Object(r.b)("li",{parentName:"ol"},"For creating Spline we use an ",Object(r.b)("strong",{parentName:"li"},"Array"),". An ",Object(r.b)("strong",{parentName:"li"},"Array")," is similar to ",Object(r.b)("strong",{parentName:"li"},"Collection"),", in which we store objects or data.")),Object(r.b)("p",null,"But Array is more basic version actually Array is a basic programming feature and used frequently ",Object(r.b)("em",{parentName:"p"},"C and C++ programming languages"),"."),Object(r.b)("p",null,"This is also very helpful and important language feature."),Object(r.b)("p",null,"If you don't know about the ",Object(r.b)("strong",{parentName:"p"},"Array"),", then you should visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/index"}),"Arrays in Visual Basic"))," from ",Object(r.b)("strong",{parentName:"p"},"Microsoft Official Document Website"),"."),Object(r.b)("p",null,"This will help you to understand what ",Object(r.b)("strong",{parentName:"p"},"Array")," are and how to use them."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"solidworks-api-objects"},"Solidworks API Objects"),Object(r.b)("p",null,"In this post, for creating a ",Object(r.b)("strong",{parentName:"p"},"Point"),", we use ",Object(r.b)("em",{parentName:"p"},"Solidworks API objects and their methods"),"."),Object(r.b)("p",null,"This section contains the list of all ",Object(r.b)("strong",{parentName:"p"},"Solidworks Objects")," used in this post."),Object(r.b)("p",null,"I have also attached links of these ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects")," in ",Object(r.b)("strong",{parentName:"p"},"API Help website"),"."),Object(r.b)("p",null,"If you want to explore those objects, you can use these links."),Object(r.b)("p",null,"These Solidworks API Objects are listed below:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solidworks Application Object"))),Object(r.b)("p",null,"If you want explore ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(r.b)("strong",{parentName:"p"},"Solidworks Application Object")," object you can visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISldWorks_members.html"}),"this link")),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solidworks Document Object"))),Object(r.b)("p",null,"If you want explore ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(r.b)("strong",{parentName:"p"},"Solidworks Document Object")," object you can visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IModelDoc2_members.html"}),"this link")),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solidworks Sketch Manager Object"))),Object(r.b)("p",null,"If you want explore ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Manager Object")," you can visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this link")),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solidworks Sketches Object"))),Object(r.b)("p",null,"If you want explore ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketches Object")," you can visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketch_members.html?verRedirect=1"}),"this link")),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solidworks Sketch Point Object"))),Object(r.b)("p",null,"If you want explore ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Point Object")," you can visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchPoint_members.html"}),"this link")),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Solidworks Sketch Segment Object"))),Object(r.b)("p",null,"If you want explore ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Properties and Methods/Functions"))," of ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Segment Object")," you can visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this link")),"."),Object(r.b)("hr",null),Object(r.b)("p",null,"Hope this post helps you to ",Object(r.b)("em",{parentName:"p"},"create a Spline")," in Sketches with Solidworks VB Macros."),Object(r.b)("p",null,"For more such tutorials on ",Object(r.b)("strong",{parentName:"p"},"Solidworks VBA Macros"),", do come to this blog after sometime."),Object(r.b)("p",null,"Till then, Happy learning!!! "))}s.isMDXComponent=!0},152:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var b=o.a.createContext({}),s=function(e){var t=o.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,u=p["".concat(i,".").concat(d)]||p[d]||m[d]||r;return n?o.a.createElement(u,l(l({ref:t},b),{},{components:n})):o.a.createElement(u,l({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var b=2;b<r;b++)i[b]=n[b];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},339:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/spline_parameters-32e91cd90eb4dc7e4ac1b5fa79a2d1b0.png"}}]);
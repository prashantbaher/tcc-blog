(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(2),o=n(6),r=(n(0),n(152)),i={id:"sw-sketch-macro-add-dimension-sketch-entities",title:"Add dimension to Sketch Entities"},l={unversionedId:"solidworks-macros/sw-sketch-macro-add-dimension-sketch-entities",id:"solidworks-macros/sw-sketch-macro-add-dimension-sketch-entities",isDocsHomePage:!1,title:"Add dimension to Sketch Entities",description:"In this post, I tell you about how to Add dimension to Sketch Entities using Solidworks VBA Macros in a Sketch.",source:"@site/docs\\solidworks-macros\\2020-09-29-add-dimension-methods.md",slug:"/solidworks-macros/sw-sketch-macro-add-dimension-sketch-entities",permalink:"/docs/solidworks-macros/sw-sketch-macro-add-dimension-sketch-entities",version:"current",sidebar:"swvba",previous:{title:"Split Open/Closed Sketch Entities",permalink:"/docs/solidworks-macros/sw-sketch-macro-split-sketch-entities"}},b=[{value:"Method From <code>ModelDoc2</code> object",id:"method-from-modeldoc2-object",children:[{value:"Understanding <code>ModelDoc2</code> object method",id:"understanding-modeldoc2-object-method",children:[]}]},{value:"Method From <code>ModelDocExtension</code> object",id:"method-from-modeldocextension-object",children:[{value:"Understanding <code>ModelDocExtension</code> object method",id:"understanding-modeldocextension-object-method",children:[]}]}],c={rightToc:b};function s(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this post, I tell you about ",Object(r.b)("strong",{parentName:"p"},"how to Add dimension to Sketch Entities using Solidworks VBA Macros")," in a Sketch."),Object(r.b)("p",null,"In this post, I explain about ",Object(r.b)("strong",{parentName:"p"},"2 different methods")," from which are listed below."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"From ",Object(r.b)("inlineCode",{parentName:"p"},"ModelDoc2")," object")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"From ",Object(r.b)("inlineCode",{parentName:"p"},"ModelDocExtension")," object"))),Object(r.b)("p",null,"Methods from these objects are ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"updated"))," methods, hence ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"use any one of them"))," for adding dimension."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"method-from-modeldoc2-object"},"Method From ",Object(r.b)("inlineCode",{parentName:"h2"},"ModelDoc2")," object"),Object(r.b)("p",null,"Below is the ",Object(r.b)("inlineCode",{parentName:"p"},"code")," sample to ",Object(r.b)("em",{parentName:"p"},"Add dimension to Sketch Entities using ",Object(r.b)("inlineCode",{parentName:"em"},"ModelDoc2")," object's ",Object(r.b)("inlineCode",{parentName:"em"},"AddDimension2")," method"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n\n' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n\n' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n\n' Boolean Variable\nDim BoolStatus As Boolean\n\n' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n\n' Create Variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n\n' Main function of our VBA program\nSub main()\n\n  ' Set Solidworks variable to Solidworks application\n  Set swApp = Application.SldWorks\n  \n  ' Create string type variable for storing default part location\n  Dim defaultTemplate As String\n\n  ' Set value of this string type variable to \"Default part template\"\n  defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n\n  ' Set Solidworks document to new part document\n  Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n  \n  '-----------------------UNIT CONVERSION----------------------------------------\n\n  ' Local variables used as Conversion Factors\n  Dim LengthConversionFactor As Double\n  Dim AngleConversionFactor As Double\n  \n  ' Use a Select Case, to get the length of active Unit and set the different factors\n  Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n    \n    Case swMETER    ' If length is in Meter\n      LengthConversionFactor = 1\n      AngleConversionFactor = 1\n    \n    Case swMM       ' If length is in MM\n      LengthConversionFactor = 1 / 1000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swCM       ' If length is in CM\n      LengthConversionFactor = 1 / 100\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swINCHES   ' If length is in INCHES\n      LengthConversionFactor = 1 * 0.0254\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEET     ' If length is in FEET\n      LengthConversionFactor = 1 * (0.0254 * 12)\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEETINCHES     ' If length is in FEET & INCHES\n      LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swANGSTROM        ' If length is in ANGSTROM\n      LengthConversionFactor = 1 / 10000000000#\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swNANOMETER       ' If length is in NANOMETER\n      LengthConversionFactor = 1 / 1000000000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swMICRON       ' If length is in MICRON\n      LengthConversionFactor = 1 / 1000000\n      AngleConversionFactor = 1 * 0.01745329\n  End Select\n\n  '----------------------------------------------------------------\n\n  ' Select Front Plane\n  BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n  ' Set Sketch manager for our sketch\n  Set swSketchManager = swDoc.SketchManager\n\n  ' Insert a sketch into selected plane\n  swSketchManager.InsertSketch True\n  \n  ' Create a circle of diameter 10\n  Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)\n  \n  ' Disable dimension input box before adding dimension\n  swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False\n  \n  ' Add dimension to circle\n  swDoc.AddDimension2 10 * LengthConversionFactor, 10 * LengthConversionFactor, 0\n  \n  ' Enable dimension input box after adding dimension\n  swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True\n  \n  ' De-select all after creation\n  swDoc.ClearSelection2 True\n  \n  ' Show Front View after Circular Sketch Pattern\n  swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView\n  \n  ' Zoom to fit screen in Solidworks Window\n  swDoc.ViewZoomtofit2\n  \nEnd Sub\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"understanding-modeldoc2-object-method"},"Understanding ",Object(r.b)("inlineCode",{parentName:"h3"},"ModelDoc2")," object method"),Object(r.b)("p",null,"Now let us walk through ",Object(r.b)("strong",{parentName:"p"},"each line")," in the above code, and ",Object(r.b)("strong",{parentName:"p"},"understand")," the meaning and purpose of every line."),Object(r.b)("p",null,"I also give some link so that you can go through them if there are anything I explained in ",Object(r.b)("strong",{parentName:"p"},"previous posts"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n")),Object(r.b)("p",null,"This line forces us to define every variable we are going to use. "),Object(r.b)("p",null,"For more information please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),Object(r.b)("p",null,"In this line, we create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SldWorks"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),Object(r.b)("p",null,"In this line, we create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.ModelDoc2"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Boolean Variable\nDim BoolStatus As Boolean\n")),Object(r.b)("p",null,"In this line, we create a variable named ",Object(r.b)("inlineCode",{parentName:"p"},"BoolStatus")," as ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," object type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n")),Object(r.b)("p",null,"In above line, we create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"As the name suggested, a ",Object(r.b)("strong",{parentName:"p"},"Sketch Manager")," holds variours methods and properties to manage ",Object(r.b)("em",{parentName:"p"},"Sketches"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"SketchManager")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n")),Object(r.b)("p",null,"In this line, we Create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SketchSegment"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Segments"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this page")),"."),Object(r.b)("p",null,"These all are our global variables."),Object(r.b)("p",null,"As you can see in code sample, they are ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects"),"."),Object(r.b)("p",null,"So basically I group all the ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects")," in one place."),Object(r.b)("p",null,"I have also place ",Object(r.b)("inlineCode",{parentName:"p"},"boolean")," type object at top also, because after certain point we will ",Object(r.b)("em",{parentName:"p"},"need")," this variable frequently."),Object(r.b)("p",null,"Thus, I have started placing it here."),Object(r.b)("p",null,"Next is our ",Object(r.b)("inlineCode",{parentName:"p"},"Sub")," procedure which has name of ",Object(r.b)("inlineCode",{parentName:"p"},"main"),". "),Object(r.b)("p",null,"This procedure hold all the ",Object(r.b)("em",{parentName:"p"},"statements (instructions)")," we give to computer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks variable to Solidworks application\nSet swApp = Application.SldWorks\n")),Object(r.b)("p",null,"In this line, we set the value of our Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"; which we define earlier; to Solidworks application."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create string type variable for storing default part location\nDim defaultTemplate As String\n' Set value of this string type variable to \"Default part template\"\ndefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n")),Object(r.b)("p",null,"In 1st statement of above example, we are defining a variable of ",Object(r.b)("inlineCode",{parentName:"p"},"string")," type and named it as ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),"."),Object(r.b)("p",null,"This variable ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),", hold the location the location of ",Object(r.b)("strong",{parentName:"p"},"Default Part Template"),"."),Object(r.b)("p",null,"In 2nd line of above example. we assign value to our newly define ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate")," variable."),Object(r.b)("p",null,"We assign the value by using a ",Object(r.b)("em",{parentName:"p"},"Method")," named ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()"),". "),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()")," method is a part of our main Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks document to new part document\nSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n")),Object(r.b)("p",null,"In this line, we set the value of our ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable to new document."),Object(r.b)("p",null,"For ",Object(r.b)("strong",{parentName:"p"},"detailed information")," about these lines please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("p",null,"I have discussed them ",Object(r.b)("strong",{parentName:"p"},"thoroghly")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post, so do checkout that post if you want to understand above code in more detail."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"'-----------------------UNIT CONVERSION----------------------------------------\n\n' Local variables used as Conversion Factors\nDim LengthConversionFactor As Double\nDim AngleConversionFactor As Double\n\n' Use a Select Case, to get the length of active Unit and set the different factors\nSelect Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n  \n  Case swMETER    ' If length is in Meter\n    LengthConversionFactor = 1\n    AngleConversionFactor = 1\n  \n  Case swMM       ' If length is in MM\n    LengthConversionFactor = 1 / 1000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swCM       ' If length is in CM\n    LengthConversionFactor = 1 / 100\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swINCHES   ' If length is in INCHES\n    LengthConversionFactor = 1 * 0.0254\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEET     ' If length is in FEET\n    LengthConversionFactor = 1 * (0.0254 * 12)\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEETINCHES     ' If length is in FEET & INCHES\n    LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swANGSTROM        ' If length is in ANGSTROM\n    LengthConversionFactor = 1 / 10000000000#\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swNANOMETER       ' If length is in NANOMETER\n    LengthConversionFactor = 1 / 1000000000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swMICRON       ' If length is in MICRON\n    LengthConversionFactor = 1 / 1000000\n    AngleConversionFactor = 1 * 0.01745329\nEnd Select\n\n'----------------------------------------------------------------\n")),Object(r.b)("p",null,"Above code sample shows how to ",Object(r.b)("strong",{parentName:"p"},"fix Solidworks API Unit issue"),". "),Object(r.b)("p",null,"We ",Object(r.b)("em",{parentName:"p"},"1st")," get the ",Object(r.b)("em",{parentName:"p"},"current unit")," of the part and apply the ",Object(r.b)("em",{parentName:"p"},"switch")," statements to update our ",Object(r.b)("em",{parentName:"p"},"Length and Angle Conversion factors"),". "),Object(r.b)("p",null,"I have already explained in detail about ",Object(r.b)("strong",{parentName:"p"},"Fixing Solidworks API Unit Issue")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-fix-unit-issue"}),"Fix Unit Issue"))," blog post. "),Object(r.b)("p",null,"Do checkout above post for Fixing Solidworks API Issue."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Select Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(r.b)("p",null,"In above line, we select the ",Object(r.b)("em",{parentName:"p"},"front plane")," by using ",Object(r.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"For more information about selection method please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch manager for our sketch\nSet swSketchManager = swDoc.SketchManager\n")),Object(r.b)("p",null,"In above line, we set the ",Object(r.b)("em",{parentName:"p"},"Sketch manager")," variable to ",Object(r.b)("em",{parentName:"p"},"current document's sketch manager"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Insert a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(r.b)("p",null,"In above line, we use ",Object(r.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(r.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(r.b)("inlineCode",{parentName:"p"},"True")," value."),Object(r.b)("p",null,"This method allows us to insert a sketch in selected plane."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create a circle of diameter 10\nSet swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)\n")),Object(r.b)("p",null,"In above line, we set the value of Solidworks Sketch Segment variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," by ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method from ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method creates ",Object(r.b)("em",{parentName:"p"},"a Circle"),' between "2 given point distance as diameter".'),Object(r.b)("p",null,"For more information about ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method, you can read my ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-circle"}),"Solidworks Macro - Create Circle From VBA Macro"))," post."),Object(r.b)("p",null,"That post describe all the parameters we need for this ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method in details."),Object(r.b)("p",null,"In above line, we create a Circle with:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Circle Centerpoint")," : At origin i.e. ",Object(r.b)("em",{parentName:"p"},"(0, 0, 0)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Circle Diameter")," : ",Object(r.b)("strong",{parentName:"p"},"10")," unit length"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Disable dimension input box before adding dimension\nswApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False\n")),Object(r.b)("p",null,"In above line of code, we ",Object(r.b)("strong",{parentName:"p"},"Disable")," dimension input box before adding dimension."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Add dimension to circle\nswDoc.AddDimension2 10 * LengthConversionFactor, 10 * LengthConversionFactor, 0\n")),Object(r.b)("p",null,'For "',Object(r.b)("strong",{parentName:"p"},"adding dimension"),'" to an sketch entity, we need ',Object(r.b)("inlineCode",{parentName:"p"},"AddDimension2")," method from ",Object(r.b)("strong",{parentName:"p"},"Solidworks")," ",Object(r.b)("inlineCode",{parentName:"p"},"ModelDoc2")," object."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"AddDimension2")," method takes following parameters as explained:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"X")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of Dimension text location in meters."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Y")," : ",Object(r.b)("em",{parentName:"p"},"y coordinate of Dimension text location in meters."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Z")," : ",Object(r.b)("em",{parentName:"p"},"z coordinate of Dimension text location in meters.")))),Object(r.b)("p",null,"After the function complete following are the results:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Return Value"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"IDisplayDimension"),": ",Object(r.b)("em",{parentName:"li"},"Newly created dimension."))),Object(r.b)("p",null,"In our code, I have used following values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"X")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of Dimension text location = `10 ")," LengthConversionFactor`.*")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Y")," : ",Object(r.b)("em",{parentName:"p"},"y coordinate of Dimension text location = `10 ")," LengthConversionFactor`.*")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Z")," : ",Object(r.b)("em",{parentName:"p"},"z coordinate of Dimension text location = ",Object(r.b)("inlineCode",{parentName:"em"},"0"),".")))),Object(r.b)("p",null,"Below image shows before and after Circular Sketch Pattern."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Before Circular Sketch Pattern")),Object(r.b)("p",null,Object(r.b)("img",{alt:"before-add-dimension",src:n(197).default})),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"After Circular Sketch Pattern")),Object(r.b)("p",null,Object(r.b)("img",{alt:"after-add-dimension",src:n(198).default})),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Enable dimension input box after adding dimension\nswApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True\n")),Object(r.b)("p",null,"In above line of code, we ",Object(r.b)("strong",{parentName:"p"},"Enable")," dimension input box after adding dimension."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the Sketch after creation\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,"In the above line of code, we deselect the ",Object(r.b)("strong",{parentName:"p"},"Sketch")," after the ",Object(r.b)("em",{parentName:"p"},"Linear Sketch Pattern")," operation."),Object(r.b)("p",null,"For de-selecting, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ClearSelection2")," method from our Solidworks document name ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Show Front View after Linear Sketch Pattern\nswDoc.ShowNamedView2 "", swStandardViews_e.swFrontView\n')),Object(r.b)("p",null,"In the above line of code, we update the ",Object(r.b)("em",{parentName:"p"},"view orientation")," to ",Object(r.b)("strong",{parentName:"p"},"Front View"),"."),Object(r.b)("p",null,"In my machine, after inserting a sketch view orientation does not changed."),Object(r.b)("p",null,"Because of this I have to update the view to ",Object(r.b)("strong",{parentName:"p"},"Front view"),"."),Object(r.b)("p",null,"For showing ",Object(r.b)("strong",{parentName:"p"},"Front View")," we used ",Object(r.b)("inlineCode",{parentName:"p"},"ShowNamedView2")," method from our Solidworks document name ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("p",null,"This method takes 2 parameter described as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"VName")," : Name of the view to display or an empty string to use ViewId instead")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"ViewId")," : ID of the view to display as defined by ",Object(r.b)("inlineCode",{parentName:"p"},"swStandardViews_e")," or -1 to use the ",Object(r.b)("strong",{parentName:"p"},"VName")," argument instead."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you specify both ",Object(r.b)("strong",{parentName:"p"},"VName")," and ",Object(r.b)("strong",{parentName:"p"},"ViewId"),", then ",Object(r.b)("strong",{parentName:"p"},"ViewId")," takes precedence if the two arguments do not resolve to the same view."))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"swStandardViews_e")," has following Standard View Types:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swBackView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swBottomView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swDimetricView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swFrontView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swIsometricView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swLeftView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swRightView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swTopView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swExtendetricView")))),Object(r.b)("p",null,"In our code, we did not use ",Object(r.b)("strong",{parentName:"p"},"VName")," instead I used ",Object(r.b)("em",{parentName:"p"},"empty string")," in form of ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},'""'))," symbol."),Object(r.b)("p",null,"I used ",Object(r.b)("strong",{parentName:"p"},"ViewId")," value to specify view and used ",Object(r.b)("inlineCode",{parentName:"p"},"swStandardViews_e.swFrontView")," value to use ",Object(r.b)("em",{parentName:"p"},"Standard Front View"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Zoom to fit screen in Solidworks Window\nswDoc.ViewZoomtofit\n")),Object(r.b)("p",null,"In this last line we use ",Object(r.b)("em",{parentName:"p"},"zoom to fit")," command."),Object(r.b)("p",null,"For Zoom to fit, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ViewZoomtofit")," method from our Solidworks document variable ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"method-from-modeldocextension-object"},"Method From ",Object(r.b)("inlineCode",{parentName:"h2"},"ModelDocExtension")," object"),Object(r.b)("p",null,"Below is the ",Object(r.b)("inlineCode",{parentName:"p"},"code")," sample to ",Object(r.b)("em",{parentName:"p"},"Add dimension to Sketch Entities using ",Object(r.b)("inlineCode",{parentName:"em"},"ModelDocExtension")," object's ",Object(r.b)("inlineCode",{parentName:"em"},"AddDimension")," method")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n\n' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n\n' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n\n' Boolean Variable\nDim BoolStatus As Boolean\n\n' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n\n' Create Variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n\n' Create Variable for Solidworks Display Dimension\nDim swDisplayDim As SldWorks.DisplayDimension\n\n' Main function of our VBA program\nSub main()\n\n  ' Set Solidworks variable to Solidworks application\n  Set swApp = Application.SldWorks\n  \n  ' Create string type variable for storing default part location\n  Dim defaultTemplate As String\n\n  ' Set value of this string type variable to \"Default part template\"\n  defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n\n  ' Set Solidworks document to new part document\n  Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n  \n  '-----------------------UNIT CONVERSION----------------------------------------\n\n  ' Local variables used as Conversion Factors\n  Dim LengthConversionFactor As Double\n  Dim AngleConversionFactor As Double\n  \n  ' Use a Select Case, to get the length of active Unit and set the different factors\n  Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n    \n    Case swMETER    ' If length is in Meter\n      LengthConversionFactor = 1\n      AngleConversionFactor = 1\n    \n    Case swMM       ' If length is in MM\n      LengthConversionFactor = 1 / 1000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swCM       ' If length is in CM\n      LengthConversionFactor = 1 / 100\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swINCHES   ' If length is in INCHES\n      LengthConversionFactor = 1 * 0.0254\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEET     ' If length is in FEET\n      LengthConversionFactor = 1 * (0.0254 * 12)\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEETINCHES     ' If length is in FEET & INCHES\n      LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swANGSTROM        ' If length is in ANGSTROM\n      LengthConversionFactor = 1 / 10000000000#\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swNANOMETER       ' If length is in NANOMETER\n      LengthConversionFactor = 1 / 1000000000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swMICRON       ' If length is in MICRON\n      LengthConversionFactor = 1 / 1000000\n      AngleConversionFactor = 1 * 0.01745329\n  End Select\n\n  '----------------------------------------------------------------\n\n  ' Select Front Plane\n  BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n  ' Set Sketch manager for our sketch\n  Set swSketchManager = swDoc.SketchManager\n\n  ' Insert a sketch into selected plane\n  swSketchManager.InsertSketch True\n  \n  ' Create a circle of diameter 10\n  Set swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)\n  \n  ' Disable dimension input box before adding dimension\n  swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False\n  \n  ' Add dimension to circle\n  Set swDisplayDim = swDoc.Extension.AddDimension(0, 12 * LengthConversionFactor, 0, swSmartDimensionDirection_e.swSmartDimensionDirection_Right)\n  \n  ' Enable dimension input box after adding dimension\n  swApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True\n  \n  ' De-select all after creation\n  swDoc.ClearSelection2 True\n  \n  ' Show Front View after Circular Sketch Pattern\n  swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView\n  \n  ' Zoom to fit screen in Solidworks Window\n  swDoc.ViewZoomtofit2\n  \nEnd Sub\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"understanding-modeldocextension-object-method"},"Understanding ",Object(r.b)("inlineCode",{parentName:"h3"},"ModelDocExtension")," object method"),Object(r.b)("p",null,"Now let us walk through ",Object(r.b)("strong",{parentName:"p"},"each line")," in the above code, and ",Object(r.b)("strong",{parentName:"p"},"understand")," the meaning and purpose of every line."),Object(r.b)("p",null,"I also give some link so that you can go through them if there are anything I explained in ",Object(r.b)("strong",{parentName:"p"},"previous posts"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n")),Object(r.b)("p",null,"This line forces us to define every variable we are going to use. "),Object(r.b)("p",null,"For more information please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),Object(r.b)("p",null,"In this line, we create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SldWorks"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),Object(r.b)("p",null,"In this line, we create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.ModelDoc2"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Boolean Variable\nDim BoolStatus As Boolean\n")),Object(r.b)("p",null,"In this line, we create a variable named ",Object(r.b)("inlineCode",{parentName:"p"},"BoolStatus")," as ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," object type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n")),Object(r.b)("p",null,"In above line, we create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"As the name suggested, a ",Object(r.b)("strong",{parentName:"p"},"Sketch Manager")," holds variours methods and properties to manage ",Object(r.b)("em",{parentName:"p"},"Sketches"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"SketchManager")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n")),Object(r.b)("p",null,"In this line, we Create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SketchSegment"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Segments"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create Variable for Solidworks Display Dimension\nDim swDisplayDim As SldWorks.DisplayDimension\n")),Object(r.b)("p",null,"In this line, we Create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swDisplayDim")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swDisplayDim")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.DisplayDimension"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swDisplayDim")," for ",Object(r.b)("strong",{parentName:"p"},"dimension")," we create."),Object(r.b)("p",null,"These all are our global variables."),Object(r.b)("p",null,"As you can see in code sample, they are ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects"),"."),Object(r.b)("p",null,"So basically I group all the ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects")," in one place."),Object(r.b)("p",null,"I have also place ",Object(r.b)("inlineCode",{parentName:"p"},"boolean")," type object at top also, because after certain point we will ",Object(r.b)("em",{parentName:"p"},"need")," this variable frequently."),Object(r.b)("p",null,"Thus, I have started placing it here."),Object(r.b)("p",null,"Next is our ",Object(r.b)("inlineCode",{parentName:"p"},"Sub")," procedure which has name of ",Object(r.b)("inlineCode",{parentName:"p"},"main"),". "),Object(r.b)("p",null,"This procedure hold all the ",Object(r.b)("em",{parentName:"p"},"statements (instructions)")," we give to computer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks variable to Solidworks application\nSet swApp = Application.SldWorks\n")),Object(r.b)("p",null,"In this line, we set the value of our Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"; which we define earlier; to Solidworks application."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create string type variable for storing default part location\nDim defaultTemplate As String\n' Set value of this string type variable to \"Default part template\"\ndefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n")),Object(r.b)("p",null,"In 1st statement of above example, we are defining a variable of ",Object(r.b)("inlineCode",{parentName:"p"},"string")," type and named it as ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),"."),Object(r.b)("p",null,"This variable ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),", hold the location the location of ",Object(r.b)("strong",{parentName:"p"},"Default Part Template"),"."),Object(r.b)("p",null,"In 2nd line of above example. we assign value to our newly define ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate")," variable."),Object(r.b)("p",null,"We assign the value by using a ",Object(r.b)("em",{parentName:"p"},"Method")," named ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()"),". "),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()")," method is a part of our main Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks document to new part document\nSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n")),Object(r.b)("p",null,"In this line, we set the value of our ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable to new document."),Object(r.b)("p",null,"For ",Object(r.b)("strong",{parentName:"p"},"detailed information")," about these lines please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("p",null,"I have discussed them ",Object(r.b)("strong",{parentName:"p"},"thoroghly")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post, so do checkout that post if you want to understand above code in more detail."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"'-----------------------UNIT CONVERSION----------------------------------------\n\n' Local variables used as Conversion Factors\nDim LengthConversionFactor As Double\nDim AngleConversionFactor As Double\n\n' Use a Select Case, to get the length of active Unit and set the different factors\nSelect Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n  \n  Case swMETER    ' If length is in Meter\n    LengthConversionFactor = 1\n    AngleConversionFactor = 1\n  \n  Case swMM       ' If length is in MM\n    LengthConversionFactor = 1 / 1000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swCM       ' If length is in CM\n    LengthConversionFactor = 1 / 100\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swINCHES   ' If length is in INCHES\n    LengthConversionFactor = 1 * 0.0254\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEET     ' If length is in FEET\n    LengthConversionFactor = 1 * (0.0254 * 12)\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEETINCHES     ' If length is in FEET & INCHES\n    LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swANGSTROM        ' If length is in ANGSTROM\n    LengthConversionFactor = 1 / 10000000000#\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swNANOMETER       ' If length is in NANOMETER\n    LengthConversionFactor = 1 / 1000000000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swMICRON       ' If length is in MICRON\n    LengthConversionFactor = 1 / 1000000\n    AngleConversionFactor = 1 * 0.01745329\nEnd Select\n\n'----------------------------------------------------------------\n")),Object(r.b)("p",null,"Above code sample shows how to ",Object(r.b)("strong",{parentName:"p"},"fix Solidworks API Unit issue"),". "),Object(r.b)("p",null,"We ",Object(r.b)("em",{parentName:"p"},"1st")," get the ",Object(r.b)("em",{parentName:"p"},"current unit")," of the part and apply the ",Object(r.b)("em",{parentName:"p"},"switch")," statements to update our ",Object(r.b)("em",{parentName:"p"},"Length and Angle Conversion factors"),". "),Object(r.b)("p",null,"I have already explained in detail about ",Object(r.b)("strong",{parentName:"p"},"Fixing Solidworks API Unit Issue")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-fix-unit-issue"}),"Fix Unit Issue"))," blog post. "),Object(r.b)("p",null,"Do checkout above post for Fixing Solidworks API Issue."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Select Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(r.b)("p",null,"In above line, we select the ",Object(r.b)("em",{parentName:"p"},"front plane")," by using ",Object(r.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"For more information about selection method please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch manager for our sketch\nSet swSketchManager = swDoc.SketchManager\n")),Object(r.b)("p",null,"In above line, we set the ",Object(r.b)("em",{parentName:"p"},"Sketch manager")," variable to ",Object(r.b)("em",{parentName:"p"},"current document's sketch manager"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Insert a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(r.b)("p",null,"In above line, we use ",Object(r.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(r.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(r.b)("inlineCode",{parentName:"p"},"True")," value."),Object(r.b)("p",null,"This method allows us to insert a sketch in selected plane."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create a circle of diameter 10\nSet swSketchSegment = swSketchManager.CreateCircle(0, 0, 0, 10 * LengthConversionFactor, 0, 0)\n")),Object(r.b)("p",null,"In above line, we set the value of Solidworks Sketch Segment variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," by ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method from ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method creates ",Object(r.b)("em",{parentName:"p"},"a Circle"),' between "2 given point distance as diameter".'),Object(r.b)("p",null,"For more information about ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method, you can read my ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-circle"}),"Solidworks Macro - Create Circle From VBA Macro"))," post."),Object(r.b)("p",null,"That post describe all the parameters we need for this ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircle")," method in details."),Object(r.b)("p",null,"In above line, we create a Circle with:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Circle Centerpoint")," : At origin i.e. ",Object(r.b)("em",{parentName:"p"},"(0, 0, 0)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Circle Diameter")," : ",Object(r.b)("strong",{parentName:"p"},"10")," unit length"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Disable dimension input box before adding dimension\nswApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, False\n")),Object(r.b)("p",null,"In above line of code, we ",Object(r.b)("strong",{parentName:"p"},"Disable")," dimension input box before adding dimension."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Add dimension to circle\nSet swDisplayDim = swDoc.Extension.AddDimension(0, 12 * LengthConversionFactor, 0, swSmartDimensionDirection_e.swSmartDimensionDirection_Right)\n")),Object(r.b)("p",null,'For "',Object(r.b)("strong",{parentName:"p"},"adding dimension"),'" to an sketch entity, we need ',Object(r.b)("inlineCode",{parentName:"p"},"AddDimension")," method from ",Object(r.b)("strong",{parentName:"p"},"Solidworks")," ",Object(r.b)("inlineCode",{parentName:"p"},"ModelDocExtension")," object."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"AddDimension")," method takes following parameters as explained:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"X")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of Dimension text location in meters."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Y")," : ",Object(r.b)("em",{parentName:"p"},"y coordinate of Dimension text location in meters."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Z")," : ",Object(r.b)("em",{parentName:"p"},"z coordinate of Dimension text location in meters."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Direction")," : ",Object(r.b)("em",{parentName:"p"},"Direction of dimensioning extension line or rapid dimensioning quadrant as defined in ",Object(r.b)("inlineCode",{parentName:"em"},"swSmartDimensionDirection_e"),".")))),Object(r.b)("p",null,"There are 4 values we can use from ",Object(r.b)("inlineCode",{parentName:"p"},"swSmartDimensionDirection_e")," enum."),Object(r.b)("p",null,"They are as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"swSmartDimensionDirection_Down"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"swSmartDimensionDirection_Left"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"swSmartDimensionDirection_Right"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"swSmartDimensionDirection_Up")))),Object(r.b)("p",null,"After the function complete following are the results:"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Return Value"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"IDisplayDimension"),": ",Object(r.b)("em",{parentName:"li"},"Newly created dimension."))),Object(r.b)("p",null,"In our code, I have used following values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"X")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of Dimension text location = ",Object(r.b)("inlineCode",{parentName:"em"},"0"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Y")," : ",Object(r.b)("em",{parentName:"p"},"y coordinate of Dimension text location = `12 ")," LengthConversionFactor`.*")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Z")," : ",Object(r.b)("em",{parentName:"p"},"z coordinate of Dimension text location = ",Object(r.b)("inlineCode",{parentName:"em"},"0"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Direction")," : ",Object(r.b)("em",{parentName:"p"},"Direction of dimensioning extension line or rapid dimensioning quadrant = ",Object(r.b)("inlineCode",{parentName:"em"},"swSmartDimensionDirection_e.swSmartDimensionDirection_Right"),".")))),Object(r.b)("p",null,"Below image shows before and after Circular Sketch Pattern."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Before Circular Sketch Pattern")),Object(r.b)("p",null,Object(r.b)("img",{alt:"before-add-dimension",src:n(197).default})),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"After Circular Sketch Pattern")),Object(r.b)("p",null,Object(r.b)("img",{alt:"after-add-dimension",src:n(198).default})),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Enable dimension input box after adding dimension\nswApp.SetUserPreferenceToggle swUserPreferenceToggle_e.swInputDimValOnCreate, True\n")),Object(r.b)("p",null,"In above line of code, we ",Object(r.b)("strong",{parentName:"p"},"Enable")," dimension input box after adding dimension."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' De-select the Sketch after creation\nswDoc.ClearSelection2 True\n")),Object(r.b)("p",null,"In the above line of code, we deselect the ",Object(r.b)("strong",{parentName:"p"},"Sketch")," after the ",Object(r.b)("em",{parentName:"p"},"Linear Sketch Pattern")," operation."),Object(r.b)("p",null,"For de-selecting, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ClearSelection2")," method from our Solidworks document name ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Show Front View after Linear Sketch Pattern\nswDoc.ShowNamedView2 "", swStandardViews_e.swFrontView\n')),Object(r.b)("p",null,"In the above line of code, we update the ",Object(r.b)("em",{parentName:"p"},"view orientation")," to ",Object(r.b)("strong",{parentName:"p"},"Front View"),"."),Object(r.b)("p",null,"In my machine, after inserting a sketch view orientation does not changed."),Object(r.b)("p",null,"Because of this I have to update the view to ",Object(r.b)("strong",{parentName:"p"},"Front view"),"."),Object(r.b)("p",null,"For showing ",Object(r.b)("strong",{parentName:"p"},"Front View")," we used ",Object(r.b)("inlineCode",{parentName:"p"},"ShowNamedView2")," method from our Solidworks document name ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("p",null,"This method takes 2 parameter described as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"VName")," : Name of the view to display or an empty string to use ViewId instead")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"ViewId")," : ID of the view to display as defined by ",Object(r.b)("inlineCode",{parentName:"p"},"swStandardViews_e")," or -1 to use the ",Object(r.b)("strong",{parentName:"p"},"VName")," argument instead."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you specify both ",Object(r.b)("strong",{parentName:"p"},"VName")," and ",Object(r.b)("strong",{parentName:"p"},"ViewId"),", then ",Object(r.b)("strong",{parentName:"p"},"ViewId")," takes precedence if the two arguments do not resolve to the same view."))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"swStandardViews_e")," has following Standard View Types:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swBackView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swBottomView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swDimetricView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swFrontView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swIsometricView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swLeftView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swRightView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swTopView"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"swExtendetricView")))),Object(r.b)("p",null,"In our code, we did not use ",Object(r.b)("strong",{parentName:"p"},"VName")," instead I used ",Object(r.b)("em",{parentName:"p"},"empty string")," in form of ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},'""'))," symbol."),Object(r.b)("p",null,"I used ",Object(r.b)("strong",{parentName:"p"},"ViewId")," value to specify view and used ",Object(r.b)("inlineCode",{parentName:"p"},"swStandardViews_e.swFrontView")," value to use ",Object(r.b)("em",{parentName:"p"},"Standard Front View"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Zoom to fit screen in Solidworks Window\nswDoc.ViewZoomtofit\n")),Object(r.b)("p",null,"In this last line we use ",Object(r.b)("em",{parentName:"p"},"zoom to fit")," command."),Object(r.b)("p",null,"For Zoom to fit, we use ",Object(r.b)("inlineCode",{parentName:"p"},"ViewZoomtofit")," method from our Solidworks document variable ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc"),"."),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This is it !!!")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"I hope my efforts will helpful to someone!")),Object(r.b)("p",null,"If you found anything to ",Object(r.b)("strong",{parentName:"p"},"add or update"),", please let me know on my ",Object(r.b)("em",{parentName:"p"},"e-mail"),"."),Object(r.b)("p",null,"Hope this post helps you to ",Object(r.b)("em",{parentName:"p"},"Add dimension to Sketch Entities")," with Solidworks VBA Macros."),Object(r.b)("p",null,"For more such tutorials on ",Object(r.b)("strong",{parentName:"p"},"Solidworks VBA Macro"),", do come to this blog after sometime."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"If you like the post then please share it with your friends also.")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Do let me know by you like this post or not!")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Till then, Happy learning!!!")))}s.isMDXComponent=!0},152:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),s=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,O=p["".concat(i,".").concat(d)]||p[d]||m[d]||r;return n?o.a.createElement(O,l(l({ref:t},c),{},{components:n})):o.a.createElement(O,l({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},197:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/before-add-dimension-cc789044a44b12bc0198a695f91dee8d.png"},198:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/after-add-dimension-87422fa2d8da44533300a591c6dbf3b8.png"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{108:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return l}));var a=n(2),o=n(6),r=(n(0),n(152)),i={id:"sw-sketch-macro-move-or-copy-sketch-entities",title:"Move/Copy Sketch Entities"},c={unversionedId:"solidworks-macros/sw-sketch-macro-move-or-copy-sketch-entities",id:"solidworks-macros/sw-sketch-macro-move-or-copy-sketch-entities",isDocsHomePage:!1,title:"Move/Copy Sketch Entities",description:"In this post, I tell you about how to Move/Copy Sketch Entities using Solidworks VBA Macros in a Sketch.",source:"@site/docs\\solidworks-macros\\2020-04-24-move-copy-sketch-entities.md",slug:"/solidworks-macros/sw-sketch-macro-move-or-copy-sketch-entities",permalink:"/docs/solidworks-macros/sw-sketch-macro-move-or-copy-sketch-entities",version:"current",sidebar:"swvba",previous:{title:"Edit Circular Sketch Pattern",permalink:"/docs/solidworks-macros/sw-sketch-macro-edit-circular-sketch-pattern"},next:{title:"Rotate/Copy Sketch Entities",permalink:"/docs/solidworks-macros/sw-sketch-macro-rotate-or-copy-sketch-entities"}},b=[{value:"Code Sample",id:"code-sample",children:[{value:"Understanding the Code",id:"understanding-the-code",children:[]}]},{value:"<strong>Cases</strong>",id:"cases",children:[{value:"CASE 1 : Move Sketch Entities",id:"case-1--move-sketch-entities",children:[]},{value:"CASE 2 : Copy Sketch Entities",id:"case-2--copy-sketch-entities",children:[]}]}],s={rightToc:b};function l(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this post, I tell you about ",Object(r.b)("strong",{parentName:"p"},"how to Move/Copy Sketch Entities using Solidworks VBA Macros")," in a Sketch."),Object(r.b)("p",null,"In this post, I explain about ",Object(r.b)("inlineCode",{parentName:"p"},"MoveOrCopy")," method from ",Object(r.b)("strong",{parentName:"p"},"Solidworks")," ",Object(r.b)("inlineCode",{parentName:"p"},"ModelDoc2"),"'s ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"This method is ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"most updated"))," method, I found in ",Object(r.b)("em",{parentName:"p"},"Solidworks API Help"),". "),Object(r.b)("p",null,"So ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"use this method"))," if you want to ",Object(r.b)("em",{parentName:"p"},"MoveOrCopy Sketch Entities"),"."),Object(r.b)("p",null,"This post is similar to previous ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-edit-circular-sketch-pattern"}),"Solidworks Macro - Edit Circular Sketch Pattern From VBA Macro"))," post."),Object(r.b)("p",null,"If you have not visited my previous ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-edit-circular-sketch-pattern"}),"Solidworks Macro - Edit Circular Sketch Pattern From VBA Macro"))," post, then please do check-it if you want to learn Editing Circular Sketch Pattern from VBA Macros."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"code-sample"},"Code Sample"),Object(r.b)("p",null,"Below is the ",Object(r.b)("inlineCode",{parentName:"p"},"code")," sample to ",Object(r.b)("em",{parentName:"p"},"edit Circular Sketch Pattern"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n\n' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n\n' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n\n' Boolean Variable\nDim BoolStatus As Boolean\n\n' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n\n' Create Variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n\n' Main function of our VBA program\nSub main()\n\n  ' Set Solidworks variable to Solidworks application\n  Set swApp = Application.SldWorks\n  \n  ' Create string type variable for storing default part location\n  Dim defaultTemplate As String\n\n  ' Set value of this string type variable to \"Default part template\"\n  defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n\n  ' Set Solidworks document to new part document\n  Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n  \n  '-----------------------UNIT CONVERSION----------------------------------------\n\n  ' Local variables used as Conversion Factors\n  Dim LengthConversionFactor As Double\n  Dim AngleConversionFactor As Double\n  \n  ' Use a Select Case, to get the length of active Unit and set the different factors\n  Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n    \n    Case swMETER    ' If length is in Meter\n      LengthConversionFactor = 1\n      AngleConversionFactor = 1\n    \n    Case swMM       ' If length is in MM\n      LengthConversionFactor = 1 / 1000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swCM       ' If length is in CM\n      LengthConversionFactor = 1 / 100\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swINCHES   ' If length is in INCHES\n      LengthConversionFactor = 1 * 0.0254\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEET     ' If length is in FEET\n      LengthConversionFactor = 1 * (0.0254 * 12)\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEETINCHES     ' If length is in FEET & INCHES\n      LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swANGSTROM        ' If length is in ANGSTROM\n      LengthConversionFactor = 1 / 10000000000#\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swNANOMETER       ' If length is in NANOMETER\n      LengthConversionFactor = 1 / 1000000000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swMICRON       ' If length is in MICRON\n      LengthConversionFactor = 1 / 1000000\n      AngleConversionFactor = 1 * 0.01745329\n  End Select\n\n  '----------------------------------------------------------------\n\n  ' Select Front Plane\n  BoolStatus = swDoc.Extension.SelectByID2(\"Front Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n\n  ' Set Sketch manager for our sketch\n  Set swSketchManager = swDoc.SketchManager\n\n  ' Insert a sketch into selected plane\n  swSketchManager.InsertSketch True\n  \n  ' Circle Radius\n  Dim circleRadius As Double\n  circleRadius = 5 * LengthConversionFactor\n  \n  ' Set Sketch Segment value and Create a Circle\n  Set swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, circleRadius)\n  \n  ' Defining variables for Destination Co-ordinates\n  Dim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double\n  \n  ' Setting the values of Destination Co-ordinates in X & Y directions for Move\n  destinationCoOrdinateInXDir = 10 * LengthConversionFactor\n  destinationCoOrdinateInYDir = 10 * LengthConversionFactor\n  \n  ' Move circle\n  swDoc.Extension.MoveOrCopy False, 1, False, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0\n  \n  ' Setting the values of Destination Co-ordinates in X & Y directions for Copy\n  destinationCoOrdinateInXDir = 15 * LengthConversionFactor\n  destinationCoOrdinateInYDir = 15 * LengthConversionFactor\n  \n  ' Copy circle\n  swDoc.Extension.MoveOrCopy True, 3, True, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0\n  \n  ' De-select the lines after creation\n  swDoc.ClearSelection2 True\n  \n  ' Show Front View after Circular Sketch Pattern\n  swDoc.ShowNamedView2 \"\", swStandardViews_e.swFrontView\n  \n  ' Zoom to fit screen in Solidworks Window\n  swDoc.ViewZoomtofit2\n  \nEnd Sub\n")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"understanding-the-code"},"Understanding the Code"),Object(r.b)("p",null,"Now let us walk through ",Object(r.b)("strong",{parentName:"p"},"each line")," in the above code, and ",Object(r.b)("strong",{parentName:"p"},"understand")," the meaning and purpose of every line."),Object(r.b)("p",null,"I also give some link so that you can go through them if there are anything I explained in ",Object(r.b)("strong",{parentName:"p"},"previous posts"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"Option Explicit\n")),Object(r.b)("p",null,"This line forces us to define every variable we are going to use. "),Object(r.b)("p",null,"For more information please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),Object(r.b)("p",null,"In this line, we create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swApp")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SldWorks"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),Object(r.b)("p",null,"In this line, we create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.ModelDoc2"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Boolean Variable\nDim BoolStatus As Boolean\n")),Object(r.b)("p",null,"In this line, we create a variable named ",Object(r.b)("inlineCode",{parentName:"p"},"BoolStatus")," as ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," object type."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Manager\nDim swSketchManager As SldWorks.SketchManager\n")),Object(r.b)("p",null,"In above line, we create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchManager")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"As the name suggested, a ",Object(r.b)("strong",{parentName:"p"},"Sketch Manager")," holds variours methods and properties to manage ",Object(r.b)("em",{parentName:"p"},"Sketches"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"SketchManager")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://help.solidworks.com/2017/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchManager_members.html"}),"this page")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create variable for Solidworks Sketch Segment\nDim swSketchSegment As SldWorks.SketchSegment\n")),Object(r.b)("p",null,"In this line, we Create a variable which we named as ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," and the type of this ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," variable is ",Object(r.b)("inlineCode",{parentName:"p"},"SldWorks.SketchSegment"),"."),Object(r.b)("p",null,"We create variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," for ",Object(r.b)("strong",{parentName:"p"},"Solidworks Sketch Segments"),"."),Object(r.b)("p",null,"To see methods and properties related to ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," object, please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISketchSegment_members.html"}),"this page")),"."),Object(r.b)("p",null,"These all are our global variables."),Object(r.b)("p",null,"As you can see in code sample, they are ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects"),"."),Object(r.b)("p",null,"So basically I group all the ",Object(r.b)("strong",{parentName:"p"},"Solidworks API Objects")," in one place."),Object(r.b)("p",null,"I have also place ",Object(r.b)("inlineCode",{parentName:"p"},"boolean")," type object at top also, because after certain point we will ",Object(r.b)("em",{parentName:"p"},"need")," this variable frequently."),Object(r.b)("p",null,"Thus, I have started placing it here."),Object(r.b)("p",null,"Next is our ",Object(r.b)("inlineCode",{parentName:"p"},"Sub")," procedure which has name of ",Object(r.b)("inlineCode",{parentName:"p"},"main"),". "),Object(r.b)("p",null,"This procedure hold all the ",Object(r.b)("em",{parentName:"p"},"statements (instructions)")," we give to computer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks variable to Solidworks application\nSet swApp = Application.SldWorks\n")),Object(r.b)("p",null,"In this line, we set the value of our Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"; which we define earlier; to Solidworks application."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Create string type variable for storing default part location\nDim defaultTemplate As String\n' Set value of this string type variable to \"Default part template\"\ndefaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)\n")),Object(r.b)("p",null,"In 1st statement of above example, we are defining a variable of ",Object(r.b)("inlineCode",{parentName:"p"},"string")," type and named it as ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),"."),Object(r.b)("p",null,"This variable ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate"),", hold the location the location of ",Object(r.b)("strong",{parentName:"p"},"Default Part Template"),"."),Object(r.b)("p",null,"In 2nd line of above example. we assign value to our newly define ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTemplate")," variable."),Object(r.b)("p",null,"We assign the value by using a ",Object(r.b)("em",{parentName:"p"},"Method")," named ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()"),". "),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"GetUserPreferenceStringValue()")," method is a part of our main Solidworks variable ",Object(r.b)("inlineCode",{parentName:"p"},"swApp"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Solidworks document to new part document\nSet swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)\n")),Object(r.b)("p",null,"In this line, we set the value of our ",Object(r.b)("inlineCode",{parentName:"p"},"swDoc")," variable to new document."),Object(r.b)("p",null,"For ",Object(r.b)("strong",{parentName:"p"},"detailed information")," about these lines please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post."),Object(r.b)("p",null,"I have discussed them ",Object(r.b)("strong",{parentName:"p"},"thoroghly")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-open-part"}),"Solidworks Macros - Open new Part document"))," post, so do checkout that post if you want to understand above code in more detail."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"'-----------------------UNIT CONVERSION----------------------------------------\n\n' Local variables used as Conversion Factors\nDim LengthConversionFactor As Double\nDim AngleConversionFactor As Double\n\n' Use a Select Case, to get the length of active Unit and set the different factors\nSelect Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n  \n  Case swMETER    ' If length is in Meter\n    LengthConversionFactor = 1\n    AngleConversionFactor = 1\n  \n  Case swMM       ' If length is in MM\n    LengthConversionFactor = 1 / 1000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swCM       ' If length is in CM\n    LengthConversionFactor = 1 / 100\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swINCHES   ' If length is in INCHES\n    LengthConversionFactor = 1 * 0.0254\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEET     ' If length is in FEET\n    LengthConversionFactor = 1 * (0.0254 * 12)\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEETINCHES     ' If length is in FEET & INCHES\n    LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swANGSTROM        ' If length is in ANGSTROM\n    LengthConversionFactor = 1 / 10000000000#\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swNANOMETER       ' If length is in NANOMETER\n    LengthConversionFactor = 1 / 1000000000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swMICRON       ' If length is in MICRON\n    LengthConversionFactor = 1 / 1000000\n    AngleConversionFactor = 1 * 0.01745329\nEnd Select\n\n'----------------------------------------------------------------\n")),Object(r.b)("p",null,"Above code sample shows how to ",Object(r.b)("strong",{parentName:"p"},"fix Solidworks API Unit issue"),". "),Object(r.b)("p",null,"We ",Object(r.b)("em",{parentName:"p"},"1st")," get the ",Object(r.b)("em",{parentName:"p"},"current unit")," of the part and apply the ",Object(r.b)("em",{parentName:"p"},"switch")," statements to update our ",Object(r.b)("em",{parentName:"p"},"Length and Angle Conversion factors"),". "),Object(r.b)("p",null,"I have already explained in detail about ",Object(r.b)("strong",{parentName:"p"},"Fixing Solidworks API Unit Issue")," in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-fix-unit-issue"}),"Fix Unit Issue"))," blog post. "),Object(r.b)("p",null,"Do checkout above post for Fixing Solidworks API Issue."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),'\' Select Front Plane\nBoolStatus = swDoc.Extension.SelectByID2("Front Plane", "PLANE", 0, 0, 0, False, 0, Nothing, swSelectOption_e.swSelectOptionDefault)\n')),Object(r.b)("p",null,"In above line, we select the ",Object(r.b)("em",{parentName:"p"},"front plane")," by using ",Object(r.b)("inlineCode",{parentName:"p"},"SelectByID2")," method from ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"For more information about selection method please visit ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-macro-selection-methods"}),"Solidworks Macros - Selection Methods"))," post."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch manager for our sketch\nSet swSketchManager = swDoc.SketchManager\n")),Object(r.b)("p",null,"In above line, we set the ",Object(r.b)("em",{parentName:"p"},"Sketch manager")," variable to ",Object(r.b)("em",{parentName:"p"},"current document's sketch manager"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Insert a sketch into selected plane\nswSketchManager.InsertSketch True\n")),Object(r.b)("p",null,"In above line, we use ",Object(r.b)("inlineCode",{parentName:"p"},"InsertSketch")," method of ",Object(r.b)("em",{parentName:"p"},"SketchManager")," and give ",Object(r.b)("inlineCode",{parentName:"p"},"True")," value."),Object(r.b)("p",null,"This method allows us to insert a sketch in selected plane."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Circle Radius\nDim circleRadius As Double\ncircleRadius = 5 * LengthConversionFactor\n")),Object(r.b)("p",null,"In above code sample, we do following:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create a local variable named ",Object(r.b)("inlineCode",{parentName:"p"},"circleRadius"),", which is ",Object(r.b)("inlineCode",{parentName:"p"},"Double")," type.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"In 2nd line, we assign a value of ",Object(r.b)("strong",{parentName:"p"},"5")," to our ",Object(r.b)("inlineCode",{parentName:"p"},"circleRadius")," variable, also we multiple with our ",Object(r.b)("inlineCode",{parentName:"p"},"LengthConversionFactor")," variable."))),Object(r.b)("p",null,"Since I am using ",Object(r.b)("em",{parentName:"p"},"IPS unit system"),", I want to create a circle of Radius ",Object(r.b)("em",{parentName:"p"},"5 inch"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Set Sketch Segment value and Create a Circle\nSet swSketchSegment = swSketchManager.CreateCircleByRadius(0, 0, 0, circleRadius)\n")),Object(r.b)("p",null,"In above line, we set the value of Solidworks Sketch Segment variable ",Object(r.b)("inlineCode",{parentName:"p"},"swSketchSegment")," by ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircleByRadius")," method from ",Object(r.b)("em",{parentName:"p"},"Solidworks Sketch Manager"),"."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircleByRadius")," method creates ",Object(r.b)("em",{parentName:"p"},"a Circle")," at given point with radius."),Object(r.b)("p",null,"For more information about ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircleByRadius")," method, you can read my ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"sw-sketch-macro-create-circle-by-radius"}),"Solidworks Macro - Create Circle By Radius From VBA Macro"))," post."),Object(r.b)("p",null,"That post describe all the parameters we need for this ",Object(r.b)("inlineCode",{parentName:"p"},"CreateCircleByRadius")," method in details."),Object(r.b)("p",null,"In above line, we create a Circle with:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Circle Centerpoint")," : At origin i.e. ",Object(r.b)("em",{parentName:"p"},"(0, 0, 0)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Circle Radius")," : ",Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"circleRadius"))))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Defining variables for Destination Co-ordinates\nDim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double\n")),Object(r.b)("p",null,"In above line of code, we create ",Object(r.b)("strong",{parentName:"p"},"two")," variables of ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"double"))," type in ",Object(r.b)("em",{parentName:"p"},"one single line"),"."),Object(r.b)("p",null,"These variables we use for defining ",Object(r.b)("strong",{parentName:"p"},"Destination Co-ordinates"),"."),Object(r.b)("p",null,"Variables Name:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"destinationCoOrdinateInXDir"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"destinationCoOrdinateInYDir")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Setting the values of Destination Co-ordinates in X & Y directions for Move\ndestinationCoOrdinateInXDir = 10 * LengthConversionFactor\ndestinationCoOrdinateInYDir = 10 * LengthConversionFactor\n")),Object(r.b)("p",null,"In above line of code, we set the values of ",Object(r.b)("em",{parentName:"p"},"Destination Co-ordinates")," in ",Object(r.b)("strong",{parentName:"p"},"X & Y directions")," for ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Move"))," selected circle."),Object(r.b)("p",null,"Variables Values:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"destinationCoOrdinateInXDir = 10 * LengthConversionFactor")),Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},'10" in X direction.'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"destinationCoOrdinateInYDir = 10 * LengthConversionFactor")),Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},'10" in Y direction.')))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Move circle\nswDoc.Extension.MoveOrCopy False, 1, False, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0\n")),Object(r.b)("p",null,'For "',Object(r.b)("strong",{parentName:"p"},"Moving"),'" a sketch entity, we need ',Object(r.b)("inlineCode",{parentName:"p"},"MoveOrCopy")," method from ",Object(r.b)("strong",{parentName:"p"},"Solidworks")," ",Object(r.b)("inlineCode",{parentName:"p"},"ModelDoc2"),"'s ",Object(r.b)("inlineCode",{parentName:"p"},"Extension")," object."),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"MoveOrCopy")," method takes following parameters as explained:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Copy")," : ",Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"True")," to copy the sketch entities, ",Object(r.b)("inlineCode",{parentName:"em"},"False")," to not."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"NumCopies")," : ",Object(r.b)("em",{parentName:"p"},"Number of copies you want to create."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"KeepRelations")," : ",Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"True")," to keep sketch relations after Move or Copy operation, ",Object(r.b)("inlineCode",{parentName:"em"},"False")," to not."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseX")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of the base point from which to move the sketch entities."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseY")," : ",Object(r.b)("em",{parentName:"p"},"Y coordinate of the base point from which to move the sketch entities."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseZ")," : ",Object(r.b)("em",{parentName:"p"},"Z coordinate of the base point from which to move the sketch entities."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestX")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of the destination point from which to move the sketch entities."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestY")," : ",Object(r.b)("em",{parentName:"p"},"Y coordinate of the destination point from which to move the sketch entities."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestZ")," : ",Object(r.b)("em",{parentName:"p"},"Z coordinate of the destination point from which to move the sketch entities.")))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"There are no return value after this function."))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"cases"},Object(r.b)("strong",{parentName:"h2"},"Cases")),Object(r.b)("p",null,"In this section, we will go through different cases by "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"Modifying different parameters"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("em",{parentName:"p"},"See images, before and after parameter modification")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"case-1--move-sketch-entities"},"CASE 1 : Move Sketch Entities"),Object(r.b)("p",null,"In our code, if we want to ",Object(r.b)("em",{parentName:"p"},"Move Sketch Entities"),", then we need to use code sample as given below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Defining variables for Destination Co-ordinates\nDim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double\n\n' Setting the values of Destination Co-ordinates in X & Y directions for Move\ndestinationCoOrdinateInXDir = 10 * LengthConversionFactor\ndestinationCoOrdinateInYDir = 10 * LengthConversionFactor\n\n' Move circle\nswDoc.Extension.MoveOrCopy False, 1, False, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0\n")),Object(r.b)("p",null,"In above line we ",Object(r.b)("strong",{parentName:"p"},"Move Sketch Entities")," to new position i.e. ",Object(r.b)("em",{parentName:"p"},'10" in X-Direction')," and ",Object(r.b)("em",{parentName:"p"},'10" in Y-Direction'),"."),Object(r.b)("p",null,"In above code we need to set following parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Copy")," : ",Object(r.b)("inlineCode",{parentName:"p"},"False")," to not create a copy.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"NumCopies")," : ",Object(r.b)("em",{parentName:"p"},"Number of copies you want to create to 1 which is itself."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"KeepRelations")," : ",Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"True")," to keep sketch relations after Move or Copy operation."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseX")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of the base point  = 0"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseY")," : ",Object(r.b)("em",{parentName:"p"},"Y coordinate of the base point  = 0"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseZ")," : ",Object(r.b)("em",{parentName:"p"},"Z coordinate of the base point  = 0"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestX")," : ",Object(r.b)("em",{parentName:"p"},'X coordinate of the destination  = 10"'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestY")," : ",Object(r.b)("em",{parentName:"p"},'Y coordinate of the destination point  = 10"'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestZ")," : ",Object(r.b)("em",{parentName:"p"},"Z coordinate of the destination point  = 0"),"  "))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Example Images:"))),Object(r.b)("p",null,"Below image shows before and after we ",Object(r.b)("strong",{parentName:"p"},"Move Sketch Entitny"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Before Move Sketch Entitny")),Object(r.b)("p",null,Object(r.b)("img",{alt:"before-move-copy",src:n(188).default})),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"After Move Sketch Entitny")),Object(r.b)("p",null,Object(r.b)("img",{alt:"after-move",src:n(264).default})),Object(r.b)("hr",null),Object(r.b)("h3",{id:"case-2--copy-sketch-entities"},"CASE 2 : Copy Sketch Entities"),Object(r.b)("p",null,"In our code, if we want to ",Object(r.b)("em",{parentName:"p"},"Copy Sketch Entities"),", then we need to use code sample as given below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-vb"}),"' Defining variables for Destination Co-ordinates\nDim destinationCoOrdinateInXDir As Double, destinationCoOrdinateInYDir As Double\n\n' Setting the values of Destination Co-ordinates in X & Y directions for Move\ndestinationCoOrdinateInXDir = 15 * LengthConversionFactor\ndestinationCoOrdinateInYDir = 15 * LengthConversionFactor\n\n' Copy circle\nswDoc.Extension.MoveOrCopy True, 3, True, 0, 0, 0, destinationCoOrdinateInXDir, destinationCoOrdinateInYDir, 0\n")),Object(r.b)("p",null,"In above line we ",Object(r.b)("strong",{parentName:"p"},"Copy Sketch Entities")," to new position i.e. ",Object(r.b)("em",{parentName:"p"},'15" in X-Direction')," and ",Object(r.b)("em",{parentName:"p"},'15" in Y-Direction')," for every copy of sketch."),Object(r.b)("p",null,"This will more clear in below images when you scroll down."),Object(r.b)("p",null,"In above code we need to set following parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Copy")," : ",Object(r.b)("inlineCode",{parentName:"p"},"True")," to create a copy.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"NumCopies")," : ",Object(r.b)("em",{parentName:"p"},"Number of copies we want to create: 3"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"KeepRelations")," : ",Object(r.b)("em",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"em"},"True")," to keep sketch relations after Move or Copy operation."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseX")," : ",Object(r.b)("em",{parentName:"p"},"X coordinate of the base point  = 0"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseY")," : ",Object(r.b)("em",{parentName:"p"},"Y coordinate of the base point  = 0"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"BaseZ")," : ",Object(r.b)("em",{parentName:"p"},"Z coordinate of the base point  = 0"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestX")," : ",Object(r.b)("em",{parentName:"p"},'X coordinate of the destination  = 15"'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestY")," : ",Object(r.b)("em",{parentName:"p"},'Y coordinate of the destination point  = 15"'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"DestZ")," : ",Object(r.b)("em",{parentName:"p"},"Z coordinate of the destination point  = 0"),"  "))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("em",{parentName:"strong"},"Example Images:"))),Object(r.b)("p",null,"Below image shows before and after we ",Object(r.b)("strong",{parentName:"p"},"Copy Sketch Entitny"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Before Copy Sketch Entitny")),Object(r.b)("p",null,Object(r.b)("img",{alt:"before-move-copy",src:n(188).default})),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"After Copy Sketch Entitny")),Object(r.b)("p",null,Object(r.b)("img",{alt:"after-copy",src:n(265).default})),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This is it !!!")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"I hope my efforts will helpful to someone!")),Object(r.b)("p",null,"If you found anything to ",Object(r.b)("strong",{parentName:"p"},"add or update"),", please let me know on my ",Object(r.b)("em",{parentName:"p"},"e-mail"),"."),Object(r.b)("p",null,"Hope this post helps you to ",Object(r.b)("em",{parentName:"p"},"Move/Copy Sketch Entities")," with Solidworks VBA Macros."),Object(r.b)("p",null,"For more such tutorials on ",Object(r.b)("strong",{parentName:"p"},"Solidworks VBA Macro"),", do come to this blog after sometime."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"If you like the post then please share it with your friends also.")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Do let me know by you like this post or not!")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Till then, Happy learning!!!")))}l.isMDXComponent=!0},152:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},O=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),p=l(n),O=a,d=p["".concat(i,".").concat(O)]||p[O]||m[O]||r;return n?o.a.createElement(d,c(c({ref:t},s),{},{components:n})):o.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=O;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"},188:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/before-move-copy-fa58f30c9f52032cb6c96598e57f3d18.png"},264:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/after-move-27e66d1e2bad407f7fe9ba7a152aa6d0.png"},265:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/after-copy-9d61c3d0aa475413ab7efa46be542142.png"}}]);
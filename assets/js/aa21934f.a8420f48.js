"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3939],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=u(t),c=s,d=h["".concat(l,".").concat(c)]||h[c]||m[c]||a;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function c(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=t(87462),s=(t(67294),t(3905));const a={title:"If-Then-Else and Select Case structure",tags:["VBA"],permalink:"/vba/if-then-structure-select-case/"},o=void 0,i={unversionedId:"vba-if-then-structure-select-case",id:"vba-if-then-structure-select-case",title:"If-Then-Else and Select Case structure",description:"If-Then is VBA\u2019s most important control structure. You\u2019ll probably use this command on a daily basis.",source:"@site/docs/vba/18-vba-if-then-structure-select-case.md",sourceDirName:".",slug:"/vba-if-then-structure-select-case",permalink:"/vba/vba-if-then-structure-select-case",draft:!1,tags:[{label:"VBA",permalink:"/vba/tags/vba"}],version:"current",sidebarPosition:18,frontMatter:{title:"If-Then-Else and Select Case structure",tags:["VBA"],permalink:"/vba/if-then-structure-select-case/"},sidebar:"tutorialSidebar",previous:{title:"Controlling Program Flow and Making Decisions",permalink:"/vba/vba-controlling-flow-making-desicions"},next:{title:"VBA Looping",permalink:"/vba/vba-looping"}},l={},u=[{value:"If-Then examples",id:"if-then-examples",level:2},{value:"If-Then-Else examples",id:"if-then-else-examples",level:2},{value:"If-ElseIf-Else examples",id:"if-elseif-else-examples",level:2},{value:"Select Case example",id:"select-case-example",level:2}],p={toc:u};function m(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"If-Then")," is VBA\u2019s most important control structure. You\u2019ll probably use this command on a daily basis. "),(0,s.kt)("p",null,"As in many other aspects of life, effective ",(0,s.kt)("em",{parentName:"p"},"decision-making")," is the key to success in writing CAD or any other macros."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"If-Then")," structure has this basic syntax: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"If condition Then statements [Else elsestatements]\n")),(0,s.kt)("p",null,"Use the ",(0,s.kt)("strong",{parentName:"p"},"If-Then")," structure when you want to execute one or more statements conditionally. "),(0,s.kt)("p",null,"The optional ",(0,s.kt)("strong",{parentName:"p"},"Else")," clause, if included, lets you execute one or more statements if the condition you\u2019re testing is not true. "),(0,s.kt)("p",null,"Sound confusing? Don\u2019t worry; a few examples make this crystal clear. "),(0,s.kt)("h2",{id:"if-then-examples"},"If-Then examples"),(0,s.kt)("p",null,"The following routine demonstrates the ",(0,s.kt)("inlineCode",{parentName:"p"},"If-Then")," structure without the optional Else clause: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning()\n  If Time < 0.5 Then MsgBox \u201cGood Morning.\u201d\nEnd Sub\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"GoodMorning")," procedure uses VBA\u2019s ",(0,s.kt)("inlineCode",{parentName:"p"},"Time")," function to get the system time. "),(0,s.kt)("p",null,"If the current system time is less than ",(0,s.kt)("em",{parentName:"p"},".5")," (in other words, before noon), the routine displays a friendly greeting. "),(0,s.kt)("p",null,"If Time is greater than or equal to ",(0,s.kt)("em",{parentName:"p"},".5"),", the routine ends and nothing happens. "),(0,s.kt)("p",null,"To display a different greeting if Time is greater than or equal to ",(0,s.kt)("em",{parentName:"p"},".5"),", add another ",(0,s.kt)("em",{parentName:"p"},"If-Then")," statement after the first one: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning2()\n  If Time < 0.5 Then MsgBox \u201cGood Morning.\u201d\n  If Time >= 0.5 Then MsgBox \u201cGood Afternoon.\u201d\nEnd Sub\n")),(0,s.kt)("p",null,"Notice that I used ",(0,s.kt)("inlineCode",{parentName:"p"},">=")," (greater than or equal to) for the second ",(0,s.kt)("em",{parentName:"p"},"If-Then")," statement. "),(0,s.kt)("p",null,"This ensures that the entire day is covered. Had I used ",(0,s.kt)("inlineCode",{parentName:"p"},">")," (greater than), then no message would appear if this procedure were executed at precisely 12:00 noon. "),(0,s.kt)("h2",{id:"if-then-else-examples"},"If-Then-Else examples"),(0,s.kt)("p",null,"Another approach to the preceding problem uses the ",(0,s.kt)("inlineCode",{parentName:"p"},"Else")," clause. "),(0,s.kt)("p",null,"Here\u2019s the same routine recoded to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"If-Then-Else")," structure: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning3()\n  If Time < 0.5 Then MsgBox \u201cGood Morning.\u201d Else _\n  MsgBox \u201cGood Afternoon.\u201d\nEnd Sub\n")),(0,s.kt)("p",null,"Notice that I use the ",(0,s.kt)("em",{parentName:"p"},"line continuation character (underscore)")," in the preceding example. "),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},"If-Then-Else")," statement is actually a single statement. "),(0,s.kt)("p",null,"VBA provides a slightly different way of coding ",(0,s.kt)("strong",{parentName:"p"},"If-Then-Else")," constructs that use an ",(0,s.kt)("strong",{parentName:"p"},"End-If")," statement. "),(0,s.kt)("p",null,"Therefore, the ",(0,s.kt)("inlineCode",{parentName:"p"},"GoodMorning")," procedure can be rewritten as: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning4()\n  If Time < 0.5 Then\n    MsgBox \u201cGood Morning.\u201d\n  Else\n    MsgBox \u201cGood Afternoon.\u201d\n  End If\nEnd Sub\n")),(0,s.kt)("p",null,"In fact, you can insert any number of statements under the ",(0,s.kt)("inlineCode",{parentName:"p"},"If")," part, and any number of statements under the ",(0,s.kt)("inlineCode",{parentName:"p"},"Else")," part. "),(0,s.kt)("p",null,"I prefer to use this syntax because it\u2019s easier to read and makes the statements shorter. "),(0,s.kt)("p",null,"What if you need to expand the ",(0,s.kt)("inlineCode",{parentName:"p"},"GoodMorning")," routine to handle three conditions: ",(0,s.kt)("em",{parentName:"p"},"morning, afternoon, and evening"),"?"),(0,s.kt)("p",null,"You have two options: Use three ",(0,s.kt)("inlineCode",{parentName:"p"},"If-Then")," statements or use a nested ",(0,s.kt)("inlineCode",{parentName:"p"},"If-Then-Else")," structure. "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Nesting")," means placing an ",(0,s.kt)("strong",{parentName:"p"},"If-Then-Else")," structure within another ",(0,s.kt)("strong",{parentName:"p"},"If-Then-Else")," structure. "),(0,s.kt)("p",null,"The first approach, the three statements, is simplest: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning5()\n  If Time < 0.5 Then Msg = \u201cMorning.\u201d\n  If Time >= 0.5 And Time < 0.75 Then Msg = \u201cAfternoon.\u201d\n  If Time >= 0.75 Then Msg = \u201cEvening.\u201d\n  MsgBox \u201cGood\u201d & Msg\nEnd Sub\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Msg")," variable gets a different text value, depending on the time of day. "),(0,s.kt)("p",null,"The final ",(0,s.kt)("inlineCode",{parentName:"p"},"MsgBox")," statement displays the greeting: ",(0,s.kt)("em",{parentName:"p"},"Good Morning, Good Afternoon, or Good Evening"),". "),(0,s.kt)("p",null,"The following routine performs the same action but uses an ",(0,s.kt)("strong",{parentName:"p"},"If-Then-End If")," structure: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning6()\n  Dim Msg As String\n  If Time < 0.5 Then\n    Msg = \u201cMorning.\u201d\n  If Time >= 0.5 And Time < 0.75 Then\n    Msg = \u201cAfternoon.\u201d\n  If Time >= 0.75 Then\n    Msg = \u201cEvening.\u201d\n  End If\n  MsgBox \u201cGood\u201d & Msg\nEnd Sub\n")),(0,s.kt)("h2",{id:"if-elseif-else-examples"},"If-ElseIf-Else examples"),(0,s.kt)("p",null,"In the previous examples, every statement in the routine is executed \u2014 even in the morning. "),(0,s.kt)("p",null,"A more efficient structure would exit the routine as soon as a condition is found to be true. "),(0,s.kt)("p",null,"In the morning, for example, the procedure should display the Good Morning message and then exit \u2014 without evaluating the other ",(0,s.kt)("em",{parentName:"p"},"superfluous")," conditions. "),(0,s.kt)("p",null,"With a tiny routine like this, you don\u2019t have to worry about execution speed. "),(0,s.kt)("p",null,"But for larger applications in which speed is important, you should know about another syntax for the If-Then structure. "),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"ElseIf")," syntax follows: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"If condition Then\n[statements]\n[Else condition-n Then\n[elseifstatements]]\n[Else\n[elsestatements]]\n")),(0,s.kt)("p",null,"Here\u2019s how you can rewrite the ",(0,s.kt)("inlineCode",{parentName:"p"},"GreetMe")," routine by using this syntax: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub GoodMorning7()\n  Dim Msg As String\n  If Time < 0.5 Then\n    Msg = \u201cMorning.\u201d\n  ElseIf Time >= 0.5 And Time < 0.75 Then\n    Msg = \u201cAfternoon.\u201d\n  Else\n    Msg = \u201cEvening.\u201d\n  End If\n  MsgBox \u201cGood\u201d & Msg\nEnd Sub\n")),(0,s.kt)("p",null,"When a condition is ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),", VBA executes the conditional statements and the If structure ends. "),(0,s.kt)("p",null,"In other words, VBA doesn\u2019t waste time evaluating the extraneous conditions, which makes this procedure a bit more efficient than the previous examples. "),(0,s.kt)("p",null,"The trade-off (there are always trade-offs) is that the code is more difficult to understand. (Of course, you already knew that.) "),(0,s.kt)("h1",{id:"select-case-structure"},"Select Case structure"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Select")," Case structure is useful for decisions involving three or more options (although it also works with two options, but using ",(0,s.kt)("strong",{parentName:"p"},"If-Then-Else")," structure is more efficient for that). "),(0,s.kt)("p",null,"The syntax for the ",(0,s.kt)("inlineCode",{parentName:"p"},"Select")," Case structure follows: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Select Case testexpression\n[Case expressionlist-n \n  [statements-n]]\n[Case Else\n  [elsestatements]]\nEnd Select\n")),(0,s.kt)("p",null,"Don\u2019t be scared off by this official syntax. Using the ",(0,s.kt)("strong",{parentName:"p"},"Select Case structure")," is quite easy. "),(0,s.kt)("h2",{id:"select-case-example"},"Select Case example"),(0,s.kt)("p",null,"The following example shows how to use the ",(0,s.kt)("strong",{parentName:"p"},"Select Case structure"),". "),(0,s.kt)("p",null,"This also shows another way to code the examples presented in the previous section: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Sub SelectPartLength()\n  Dim PartNumber As Integer\n  Dim PartLength As Integer\n  PartNumber = InputBox(\u201cPlease Enter part number:\u201d)\n  Select Case PartNumber\n    Case Part001\n      PartLength = 1\n    Case Part002\n      PartLength = 2\n    Case Part003\n      PartLength = 3\n  End Select\n  MsgBox \u201cPart Length for this\u201d & PartNumber & \u201cis\u201d & PartLength\nEnd Sub\n")),(0,s.kt)("p",null,"In this example, the ",(0,s.kt)("inlineCode",{parentName:"p"},"PartNumber")," variable is being evaluated. "),(0,s.kt)("p",null,"The routine is checking for three different cases. "),(0,s.kt)("p",null,"Next post will be about ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"VBA Looping")),"."))}m.isMDXComponent=!0}}]);
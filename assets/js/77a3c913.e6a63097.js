"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6971],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),y=a,h=c["".concat(l,".").concat(y)]||c[y]||m[y]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},62047:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],i={title:"VBA Arrays",tags:["VBA"],permalink:"/vba/arrays/"},l=void 0,p={unversionedId:"vba-arrays",id:"vba-arrays",title:"VBA Arrays",description:"Most programming languages support arrays. An array is a group of variables that share a common name.",source:"@site/docs/vba/14-vba-arrays.md",sourceDirName:".",slug:"/vba-arrays",permalink:"/vba/vba-arrays",draft:!1,tags:[{label:"VBA",permalink:"/vba/tags/vba"}],version:"current",sidebarPosition:14,frontMatter:{title:"VBA Arrays",tags:["VBA"],permalink:"/vba/arrays/"},sidebar:"tutorialSidebar",previous:{title:"VBA Assignment Statements And Operators",permalink:"/vba/vba-assignment-statement-and-operator"},next:{title:"VBA Functions",permalink:"/vba/vba-functions"}},u={},m=[{value:"Declaring Arrays",id:"declaring-arrays",level:2}],c={toc:m};function y(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Most programming languages support ",(0,o.kt)("inlineCode",{parentName:"p"},"arrays"),". An ",(0,o.kt)("em",{parentName:"p"},"array")," is a group of variables that share a common name. "),(0,o.kt)("p",null,"You refer to a ",(0,o.kt)("em",{parentName:"p"},"specific variable")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," by using the ",(0,o.kt)("em",{parentName:"p"},"array name")," and an ",(0,o.kt)("em",{parentName:"p"},"index number")," in ",(0,o.kt)("em",{parentName:"p"},"parentheses"),". "),(0,o.kt)("p",null,"For example, you can define an array of 12 string variables to hold the names of the months of the year. "),(0,o.kt)("p",null,"If you name the array ",(0,o.kt)("inlineCode",{parentName:"p"},"MonthNames"),", you can refer to the first element of the array as ",(0,o.kt)("inlineCode",{parentName:"p"},"MonthNames(1)"),", the second element as ",(0,o.kt)("inlineCode",{parentName:"p"},"MonthNames(2)"),", and so on. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},'Dim MonthNames("Jan", "Feb", "Mar", "April", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec") As string\nprint(MonthNames(1))    \'print Feb\n')),(0,o.kt)("h2",{id:"declaring-arrays"},"Declaring Arrays"),(0,o.kt)("p",null,"Before you can use an ",(0,o.kt)("inlineCode",{parentName:"p"},"array"),", you must declare it. No exceptions. "),(0,o.kt)("p",null,"Unlike normal ",(0,o.kt)("em",{parentName:"p"},"variables"),", VBA is very strict about this rule. "),(0,o.kt)("p",null,"You declare an array with a ",(0,o.kt)("inlineCode",{parentName:"p"},"Dim")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Public")," statement, just as you declare a regular variable. "),(0,o.kt)("p",null,"However, you also need to specify the number of elements in the array. "),(0,o.kt)("p",null,"You do this by specifying the ",(0,o.kt)("em",{parentName:"p"},"first index number"),", the keyword To, and the last index number \u2014 all inside parentheses. "),(0,o.kt)("p",null,"The following example shows how to declare an array of ",(0,o.kt)("strong",{parentName:"p"},"100 integers"),": "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Dim MyArray(1 To 100) As Integer\n")),(0,o.kt)("p",null,"When you declare an ",(0,o.kt)("inlineCode",{parentName:"p"},"array"),", you can choose to specify only the ",(0,o.kt)("em",{parentName:"p"},"upper index"),". "),(0,o.kt)("p",null,"VBA assumes that 0 is the ",(0,o.kt)("em",{parentName:"p"},"lower index"),". Therefore, both of the following statements declare the same ",(0,o.kt)("em",{parentName:"p"},"101-element")," array: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Dim MyArray(1 To 100) As Integer\nDim MyArray(1 To 100)\n")),(0,o.kt)("p",null,"If you want VBA to assume that ",(0,o.kt)("strong",{parentName:"p"},"1")," (rather than ",(0,o.kt)("strong",{parentName:"p"},"0"),") is the ",(0,o.kt)("em",{parentName:"p"},"lower index")," for your arrays, include the following statement in the Declarations section of your module: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Option Base 1\n")),(0,o.kt)("p",null,"This statement forces VBA to use ",(0,o.kt)("strong",{parentName:"p"},"1")," as the first index number for arrays that declare only the ",(0,o.kt)("em",{parentName:"p"},"upper index"),". "),(0,o.kt)("p",null,"If above statement is present, the following statements are identical, both declaring a 100-element array: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Dim MyArray(1 To 100) As Integer\nDim MyArray(1 To 100)\n")),(0,o.kt)("p",null,"There are two other arrays"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Multi-dimensional array")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Dynamic array"))),(0,o.kt)("p",null,"But I don\u2019t think these two are that much useful for use to learn hence we ",(0,o.kt)("strong",{parentName:"p"},"will not")," delve into them."),(0,o.kt)("p",null,"Next post will be about ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"VBA Functions")),"."))}y.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[439],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=m(n),c=r,N=k["".concat(s,".").concat(c)]||k[c]||u[c]||o;return n?a.createElement(N,i(i({ref:t},p),{},{components:n})):a.createElement(N,i({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},61666:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return N},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return k}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=n(74753),l=["components"],s={categories:"Solidworks-macro",title:"Solidworks VBA Macro - Copy With Mate",permalink:"/solidworks-vba-macros/assembly-copy-with-mate/",tags:["Solidworks Macro"],id:"assembly-copy-with-mate"},m=void 0,p={unversionedId:"assembly-copy-with-mate",id:"assembly-copy-with-mate",title:"Solidworks VBA Macro - Copy With Mate",description:"",source:"@site/docs/solidworks-macros/025.3-assembly-copy-with-mate.md",sourceDirName:".",slug:"/assembly-copy-with-mate",permalink:"/solidworks-macros/assembly-copy-with-mate",draft:!1,tags:[{label:"Solidworks Macro",permalink:"/solidworks-macros/tags/solidworks-macro"}],version:"current",frontMatter:{categories:"Solidworks-macro",title:"Solidworks VBA Macro - Copy With Mate",permalink:"/solidworks-vba-macros/assembly-copy-with-mate/",tags:["Solidworks Macro"],id:"assembly-copy-with-mate"},sidebar:"tutorialSidebar",previous:{title:"Solidworks VBA Macro - Insert Virtual Assembly",permalink:"/solidworks-macros/assembly-insert-virtual-assembly"},next:{title:"Solidworks VBA Macro - Hide Component",permalink:"/solidworks-macros/assembly-hide-component"}},u={},k=[{value:"Objective",id:"objective",level:2},{value:"Results We Can Get",id:"results-we-can-get",level:2},{value:"Macro Video",id:"macro-video",level:2},{value:"VBA Macro",id:"vba-macro",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Steps To Follow",id:"steps-to-follow",level:2},{value:"Create Global Variables",id:"create-global-variables",level:3},{value:"Initialize Global Variables",id:"initialize-global-variables",level:3},{value:"Get Unit Conversion Factors",id:"get-unit-conversion-factors",level:3},{value:"Copy With Mate",id:"copy-with-mate",level:3}],c={toc:k};function N(e){var t=e.components,s=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"objective"},"Objective"),(0,o.kt)(i.Z,{mdxType:"AdComponent"}),(0,o.kt)("p",null,'In this article, we understand "how to" ',(0,o.kt)("strong",{parentName:"p"},"Copy With Mate")," in ",(0,o.kt)("strong",{parentName:"p"},"Assembly document")," from VBA macro."),(0,o.kt)("p",null,"This is most updated method of ",(0,o.kt)("strong",{parentName:"p"},"Copy Part/Assembly with Mate")," in an assembly document."),(0,o.kt)("h2",{id:"results-we-can-get"},"Results We Can Get"),(0,o.kt)("p",null,"Below image shows the result we get."),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:n(27617).Z},(0,o.kt)("img",{alt:"assembly-copy-with-mates",src:n(17469).Z,width:"1366",height:"728"}))),(0,o.kt)("p",null,"We ",(0,o.kt)("strong",{parentName:"p"},"Copy With Mate")," in simple manners."),(0,o.kt)("p",null,"There are no extra steps required."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To get the correct result, please follow the steps correctly."))),(0,o.kt)("h2",{id:"macro-video"},"Macro Video"),(0,o.kt)("p",null,"Below \ud83c\udfac video shows how to ",(0,o.kt)("strong",{parentName:"p"},"Copy With Mate")," from ",(0,o.kt)("em",{parentName:"p"},"SOLIDWORKS VBA Macros"),"."),(0,o.kt)("iframe",{src:"https://www.youtube.com/embed/Eyq3uO93PY8",frameborder:"0",allowfullscreen:!0,width:"100%",height:"500"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Above video is just for visualization and there is no explanation."))," "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"I have explained every line in this article."))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"It is advisable to watch video, since it helps you to better understand the process."))),(0,o.kt)("h2",{id:"vba-macro"},"VBA Macro"),(0,o.kt)("p",null,"Below is the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"VBA macro"))," for ",(0,o.kt)("em",{parentName:"p"},"Copy With Mate"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Option Explicit\n\n' Variable for Solidworks Application\nDim swApp As SldWorks.SldWorks\n\n' Variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n\n' Variable for Solidworks Assembly\nDim swAssembly As SldWorks.AssemblyDoc\n\n' Variable for Solidworks Component\nDim swComponent As SldWorks.Component2\n\n' Variable for Component array\nDim swComponentArray(0) As SldWorks.Component2\n\n' Variable to define if repeat the mate or not\nDim repeatArray(2) As Boolean\n\n' Set the value of mate if is accept the value\nDim valueArray(2) As Double\n\n' Boolean variable to check if Opereation is succeed or not\nDim status As Boolean\n\n' Main program for Copy with Mate\nSub main()\n\n  ' Set Solidworks Application variable to current application\n  Set swApp = Application.SldWorks\n  \n  ' Set Solidworks document variable to currently opened document\n  Set swDoc = swApp.ActiveDoc\n  \n  ' Check if Solidworks document is opened or not\n  If swDoc Is Nothing Then\n    MsgBox \"Solidworks document is not opened.\"\n    Exit Sub\n  End If\n  \n  ' Set Solidworks Assembly document\n  Set swAssembly = swDoc\n  \n  ' Get the selected face and set it to the Solidworks Face variable\n  Set swComponent = swDoc.SelectionManager.GetSelectedObject6(1, -1)\n  \n  ' If there are error\n  If swComponent Is Nothing Then\n    ' Inform user and exit function.\n    MsgBox \"Failed to get selected part.\"\n    Exit Sub\n  End If\n  \n  ' Local variables used as Conversion Factors\n  Dim LengthConversionFactor As Double\n  Dim AngleConversionFactor As Double\n  \n  ' Get updated unit conversion factors\n  Call GetUnitConversionFactors(LengthConversionFactor, AngleConversionFactor)\n  \n  ' Copy component with profile center mate\n  Set swComponentArray(0) = swComponent\n  \n  ' Variable for loop\n  Dim i As Integer\n  \n  ' Loop for setting values\n  For i = 0 To 2\n    \n    ' Repeat the mate\n    repeatArray(i) = True\n    \n    ' Set the value of mate\n    valueArray(i) = 10 * LengthConversionFactor\n    \n  Next\n  \n  ' Variables for Copy operation\n  Dim mateReferencesArray(2) As Object\n  Dim flipAlignmentArray(2) As Boolean\n  Dim flipDimensionArray(2) As Boolean\n  Dim lockRotationArray(2) As Boolean\n  Dim orientationArray(2) As Long\n  \n  ' Create Copy with mate\n  status = swAssembly.CopyWithMates2(swComponentArray, repeatArray, mateReferencesArray, valueArray, flipAlignmentArray, flipDimensionArray, lockRotationArray, orientationArray)\n  \nEnd Sub\n\n' Function to update Unit conversion factors\nFunction GetUnitConversionFactors(ByRef LengthConversionFactor As Double, ByRef AngleConversionFactor As Double)\n  ' Use a Select Case, to get the length of active Unit and set the different factors\n  Select Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n    \n    Case swMETER    ' If length is in Meter\n      LengthConversionFactor = 1\n      AngleConversionFactor = 1\n    \n    Case swMM       ' If length is in MM\n      LengthConversionFactor = 1 / 1000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swCM       ' If length is in CM\n      LengthConversionFactor = 1 / 100\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swINCHES   ' If length is in INCHES\n      LengthConversionFactor = 1 * 0.0254\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEET     ' If length is in FEET\n      LengthConversionFactor = 1 * (0.0254 * 12)\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swFEETINCHES     ' If length is in FEET & INCHES\n      LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swANGSTROM        ' If length is in ANGSTROM\n      LengthConversionFactor = 1 / 10000000000#\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swNANOMETER       ' If length is in NANOMETER\n      LengthConversionFactor = 1 / 1000000000\n      AngleConversionFactor = 1 * 0.01745329\n    \n    Case swMICRON       ' If length is in MICRON\n      LengthConversionFactor = 1 / 1000000\n      AngleConversionFactor = 1 * 0.01745329\n  End Select\nEnd Function\n")),(0,o.kt)(i.Z,{mdxType:"AdComponent"}),(0,o.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"There are some ",(0,o.kt)("em",{parentName:"p"},"prerequisites")," for this article."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Knowledge of ",(0,o.kt)("strong",{parentName:"li"},"VBA programming language")," is \u2757",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"required")),"."),(0,o.kt)("li",{parentName:"ul"},"We use existing parts in Assembly document."),(0,o.kt)("li",{parentName:"ul"},"Both components are fully constraint as shown in below image."),(0,o.kt)("li",{parentName:"ul"},"We select the part which we want to copy.")),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:n(137).Z},(0,o.kt)("img",{alt:"prerequisite",src:n(15919).Z,width:"1365",height:"578"}))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We will apply checks in this article, so the code we write, should be ",(0,o.kt)("strong",{parentName:"p"},"error free")," mostly."))),(0,o.kt)("h2",{id:"steps-to-follow"},"Steps To Follow"),(0,o.kt)("p",null,"This ",(0,o.kt)("strong",{parentName:"p"},"VBA macro")," can be divided into following sections:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Create Global Variables")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Initialize Global Variables")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Get unit conversion factors")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Copy With Mate"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Every section with each line is explained below."))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"I also give some ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"links (see icon \ud83d\ude80)"))," so that you can go through them if there are anything I explained in previous articles."))),(0,o.kt)("h3",{id:"create-global-variables"},"Create Global Variables"),(0,o.kt)("p",null,"In this section, we create global variables."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Option Explicit\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": Above line forces us to define every variable we are going to use. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/solidworks-macros/open-new-document"},"SOLIDWORKS Macros - Open new Part document"))," article.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable for Solidworks application\nDim swApp As SldWorks.SldWorks\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create a variable for ",(0,o.kt)("em",{parentName:"li"},"Solidworks application"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"swApp")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"SldWorks.SldWorks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.ISldWorks_members.html"},"online SOLIDWORKS API Help")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable for Solidworks document\nDim swDoc As SldWorks.ModelDoc2\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create a variable for ",(0,o.kt)("em",{parentName:"li"},"Solidworks document"),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"swDoc")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"SldWorks.ModelDoc2")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IModelDoc2_members.html"},"online SOLIDWORKS API Help")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable for Solidworks Assembly\nDim swAssembly As SldWorks.AssemblyDoc\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create a variable for ",(0,o.kt)("em",{parentName:"li"},"Solidworks Assembly"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"swAssembly")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"SldWorks.AssemblyDoc")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IAssemblyDoc_members.html"},"online SOLIDWORKS API Help")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable for Solidworks Component\nDim swComponent As SldWorks.Component2\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create a variable for ",(0,o.kt)("em",{parentName:"li"},"Solidworks Component"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"swComponent")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"SldWorks.Component2"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IComponent2_members.html"},"online SOLIDWORKS API Help")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable for Component array\nDim swComponentArray(0) As SldWorks.Component2\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create an array for ",(0,o.kt)("em",{parentName:"li"},"Solidworks Component"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"swComponentArray(0)")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"SldWorks.Component2"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://help.solidworks.com/2019/english/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IComponent2_members.html"},"online SOLIDWORKS API Help")),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable to define if repeat the mate or not\nDim repeatArray(2) As Boolean\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create an array to define if repeat the mate or not."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"repeatArray(2)")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"Boolean"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Set the value of mate if is accept the value\nDim valueArray(2) As Double\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create an array to set the value of mate if is accept the value."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"valueArray(2)")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"Double"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Boolean variable to check if Opereation is succeed or not\nDim status As Boolean\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create an variable to check if Opereation is succeed or not."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"status")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"Boolean"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"These all are our global variables."))),(0,o.kt)("p",null,"They are ",(0,o.kt)("strong",{parentName:"p"},"SOLIDWORKS API Objects"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Main program for Copy with Mate\nSub main()\n\nEnd Sub\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we create ",(0,o.kt)("em",{parentName:"li"},"main program for Copy with Mate"),"."),(0,o.kt)("li",{parentName:"ul"},"This is a ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Sub"))," procedure which has name of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"main")),". "),(0,o.kt)("li",{parentName:"ul"},"This procedure hold all the ",(0,o.kt)("em",{parentName:"li"},"statements (instructions)")," we give to computer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Detailed information \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/vba/vba-sub-and-function-procedure/"},"VBA Sub and Function Procedures"))," article of this website.")),(0,o.kt)("h3",{id:"initialize-global-variables"},"Initialize Global Variables"),(0,o.kt)("p",null,"In this section, we initialize global variables."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Set Solidworks Application variable to current application\nSet swApp = Application.SldWorks\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set ",(0,o.kt)("em",{parentName:"li"},"value")," of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swApp"))," variable."),(0,o.kt)("li",{parentName:"ul"},"This ",(0,o.kt)("em",{parentName:"li"},"value")," is currently opened Solidworks application.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Set Solidworks document variable to currently opened document\nSet swDoc = swApp.ActiveDoc\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set ",(0,o.kt)("em",{parentName:"li"},"value")," of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swDoc"))," variable."),(0,o.kt)("li",{parentName:"ul"},"This ",(0,o.kt)("em",{parentName:"li"},"value")," is currently ",(0,o.kt)("em",{parentName:"li"},"opened part document"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},'\' Check if Solidworks document is opened or not\nIf swDoc Is Nothing Then\n  MsgBox ("Solidworks document is not opened.")\n  Exit Sub\nEnd If\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above code block, we check if we successfully set the value of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swDoc"))," variable."),(0,o.kt)("li",{parentName:"ul"},"We use \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/vba/vba-if-then-structure-select-case/"},"IF statement"))," for checking."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Condition"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swDoc Is Nothing"))),(0,o.kt)("li",{parentName:"ul"},"When this condition is ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"True")),", ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"We show and \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/vba/vba-msgBox-function/"},"message window"))," to user."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Message"),": ",(0,o.kt)("em",{parentName:"li"},"SOLIDWORKS document is not opened.")),(0,o.kt)("li",{parentName:"ul"},"Then we ",(0,o.kt)("strong",{parentName:"li"},"stop")," our macro here.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Set Solidworks Assembly document\nSet swAssembly = swDoc\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set ",(0,o.kt)("em",{parentName:"li"},"value")," of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swAssembly"))," variable."),(0,o.kt)("li",{parentName:"ul"},"This ",(0,o.kt)("em",{parentName:"li"},"value")," is ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swDoc"))," variable.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Get the selected face and set it to the Solidworks Face variable\nSet swComponent = swDoc.SelectionManager.GetSelectedObject6(1, -1)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set ",(0,o.kt)("em",{parentName:"li"},"value")," of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swComponent"))," variable."),(0,o.kt)("li",{parentName:"ul"},"We set the value from ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"GetSelectedObject6"))," method."),(0,o.kt)("li",{parentName:"ul"},"This ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"GetSelectedObject6"))," method is part of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"SelectionManager"))," object."),(0,o.kt)("li",{parentName:"ul"},"This ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"SelectionManager"))," object is part of swDoc object.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' If there are error\nIf swComponent Is Nothing Then\n  ' Inform user and exit function.\n  MsgBox \"Failed to get selected part.\"\n  Exit Sub\nEnd If\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above code block, we check if we successfully set the value of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swComponent"))," variable."),(0,o.kt)("li",{parentName:"ul"},"We use \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/vba/vba-if-then-structure-select-case/"},"IF statement"))," for checking."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Condition"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swComponent Is Nothing"))),(0,o.kt)("li",{parentName:"ul"},"When this condition is ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"True")),", ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"We show and \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/vba/vba-msgBox-function/"},"message window"))," to user."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Message"),": ",(0,o.kt)("em",{parentName:"li"},"Failed to get selected part.")),(0,o.kt)("li",{parentName:"ul"},"Then we ",(0,o.kt)("strong",{parentName:"li"},"stop")," our macro here.")))),(0,o.kt)(i.Z,{mdxType:"AdComponent"}),(0,o.kt)("h3",{id:"get-unit-conversion-factors"},"Get Unit Conversion Factors"),(0,o.kt)("p",null,"In this section we get ",(0,o.kt)("em",{parentName:"p"},"Unit conversion factors")," for new distance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Local variables used as Conversion Factors\nDim LengthConversionFactor As Double\nDim AngleConversionFactor As Double\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create a variables to store ",(0,o.kt)("strong",{parentName:"li"},"Unit Conversion Factors"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"LengthConversionFactor"))," and ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"AngleConversionFactor"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Double")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Get updated unit conversion factors\nCall GetUnitConversionFactors(LengthConversionFactor, AngleConversionFactor)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we call a function."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Function Name"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"GetUnitConversionFactors"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Function Parameters"),": They are",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"LengthConversionFactor"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"AngleConversionFactor")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Function to update Unit conversion factors\nFunction GetUnitConversionFactors(ByRef LengthConversionFactor As Double, ByRef AngleConversionFactor As Double)\n  \nEnd Function\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we create a ",(0,o.kt)("strong",{parentName:"li"},"Function")," to update Unit conversion factors for editing Distance mate."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Function Name"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"GetUnitConversionFactors"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": Hold all the ",(0,o.kt)("em",{parentName:"li"},"statements (instructions)")," for ",(0,o.kt)("em",{parentName:"li"},"getting Unit conversion factors"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reference"),": Detailed information \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"/vba/vba-sub-and-function-procedure/"},"VBA Sub and Function Procedures"))," article of this website.")),(0,o.kt)("p",null,"This function has 2 parameters as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ByRef LengthConversionFactor As Double")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ByRef AngleConversionFactor As Double")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Above parameters, passed as ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ByRef")),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"These parameters get the values in this function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But we are not using them in this function, but we use them in ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"main"))," procedure.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ByRef"))," provides us the ability to use the updated variables in ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"main"))," procedure.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Reference"),": For more details please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference"},"this link")),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Use a Select Case, to get the length of active Unit and set the different factors\nSelect Case swDoc.GetUnits(0)       ' GetUnits function gives us, active unit\n  \n  Case swMETER    ' If length is in Meter\n    LengthConversionFactor = 1\n    AngleConversionFactor = 1\n  \n  Case swMM       ' If length is in MM\n    LengthConversionFactor = 1 / 1000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swCM       ' If length is in CM\n    LengthConversionFactor = 1 / 100\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swINCHES   ' If length is in INCHES\n    LengthConversionFactor = 1 * 0.0254\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEET     ' If length is in FEET\n    LengthConversionFactor = 1 * (0.0254 * 12)\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swFEETINCHES     ' If length is in FEET & INCHES\n    LengthConversionFactor = 1 * 0.0254  ' For length we use sama as Inch\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swANGSTROM        ' If length is in ANGSTROM\n    LengthConversionFactor = 1 / 10000000000#\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swNANOMETER       ' If length is in NANOMETER\n    LengthConversionFactor = 1 / 1000000000\n    AngleConversionFactor = 1 * 0.01745329\n  \n  Case swMICRON       ' If length is in MICRON\n    LengthConversionFactor = 1 / 1000000\n    AngleConversionFactor = 1 * 0.01745329\nEnd Select\n")),(0,o.kt)("p",null,"I have already explained about this in previous \ud83d\ude80",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/solidworks-macros/unit-correction/"},"Solidworks Macro - Fix Unit Issue"))," article in this website."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Please visit \ud83d\ude80",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/solidworks-macros/unit-correction/"},"Solidworks Macro - Fix Unit Issue"))," article for more details."))),(0,o.kt)("h3",{id:"copy-with-mate"},"Copy With Mate"),(0,o.kt)("p",null,"In this section, we perform ",(0,o.kt)("em",{parentName:"p"},"Copy With Mate")," action."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Copy component with profile center mate\nSet swComponentArray(0) = swComponent\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set the value of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swComponentArray"))," variable."),(0,o.kt)("li",{parentName:"ul"},"Since we want to copy only 1 part."),(0,o.kt)("li",{parentName:"ul"},"Hence we set only 1 element of array."),(0,o.kt)("li",{parentName:"ul"},"This value is ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"swComponent"))," variable.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variable for loop\nDim i As Integer\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": In above line, we create a variable for ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Loop")),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Variable Name"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"i"))," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Type"),": ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Integer")),". ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Loop for setting values\nFor i = 0 To 2\n\nNext\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we create an Loop for setting values."),(0,o.kt)("li",{parentName:"ul"},"We set the values of variables required for Copy mate.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Repeat the mate\nrepeatArray(i) = True\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set the value of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"repeatArray"))," array variable."),(0,o.kt)("li",{parentName:"ul"},"This array tell that we want to repeat the mates in new component or not."),(0,o.kt)("li",{parentName:"ul"},"Setting the value to True confirms repeat mate.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Set the value of mate\nvalueArray(i) = 10 * LengthConversionFactor\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above line, we set the value of ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"valueArray"))," array variable."),(0,o.kt)("li",{parentName:"ul"},"This array sets the value for distance or angle of each mate.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Variables for Copy operation\nDim mateReferencesArray(2) As Object\nDim flipAlignmentArray(2) As Boolean\nDim flipDimensionArray(2) As Boolean\nDim lockRotationArray(2) As Boolean\nDim orientationArray(2) As Long\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In above code, we create some array variables."),(0,o.kt)("li",{parentName:"ul"},"These arrray variables are of different types i.e. ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Object")),", ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Boolean")),", ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"Long")),"."),(0,o.kt)("li",{parentName:"ul"},"We did not set any value for these arrays. We just need them for copy operation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"' Create Copy with mate\nstatus = swAssembly.CopyWithMates2(swComponentArray, repeatArray, mateReferencesArray, valueArray, flipAlignmentArray, flipDimensionArray, lockRotationArray, orientationArray)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In above code, we ",(0,o.kt)("strong",{parentName:"p"},"Copy With Mate")," into assemly.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For this, we use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"CopyWithMates2"))," method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"CopyWithMates2"))," method is part of ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"swAssembly"))," variable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This method takes 1 parameter."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"ComponentsToCopy"),": ",(0,o.kt)("em",{parentName:"li"},"Array of components to copy.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Repeat"),": ",(0,o.kt)("em",{parentName:"li"},"Array of boolean values; each value indicates whether to use the existing mate reference for the corresponding component to copy; if ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"True")),", copies the existing mate reference; if ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"False")),", uses the corresponding entry in the NewEntityToMateTo array for the new mate reference.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"NewEnityToMateTo"),": ",(0,o.kt)("em",{parentName:"li"},"Array of new mate references that map to the Repeat array; if an entry in the Repeat array is ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"False")),", then the corresponding entry in this array is the new entity with which to mate the component to copy.")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Values"),": ",(0,o.kt)("em",{parentName:"li"},"Array of distance or angle values for the mate references; specify distance in meters and angle in radians; valid for distance, angle, and profile center mates only.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"FlipAlignment"),": ",(0,o.kt)("em",{parentName:"li"},"Array of booleans that map to the NewEntityToMateTo array; each value indicates the corresponding mate's alignment; ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"True"))," to flip alignment, ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"False"))," to not.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"FlipDimension"),": ",(0,o.kt)("em",{parentName:"li"},"Array of booleans that map to the Values array; each value indicates the corresponding mate's distance; ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"True"))," for a positive distance dimension, ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"False"))," for a negative distance dimension; valid for distance, angle, and profile center mates only.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LockRotation"),": ",(0,o.kt)("em",{parentName:"li"},"Array of booleans that map to the NewEntityToMateTo array; ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"True"))," to prevent the components from rotating, ",(0,o.kt)("strong",{parentName:"em"},(0,o.kt)("inlineCode",{parentName:"strong"},"False"))," to allow the components to rotate; valid for concentric and profile center mates only.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Orientation"),": ",(0,o.kt)("em",{parentName:"li"},"Array of longs or integers that map to the Values array; each long or integer indicates the number of clicks in the user interface with which to orient the mate; a positive value indicates to orient the mate clockwise, a negative value indicates to orient the mate counterclockwise; valid for profile center mates only.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Return Value")," : ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"True"))," if calling this method succeeded, ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"False"))," if it failed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our code, I have used following values:"),(0,o.kt)("table",{parentName:"li"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Value Used"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"ComponentsToCopy")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"swComponentArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Repeat")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"repeatArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"NewEnityToMateTo")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"mateReferencesArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Values")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"valueArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"FlipAlignment")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"flipAlignmentArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"FlipDimension")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"flipDimensionArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"LockRotation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"lockRotationArray"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Orientation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"orientationArray")))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Reference"),": For more details please visit \ud83d\ude80 ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://help.solidworks.com/2019/english/api/sldworksapi/solidworks.interop.sldworks~solidworks.interop.sldworks.iassemblydoc~insertnewvirtualassembly.html"},"online SOLIDWORKS API Help")),"."))),(0,o.kt)("p",null,"Now we run the macro and after running macro we get a new part/assembly from ",(0,o.kt)("strong",{parentName:"p"},"Copy with Mate")," operation as shown in below image."),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:n(27617).Z},(0,o.kt)("img",{alt:"assembly-copy-with-mates",src:n(17469).Z,width:"1366",height:"728"}))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This is it !!!")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"I hope my efforts will helpful to someone!")," \ud83d\ude0a"),(0,o.kt)("p",null,"If you found anything to ",(0,o.kt)("strong",{parentName:"p"},"add or update"),", please let me know on my ",(0,o.kt)("em",{parentName:"p"},"e-mail")," \ud83d\udce7."),(0,o.kt)("p",null,"Hope this post helps you to ",(0,o.kt)("strong",{parentName:"p"},"Copy With Mate")," with SOLIDWORKS VBA Macros."),(0,o.kt)("p",null,"For more such tutorials on ",(0,o.kt)("strong",{parentName:"p"},"SOLIDWORKS VBA Macro"),", do come to this website after sometime."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"If you like the post then please share it with your friends also.")," \ud83d\ude4f\ud83c\udffb"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Do let me know by you like this post or not!")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Till then, Happy learning!!!")))}N.isMDXComponent=!0},74753:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(94578),r=n(67294),o=function(e){function t(){return e.apply(this,arguments)||this}(0,a.Z)(t,e);var n=t.prototype;return n.componentDidMount=function(){var e;(e=document.createElement("script")).src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js",e.async=!0,e.defer=!0,document.body.insertBefore(e,document.body.firstChild),(window.adsbygoogle=window.adsbygoogle||[]).push({})},n.render=function(){return r.createElement("ins",{className:"adsbygoogle",style:{display:"block"},"data-ad-client":"ca-pub-8158659264340002","data-ad-slot":"6644001766","data-ad-format":"auto","data-full-width-responsive":"true"})},t}(r.Component)},27617:function(e,t,n){t.Z=n.p+"assets/files/final-result-gif-aca68a6bea7cea9879b8994c354efd92.gif"},137:function(e,t,n){t.Z=n.p+"assets/files/prerequisite-099a7fc7483f577f3c3010ef152a29af.png"},17469:function(e,t,n){t.Z=n.p+"assets/images/final-result-gif-aca68a6bea7cea9879b8994c354efd92.gif"},15919:function(e,t,n){t.Z=n.p+"assets/images/prerequisite-099a7fc7483f577f3c3010ef152a29af.png"}}]);
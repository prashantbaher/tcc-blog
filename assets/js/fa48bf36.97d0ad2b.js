"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7967],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return t?a.createElement(k,i(i({ref:n},s),{},{components:t})):a.createElement(k,i({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u.mdxType="string"==typeof e?e:r,i[1]=u;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},10154:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return c}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],u={title:"Sub and Function Procedures",tags:["VBA"],permalink:"/vba/sub-and-function-procedure/"},p=void 0,l={unversionedId:"vba-sub-and-function-procedure",id:"vba-sub-and-function-procedure",title:"Sub and Function Procedures",description:"The VBA code that you write in the Visual Basic Editor is known as a procedure.",source:"@site/docs/vba/04-vba-sub-and-function-procedure.md",sourceDirName:".",slug:"/vba-sub-and-function-procedure",permalink:"/vba/vba-sub-and-function-procedure",draft:!1,tags:[{label:"VBA",permalink:"/vba/tags/vba"}],version:"current",sidebarPosition:4,frontMatter:{title:"Sub and Function Procedures",tags:["VBA"],permalink:"/vba/sub-and-function-procedure/"},sidebar:"tutorialSidebar",previous:{title:"VBE Windows",permalink:"/vba/vbe-windows"},next:{title:"Executing Sub and Function Procedures",permalink:"/vba/vba-executing-procedures"}},s={},c=[{value:"Sub procedures",id:"sub-procedures",level:2},{value:"Function procedures",id:"function-procedures",level:2},{value:"Naming Subs and Functions",id:"naming-subs-and-functions",level:2}],m={toc:c};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"VBA")," code that you write in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Visual Basic Editor")," is known as a ",(0,o.kt)("inlineCode",{parentName:"p"},"procedure"),". "),(0,o.kt)("p",null,"The two most common types of procedures are ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Function"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"Sub")," procedure is a group of ",(0,o.kt)("inlineCode",{parentName:"li"},"VBA statements")," that performs an ",(0,o.kt)("em",{parentName:"li"},"action")," (or ",(0,o.kt)("em",{parentName:"li"},"actions"),")."),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"Function")," procedure is a group of ",(0,o.kt)("inlineCode",{parentName:"li"},"VBA statements")," that performs a ",(0,o.kt)("em",{parentName:"li"},"calculation")," and returns a ",(0,o.kt)("em",{parentName:"li"},"single value"),".")),(0,o.kt)("p",null,"Most of the macros you write in ",(0,o.kt)("inlineCode",{parentName:"p"},"VBA")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," procedures. "),(0,o.kt)("p",null,"You can think of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub"),' procedure as being like a command: "Execute the ',(0,o.kt)("inlineCode",{parentName:"p"},"Sub"),' procedure and something happens". '),(0,o.kt)("p",null,"Exactly what happens depends on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," procedure\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"VBA code"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Function")," is also a procedure, but it\u2019s quite different from a ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub"),". "),(0,o.kt)("p",null,"For understanding a ",(0,o.kt)("inlineCode",{parentName:"p"},"Function")," let\u2019s take an example from ",(0,o.kt)("inlineCode",{parentName:"p"},"MS Excel"),". "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Excel")," includes many worksheet functions that you use every day. Examples include ",(0,o.kt)("inlineCode",{parentName:"p"},"SUM"),". This ",(0,o.kt)("inlineCode",{parentName:"p"},"SUM function")," takes input in form of values and then it does calculation behind the scene, and then returns a single value. "),(0,o.kt)("p",null,"The same goes for ",(0,o.kt)("inlineCode",{parentName:"p"},"Function procedure")," that you develop with ",(0,o.kt)("inlineCode",{parentName:"p"},"VBA"),"."),(0,o.kt)("h2",{id:"sub-procedures"},"Sub procedures"),(0,o.kt)("p",null,"Every ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," procedure starts with the keyword ",(0,o.kt)("strong",{parentName:"p"},"Sub")," and ends with an ",(0,o.kt)("strong",{parentName:"p"},"End Sub")," statement. Here\u2019s an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},'Sub Message()\n   MsgBox "That\u2019s all folks!"\nEnd Sub\n')),(0,o.kt)("p",null,"This example shows a procedure named ",(0,o.kt)("inlineCode",{parentName:"p"},"Message"),". A set of ",(0,o.kt)("em",{parentName:"p"},"parentheses")," follows the procedure\u2019s name. "),(0,o.kt)("p",null,"In most cases, these ",(0,o.kt)("em",{parentName:"p"},"parentheses")," are empty. However, you may pass arguments to ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub procedures")," from other procedures. "),(0,o.kt)("p",null,"If your ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," uses arguments, list them between the parentheses."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Please remember when you record a macro with the macro recorder; the result is always a Sub procedure.")),(0,o.kt)("h2",{id:"function-procedures"},"Function procedures"),(0,o.kt)("p",null,"Every ",(0,o.kt)("inlineCode",{parentName:"p"},"Function")," procedure starts with the keyword ",(0,o.kt)("strong",{parentName:"p"},"Function")," and ends with an ",(0,o.kt)("strong",{parentName:"p"},"End Function")," statement. "),(0,o.kt)("p",null,"Here\u2019s an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vb",metastring:"showlinenumbers showLineNumbers",showlinenumbers:!0,showLineNumbers:!0},"Function CubeRoot(number)\n   CubeRoot = number ^ (1/3)\nEnd Function\n")),(0,o.kt)("p",null,"This function, named ",(0,o.kt)("inlineCode",{parentName:"p"},"CubeRoot"),", takes one argument (named ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),"), which is enclosed in ",(0,o.kt)("em",{parentName:"p"},"parentheses"),". "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Functions")," can have any number of arguments or none at all. "),(0,o.kt)("p",null,"When you execute the function, it returns a ",(0,o.kt)("em",{parentName:"p"},"single value")," \u2014 the cube root of the argument passed to the function."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"VBA")," allows you to specify what type of information (also known as ",(0,o.kt)("inlineCode",{parentName:"p"},"data type"),") is returned by a ",(0,o.kt)("inlineCode",{parentName:"p"},"Function procedure"),". "),(0,o.kt)("p",null,"You can execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"Function procedure")," from another procedure (a ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," or another ",(0,o.kt)("inlineCode",{parentName:"p"},"Function procedure"),")."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Please note that no matter how hard you try, you can\u2019t use the macro recorder to record a Function procedure. You must manually enter every Function procedure that you create.")),(0,o.kt)("h2",{id:"naming-subs-and-functions"},"Naming Subs and Functions"),(0,o.kt)("p",null,"Like humans & pets, every ",(0,o.kt)("inlineCode",{parentName:"p"},"Sub")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Function")," procedure must have a name. "),(0,o.kt)("p",null,"Although it is perfectly acceptable to name anything what you want, it\u2019s usually not a good idea to use such a ",(0,o.kt)("em",{parentName:"p"},"freewheeling")," attitude when ",(0,o.kt)("inlineCode",{parentName:"p"},"naming procedures"),". "),(0,o.kt)("p",null,"When naming ",(0,o.kt)("inlineCode",{parentName:"p"},"procedures"),", you must follow a ",(0,o.kt)("strong",{parentName:"p"},"few rules"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can use ",(0,o.kt)("em",{parentName:"p"},"letters, numbers, and some punctuation characters"),", but the ",(0,o.kt)("strong",{parentName:"p"},"first")," character must be a ",(0,o.kt)("strong",{parentName:"p"},"letter"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You ",(0,o.kt)("strong",{parentName:"p"},"can\u2019t")," use any spaces or periods in the name.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"VBA")," does not distinguish between ",(0,o.kt)("em",{parentName:"p"},"uppercase")," and ",(0,o.kt)("em",{parentName:"p"},"lowercase")," letters.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You ",(0,o.kt)("strong",{parentName:"p"},"can\u2019t")," embed any of the following characters in a procedure name: ",(0,o.kt)("strong",{parentName:"p"},"#, $, %, &, @, ^, *, or !"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Procedure")," names can be no longer than ",(0,o.kt)("em",{parentName:"p"},"255 characters"),". (Of course, you would never make a procedure name this long.)"))),(0,o.kt)("p",null,"Ideally, a procedure\u2019s name describes the routine\u2019s purpose."),(0,o.kt)("p",null,"Some programmers prefer using ",(0,o.kt)("inlineCode",{parentName:"p"},"sentence-like")," names that provide a complete description of the procedure. "),(0,o.kt)("p",null,"Some examples include ",(0,o.kt)("inlineCode",{parentName:"p"},"WriteReportToTextFile")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Get_Print_Options_and_Print_Report"),". "),(0,o.kt)("p",null,"The use of such lengthy names has ",(0,o.kt)("em",{parentName:"p"},"pros")," and ",(0,o.kt)("em",{parentName:"p"},"cons"),". "),(0,o.kt)("p",null,"On the one hand, such names are ",(0,o.kt)("em",{parentName:"p"},"descriptive")," and usually ",(0,o.kt)("em",{parentName:"p"},"unambiguous"),".\nOn the other hand, they take longer to type. "),(0,o.kt)("p",null,"Everyone develops a naming style, but the main objectives are to make the names descriptive and to avoid meaningless names such as ",(0,o.kt)("strong",{parentName:"p"},"Update, Fix, and Macro1"),"."),(0,o.kt)("p",null,"Next post will be about ",(0,o.kt)("inlineCode",{parentName:"p"},"Executing Sub & Function procedures"),"."))}d.isMDXComponent=!0}}]);
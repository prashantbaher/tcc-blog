I"/<<p>As the title suggested, in this post, we open new document <strong>from</strong> <em>Solidworks VBA macros</em>.</p>

<p>Also we <em>understand</em> each and every line of written code. So that you can understand why we written those lines and get some knowledge about how to write macro properly.</p>

<p>Please see below video for visual details.</p>

<iframe src="https://www.youtube.com/embed/SXrdQ0vrTyI" frameborder="0" allowfullscreen=""></iframe>

<p>To do this, we first need to create a new empty macro. If you don’t know how to create an empty macro; then please go to this <strong><a href="/solidworks-macros/vba-in-solidworks">VBA in Solidworks</a></strong> post.</p>

<p>After creating an empty macro, you need to copy paste below code into this empty macro.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Option</span> <span class="n">Explicit</span>

<span class="c1">' Creating variable for Solidworks application</span>
<span class="k">Dim</span> <span class="nv">swApp</span> <span class="ow">As</span> <span class="n">SldWorks</span><span class="p">.</span><span class="n">SldWorks</span>
<span class="c1">' Creating variable for Solidworks document</span>
<span class="k">Dim</span> <span class="nv">swDoc</span> <span class="ow">As</span> <span class="n">SldWorks</span><span class="p">.</span><span class="n">ModelDoc2</span>

<span class="c1">' Main function of our VBA program</span>
<span class="k">Sub</span> <span class="nf">main</span><span class="p">()</span>

    <span class="c1">' Setting Solidworks variable to Solidworks application</span>
    <span class="k">Set</span> <span class="n">swApp</span> <span class="o">=</span> <span class="n">Application</span><span class="p">.</span><span class="n">SldWorks</span>
    
    <span class="c1">' Creating string type variable for storing default part location</span>
    <span class="k">Dim</span> <span class="nv">defaultTemplate</span> <span class="ow">As</span> <span class="kt">String</span>
    <span class="c1">' Setting value of this string type variable to "Default part template"</span>
    <span class="n">defaultTemplate</span> <span class="o">=</span> <span class="n">swApp</span><span class="p">.</span><span class="n">GetUserPreferenceStringValue</span><span class="p">(</span><span class="n">swUserPreferenceStringValue_e</span><span class="p">.</span><span class="n">swDefaultTemplatePart</span><span class="p">)</span>

    <span class="c1">' Setting Solidworks document to new part document</span>
    <span class="k">Set</span> <span class="n">swDoc</span> <span class="o">=</span> <span class="n">swApp</span><span class="p">.</span><span class="n">NewDocument</span><span class="p">(</span><span class="n">defaultTemplate</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>This code opens <strong>a new default part</strong> template in Solidworks.</p>

<p>Now let us walk through <em>each line</em> in the above code, and <strong>understand</strong> the meaning of every line.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Option</span> <span class="n">Explicit</span>
</code></pre></div></div>

<p>This line forces us to define every variable we are going to use.</p>

<p>This is <strong>very important</strong> because if you don’t declare above line, it is very difficult to caught <em>typo errors</em> in variable names.</p>

<p>This type of error comes, when you mistakenly type wrong spelling of your defined variable.</p>

<p>In this case, VBE thinks that you have defined a new variable and use this variable.</p>

<p>This causes issues because your program runs perfectly but you didn’t get the desired result.</p>

<p>This most of the time discourage people and ultimately they left the programming.</p>

<p>So be on safe side and use this <strong>Option Explicit</strong> line in your every module.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Creating variable for Solidworks application</span>
<span class="k">Dim</span> <span class="nv">swApp</span> <span class="ow">As</span> <span class="n">SldWorks</span><span class="p">.</span><span class="n">SldWorks</span>
<span class="c1">' Creating variable for Solidworks document</span>
<span class="k">Dim</span> <span class="nv">swDoc</span> <span class="ow">As</span> <span class="n">SldWorks</span><span class="p">.</span><span class="n">ModelDoc2</span>
</code></pre></div></div>

<p>As the comments in above code sample shows, in these 2 lines we are creating variables of different type.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Creating variable for Solidworks application</span>
<span class="k">Dim</span> <span class="nv">swApp</span> <span class="ow">As</span> <span class="n">SldWorks</span><span class="p">.</span><span class="n">SldWorks</span>
</code></pre></div></div>

<p>In this line, we are creating a variable which we named as <code class="language-plaintext highlighter-rouge">swApp</code> and the type of this <code class="language-plaintext highlighter-rouge">swApp</code> variable is <code class="language-plaintext highlighter-rouge">SldWorks.SldWorks</code>.</p>

<p>If we <strong>omit</strong> 1 <code class="language-plaintext highlighter-rouge">SldWorks</code>, then our <em>VBE</em> show error if we try to run this macro.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Creating variable for Solidworks document</span>
<span class="k">Dim</span> <span class="nv">swDoc</span> <span class="ow">As</span> <span class="n">SldWorks</span><span class="p">.</span><span class="n">ModelDoc2</span>
</code></pre></div></div>

<p>In this line, we are creating a variable which we named as <code class="language-plaintext highlighter-rouge">swDoc</code> and the type of this <code class="language-plaintext highlighter-rouge">swDoc</code> variable is <code class="language-plaintext highlighter-rouge">SldWorks.ModelDoc2</code>.</p>

<p>Here, if we omit <code class="language-plaintext highlighter-rouge">SldWorks</code>, the compiler won’t give error. I used it to know who is the parent object.</p>

<p><code class="language-plaintext highlighter-rouge">ModelDoc2</code> is the a <strong>object</strong>, which holds properties and methods related to this a document.</p>

<p>These methods and properties are common to <em>part</em>, <em>assembly</em> and <em>drawing</em> documents.</p>

<p>You can see more about <code class="language-plaintext highlighter-rouge">ModelDoc2</code> in this help <a href="http://help.solidworks.com/2019/English/api/sldworksapi/SolidWorks.Interop.sldworks~SolidWorks.Interop.sldworks.IModelDoc2.html?verRedirect=1">link</a>.</p>

<p>Next is our <code class="language-plaintext highlighter-rouge">Sub</code> procedure named <code class="language-plaintext highlighter-rouge">main</code>. This procedure hold all the <em>statements (instructions)</em> we give to computer.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Setting Solidworks variable to Solidworks application</span>
<span class="k">Set</span> <span class="n">swApp</span> <span class="o">=</span> <span class="n">Application</span><span class="p">.</span><span class="n">SldWorks</span>
</code></pre></div></div>

<p>In this line, we are setting the value of our Solidworks variable which we define earlier to Solidworks application.</p>

<blockquote>
  <p>Now it important to know that when you defined a variable of different type, which is not a common type, then you need to set the variable also.</p>
</blockquote>

<p>This is a standard way to set Solidworks application. This way is given in many Solidworks API VBA example.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Creating string type variable for storing default part location</span>
<span class="k">Dim</span> <span class="nv">defaultTemplate</span> <span class="ow">As</span> <span class="kt">String</span>
<span class="c1">' Setting value of this string type variable to "Default part template"</span>
<span class="n">defaultTemplate</span> <span class="o">=</span> <span class="n">swApp</span><span class="p">.</span><span class="n">GetUserPreferenceStringValue</span><span class="p">(</span><span class="n">swUserPreferenceStringValue_e</span><span class="p">.</span><span class="n">swDefaultTemplatePart</span><span class="p">)</span>
</code></pre></div></div>

<p>In 1st statement of above example, we are defining a variable of <code class="language-plaintext highlighter-rouge">string</code> type and named it as <code class="language-plaintext highlighter-rouge">defaultTemplate</code>.</p>

<p>This variable <code class="language-plaintext highlighter-rouge">defaultTemplate</code>, hold the location the location of <strong>Default Part Template</strong>.</p>

<p>In 2nd line of above example. we assign value to our newly define <code class="language-plaintext highlighter-rouge">defaultTemplate</code> variable.</p>

<p>We assign the value by using a <em>Method</em> named <code class="language-plaintext highlighter-rouge">GetUserPreferenceStringValue()</code>. This method is a part of our main Solidworks variable <code class="language-plaintext highlighter-rouge">swApp</code>.</p>

<p>To access this method, we need to write <code class="language-plaintext highlighter-rouge">swApp</code> variable and then use a “.” to access the <em>Public properties</em> and <em>Methods</em> inside this variable.</p>

<blockquote>
  <p>This “.” is called <strong>Dot operator</strong>. This operator provides us the access to the <strong><em>Public properties</em></strong> and <strong><em>Methods</em></strong> inside an object.</p>
</blockquote>

<p>When you type after a “.” you will notice that <em>Visual Basic Editor</em> automatically provides a list of properties and methods inside this <code class="language-plaintext highlighter-rouge">swApp</code> object. This helps us to write correct name for these methods and properties.</p>

<p>Now we get the function <code class="language-plaintext highlighter-rouge">GetUserPreferenceStringValue()</code>. But this function needs some input to work with. This inputs are generally called <strong>Parameters</strong>.</p>

<blockquote>
  <p>In programming voculabury, we need to pass the parameter to this function so that this function can worked.</p>
</blockquote>

<p>This input parameter is a single value from a list of other values. This list is stored in <code class="language-plaintext highlighter-rouge">swUserPreferenceStringValue_e</code> object.</p>

<p>In Solidworks API, if anything has <code class="language-plaintext highlighter-rouge">_e</code> after it, it means that this object contains some type of lists. It is important to know because we frequently use these type of lists. They are called <strong>enum</strong>. The value they hold is called <strong>Constant</strong>.</p>

<p>So our function <code class="language-plaintext highlighter-rouge">GetUserPreferenceStringValue()</code> needs some constant value from <code class="language-plaintext highlighter-rouge">swUserPreferenceStringValue_e</code> enum list to work.</p>

<p>Since we want <em>Default part template</em>, we use <code class="language-plaintext highlighter-rouge">swDefaultTemplatePart</code> constant value from the <code class="language-plaintext highlighter-rouge">swUserPreferenceStringValue_e</code> enum list.</p>

<blockquote>
  <p>Please note that there are lots of values inside this enum list. You can see these values from this <a href="http://help.solidworks.com/2019/English/api/swconst/SOLIDWORKS.Interop.swconst~SOLIDWORKS.Interop.swconst.swUserPreferenceStringValue_e.html">link</a>].</p>
</blockquote>

<p>Now we just need to set the value of our <code class="language-plaintext highlighter-rouge">swDoc</code> variable to new document. We set the value as shown in below code snippet.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Setting Solidworks document to new part document</span>
<span class="k">Set</span> <span class="n">swDoc</span> <span class="o">=</span> <span class="n">swApp</span><span class="p">.</span><span class="n">NewDocument</span><span class="p">(</span><span class="n">defaultTemplate</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>To set the value of <code class="language-plaintext highlighter-rouge">swDoc</code>, we use <code class="language-plaintext highlighter-rouge">NewDocument()</code> method. This method is inside <code class="language-plaintext highlighter-rouge">swApp</code>, hence we first need to invoke <code class="language-plaintext highlighter-rouge">swApp</code> and then by using <em>Dot operator</em> we access the <code class="language-plaintext highlighter-rouge">NewDocument()</code> method.</p>

<p>Now this method needs 4 parameters (or input values) to work. If we don’t provide any of these required value we get errors.</p>

<p>These 4 parameters are as follows:</p>

<ul>
  <li>
    <p><em>TemplateName</em></p>

    <ul>
      <li>This can be a full path of the template, which we use to create New document.</li>
    </ul>
  </li>
  <li>
    <p><em>PaperSize</em></p>

    <ul>
      <li>Size of paper</li>
    </ul>
  </li>
  <li>
    <p><em>Width</em></p>

    <ul>
      <li>Width of paper</li>
    </ul>
  </li>
  <li>
    <p><em>Height</em></p>

    <ul>
      <li>Height of paper</li>
    </ul>
  </li>
</ul>

<p>When successfully implemented, this method creates a new document.</p>

<p>If this method failes to create a new document in that case this return <code class="language-plaintext highlighter-rouge">NULL</code> value. We can use this <code class="language-plaintext highlighter-rouge">NULL</code> value to check if the operation is successfull or not.</p>

<p>In our example, we use <code class="language-plaintext highlighter-rouge">defaultTemplate</code> variable as <em>TemplateName</em> parameter and use <strong>0</strong> in all other 3 parameter.</p>

<blockquote>
  <p>Please note that <em>PaperSize</em>, <em>Width</em> and <em>Height</em> is used only if we want to create a new <strong>Drawing document</strong>.</p>
</blockquote>

<p>This is all for now. This post is getting too long.</p>

<p>In next post I will tell you how to create a new <em>Assembly</em> document and new <em>Drawing</em> document.</p>

<!-- This is post navigation bar 
<div class="w3-bar w3-margin-top w3-margin-bottom">
  <a href="/solidworks-macros/vba-in-solidworks" class="w3-button w3-rose">&#10094; Previous</a>
  <a href="/solidworks-macros/open-assembly-and-drawing" class="w3-button w3-rose w3-right">Next &#10095;</a>
</div>
-->
:ET
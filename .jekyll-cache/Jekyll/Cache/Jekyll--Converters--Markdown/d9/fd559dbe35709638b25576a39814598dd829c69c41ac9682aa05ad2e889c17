I"æ0<p>Although you may not know much about developing procedures at this point, I‚Äôm going to jump ahead a bit and discuss how to execute these procedures.</p>

<p>This is important because these procedures are worthless unless you know how to execute it.</p>

<h2 id="executing-sub-procedure">Executing Sub procedure</h2>

<p>Executing a <code class="language-plaintext highlighter-rouge">Sub procedure</code> means the same thing as running or calling a <code class="language-plaintext highlighter-rouge">Sub procedure</code>.</p>

<p>You can use whatever terminology you like.</p>

<p>You can execute a <code class="language-plaintext highlighter-rouge">VBA Sub</code> in many ways - that‚Äôs one reason you can do so many useful things with <code class="language-plaintext highlighter-rouge">Sub procedures</code>.</p>

<p>Here‚Äôs a list of the ways to execute a <code class="language-plaintext highlighter-rouge">Sub procedure</code>:</p>

<ul>
  <li>With the <code class="language-plaintext highlighter-rouge">Run -&gt; Run Sub/UserForm</code> command (in the <code class="language-plaintext highlighter-rouge">VBE</code>). <code class="language-plaintext highlighter-rouge">VBE</code> executes the <code class="language-plaintext highlighter-rouge">Sub procedure</code> in which the cursor is located. This menu command has two alternatives: the <code class="language-plaintext highlighter-rouge">F5</code> key and the <code class="language-plaintext highlighter-rouge">Run Sub/UserForm</code> button on the Standard toolbar in the <code class="language-plaintext highlighter-rouge">VBE</code>. These methods don‚Äôt work if the procedure requires one or more arguments.</li>
  <li>From another <code class="language-plaintext highlighter-rouge">Sub procedure</code> that you write.</li>
  <li>From a custom item on the ribbon you develop.</li>
  <li>From the <code class="language-plaintext highlighter-rouge">Immediate window</code> in the <code class="language-plaintext highlighter-rouge">VBE</code>. Just type the name of the <code class="language-plaintext highlighter-rouge">Sub procedure</code> and press <code class="language-plaintext highlighter-rouge">Enter</code>.</li>
  <li>From <code class="language-plaintext highlighter-rouge">Run</code> <strong>Macro</strong> -&gt; <strong>Select Macro</strong> you want to run. By this, your macro runs the <code class="language-plaintext highlighter-rouge">Sub procedure</code> without opening <code class="language-plaintext highlighter-rouge">VBE</code>.</li>
</ul>

<p>I demonstrate some of these techniques in the following sections.</p>

<p>Before I can do that, you need to enter a <code class="language-plaintext highlighter-rouge">Sub procedure</code> into a <code class="language-plaintext highlighter-rouge">VBA</code> module as suggested below:</p>

<ul>
  <li>Open the VBE in <em>Solidworks</em>.</li>
  <li>Enter the following code into your module</li>
</ul>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">CubeRoot</span><span class="p">()</span>
   <span class="n">Number</span> <span class="o">=</span> <span class="n">InputBox</span><span class="p">(</span><span class="s">"Enter a positive number."</span><span class="p">)</span>
   <span class="n">MsgBox</span> <span class="n">number</span> <span class="o">^</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">"is the cube root."</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>This procedure asks the user for a <em>number</em> and then displays that number‚Äôs cube root in a <code class="language-plaintext highlighter-rouge">message box</code>.</p>

<p>Below Figures shows what happens when you execute this procedure.</p>

<p><img src="/assets/vba-images/VBA_Sub_and_Function_Procedure/1.VBA_InputBox_function.PNG" alt="VBA-InputBox-function" /></p>

<p>I entered 4 as input value. And get result as shown in below image.</p>

<p><img src="/assets/vba-images/VBA_Sub_and_Function_Procedure/2.Displaying_the_cube_root_of_a_number_via_MsgBox.PNG" alt="VBA-InputBox-result" /></p>

<p>By the way, <code class="language-plaintext highlighter-rouge">CubeRoot</code> is not an example of a good macro. It doesn‚Äôt check for errors, so it fails easily.</p>

<p>To see what I mean, try clicking the <code class="language-plaintext highlighter-rouge">Cancel</code> button in the <em>input box</em> or entering a <em>negative number</em>.</p>

<h3 id="executing-the-sub-procedure-directly">Executing the Sub procedure directly</h3>

<p>The <strong>quickest</strong> way to execute this procedure is by doing so directly from the VBA module in which you defined it.</p>

<p>Follow these steps:</p>

<ul>
  <li>Activate the <code class="language-plaintext highlighter-rouge">VBE</code> and select the <code class="language-plaintext highlighter-rouge">VBA module</code> that contains the procedure.</li>
  <li>Move the cursor anywhere in the procedure‚Äôs code.</li>
  <li>Press <code class="language-plaintext highlighter-rouge">F5</code> (or choose <code class="language-plaintext highlighter-rouge">Run -&gt; Run Sub/UserForm</code>).</li>
  <li>Respond to the input box and click <code class="language-plaintext highlighter-rouge">OK</code>.</li>
  <li>The procedure displays the <code class="language-plaintext highlighter-rouge">cube root</code> of the number you entered.</li>
</ul>

<p>You can‚Äôt use the <code class="language-plaintext highlighter-rouge">Run -&gt; Run Sub/UserForm</code> command to execute a <code class="language-plaintext highlighter-rouge">Sub procedure</code> that uses arguments, because you have no way to pass the arguments to the procedure.</p>

<p>If the procedure contains <em>one</em> or <em>more arguments</em>, the only way to execute it is to call it from <code class="language-plaintext highlighter-rouge">another procedure</code> ‚Äî which must supply the argument(s).</p>

<h3 id="executing-the-sub-procedure-from-another-procedure">Executing the Sub procedure from another procedure</h3>

<p>You can also execute a <code class="language-plaintext highlighter-rouge">Sub procedure</code> from another procedure.</p>

<p>Follow these steps if you want to give this a try:</p>

<ul>
  <li>Activate the <code class="language-plaintext highlighter-rouge">VBA</code> module that holds the <code class="language-plaintext highlighter-rouge">CubeRoot</code> routine.</li>
  <li>
    <p>Enter this new procedure (either above or below <code class="language-plaintext highlighter-rouge">CubeRoot</code> code ‚Äî it makes no difference):</p>

    <div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">Sub</span> <span class="nf">NewSub</span><span class="p">()</span>
    <span class="k">Call</span> <span class="n">CubeRoot</span>
 <span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>    </div>
  </li>
  <li>Execute the NewSub macro.</li>
</ul>

<p>The easiest way to do this is to move the cursor anywhere within the <code class="language-plaintext highlighter-rouge">NewSub</code> code and press <code class="language-plaintext highlighter-rouge">F5</code>. 
Notice that this NewSub procedure simply executes the CubeRoot procedure.</p>

<blockquote>
  <p>Please note that the keyword <code class="language-plaintext highlighter-rouge">Call</code> is optional. The statement can consist of only the Sub procedure‚Äôs name. I find that using the <code class="language-plaintext highlighter-rouge">Call</code> keyword makes it perfectly clear that a procedure is being <em>called</em>.</p>
</blockquote>

<hr />

<h2 id="executing-function-procedure">Executing Function procedure</h2>

<p><code class="language-plaintext highlighter-rouge">Function</code> procedures, unlike <code class="language-plaintext highlighter-rouge">Sub</code> procedures, can be only executed in only one way:</p>

<ul>
  <li>By calling the function from another <code class="language-plaintext highlighter-rouge">Sub</code> procedure or <code class="language-plaintext highlighter-rouge">Function</code> procedure.</li>
</ul>

<p>Try this simple function. Enter it into a VBA module:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Function</span> <span class="nf">CubeRoot</span><span class="p">()</span>
   <span class="n">CubeRoot</span> <span class="o">=</span> <span class="n">number</span> <span class="o">^</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
<span class="k">End</span> <span class="k">Function</span>
</code></pre></div></div>

<p>This function is pretty bored ‚Äî it merely calculates the cube root of the number passed to it as its argument.</p>

<p>It does provide a starting point for understanding <code class="language-plaintext highlighter-rouge">functions</code>.</p>

<p>It also presents an important concept about functions: <strong>how to return the value</strong>.</p>

<p>(You do remember that a function returns a value, right?)</p>

<p>Notice that the single line of code that makes up this <code class="language-plaintext highlighter-rouge">Function</code> procedure performs a calculation.</p>

<p>The result of the math (number to the power of 1‚ÅÑ3) is assigned to the variable <code class="language-plaintext highlighter-rouge">CubeRoot</code>.</p>

<p>Not coincidentally, <code class="language-plaintext highlighter-rouge">CubeRoot</code> is also the name of the function.</p>

<p>To tell the function what value to return, you assign that value to the name of the function.</p>

<h3 id="executing-the-function-procedure-from-a-sub-procedure">Executing the Function procedure from a Sub procedure</h3>

<p>Because you can‚Äôt execute a <code class="language-plaintext highlighter-rouge">function</code> directly, you must call it from another procedure.</p>

<p>Enter the following simple procedure in the same <code class="language-plaintext highlighter-rouge">VBA</code> module that contains the <code class="language-plaintext highlighter-rouge">CubeRoot</code> function:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">CubeRoot</span><span class="p">()</span>
   <span class="n">Ans</span> <span class="o">=</span> <span class="n">CubeRoot</span><span class="p">(</span><span class="mi">125</span><span class="p">)</span>
   <span class="n">MsgBox</span> <span class="n">Ans</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>When you execute the <code class="language-plaintext highlighter-rouge">CubeRoot</code> procedure (using any of the methods described earlier), Youe software displays a message box that contains the value of the <code class="language-plaintext highlighter-rouge">Ans</code> variable, which is <strong>5</strong>.</p>

<p>Here‚Äôs what‚Äôs going on:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CubeRoot(125)</code> means it <code class="language-plaintext highlighter-rouge">CubeRoot</code> receive argument of <em>125</em>.</li>
  <li>Then <code class="language-plaintext highlighter-rouge">Function CubeRoot(number)</code> is executed. As described previously, number is an argument. And here the value of this is <em>125</em>.</li>
  <li>Then by <strong>number ^ (1/3)</strong> we get the cube of 125. (why? Because <em>125</em> is argument passed by the <code class="language-plaintext highlighter-rouge">sub</code> function and this <em>125</em> is the value of <em>number</em>.)</li>
  <li>After that cube value of <em>125</em>, i.e. <em>5</em>, is assigned to or given to or equal to <code class="language-plaintext highlighter-rouge">CubeRoot</code>. This <code class="language-plaintext highlighter-rouge">CubeRoot</code> assigned to or given to or equal to <code class="language-plaintext highlighter-rouge">Ans</code>. After that message boxes show the value of <em>5</em> in your screen.</li>
</ul>

<blockquote>
  <p>Please read again if you don‚Äôt understand what is going on here.</p>
</blockquote>

<p>Next post will be about <strong><em>Programming Concepts, Comments and Data-types</em></strong>.</p>
:ET
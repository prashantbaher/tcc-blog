I"<p>An <em>assignment statement</em> is a <em>VBA statement</em> that assigns the result of an expression to a variable or an object.</p>

<p>In a book I read Excel‚Äôs Help system defines the term expression as:</p>

<blockquote>
  <p>‚ÄúCombination of keywords, operators, variables, and constants that yields a string, number, or object. An expression can be used to perform a calculation, manipulate characters, or test data.‚Äù</p>
</blockquote>

<p>Much of your work in VBA involves <em>developing (and debugging)</em> expressions.</p>

<p>If you know how to create simple formulas in Excel, you‚Äôll have no trouble creating expressions.</p>

<p>With a formula, Excel displays the result in a cell.</p>

<p>A VBA expression, on the other hand, can be assigned to a variable.</p>

<blockquote>
  <p>For understanding purpose, I used Excel as an example. Please don‚Äôt get confused with it.</p>
</blockquote>

<p>In the assignment statement examples that follow, the expressions are to the right of the equal sign:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
<span class="n">X</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">z</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">NumberOfParts</span> <span class="o">=</span> <span class="mi">15</span>
<span class="n">SelectObject</span> <span class="o">=</span> <span class="k">True</span>
</code></pre></div></div>

<p><strong>Expressions</strong> can be as complex as you need them to be; use the line continuation character (a space followed by an underscore) to make lengthy expressions easier to read.</p>

<h1 id="operators">Operators</h1>

<p>As you can see in the VBA uses the equal sign as its <em>assignment operator</em>.</p>

<p>You‚Äôre probably accustomed to using an <code class="language-plaintext highlighter-rouge">equal</code> sign as a mathematical symbol for equality.</p>

<p>Therefore, an assignment statement like the following may cause you to raise your eyebrows:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>How can the variable <code class="language-plaintext highlighter-rouge">x</code> be equal to itself plus 1?</p>

<p>Answer: It can‚Äôt.</p>

<p>In this case, the assignment statement is increasing the value of <code class="language-plaintext highlighter-rouge">x</code> by <strong>1</strong>.</p>

<p>Just remember that an assignment uses the <em>equal</em> sign as an <code class="language-plaintext highlighter-rouge">operator</code>, not a symbol of equality.</p>

<h2 id="smooth-operators">Smooth Operators</h2>

<p><code class="language-plaintext highlighter-rouge">Operators</code> play a major role in VBA. Besides the assignment operator i.e. equal sign (discussed in the previous topic), VBA provides several other operators.</p>

<p>Below table lists these operators.</p>

<table class="w3-table-all w3-mobile w3-card-4">
    <tr>
        <th class="w3-center" colspan="2">VBA‚Äôs Operators</th>
    </tr>
    <tr>
        <th>Function</th>
        <th>Operator Symbol</th>
    </tr>
    <tr>
        <td>Addition</td>
        <td>+</td>
    </tr>
    <tr>
        <td>Multiplication</td>
        <td>*</td>
    </tr>
    <tr>
        <td>Division</td>
        <td>/</td>
    </tr>
    <tr>
        <td>Subtraction</td>
        <td>-</td>
    </tr>
    <tr>
        <td>Exponentiation</td>
        <td>^</td>
    </tr>
    <tr>
        <td>String concatenation</td>
        <td>&#38;</td>
    </tr>
    <tr>
        <td>Integer division (the result is always an integer)</td>
        <td>\</td>
    </tr>
    <tr>
        <td>Modulo arithmetic (returns the remainder of a division operation)</td>
        <td>Mod</td>
    </tr>
</table>

<p>The term <strong>concatenation</strong> is programmer speak for ‚Äújoin together‚Äù.</p>

<p>Thus, if you concatenate strings, you are combining strings to make a new and improved string.</p>

<p>VBA also provides a full set of logical operators. Below table, shows some of logical operators.</p>

<table class="w3-table-all w3-mobile w3-card-4">
    <tr>
        <th class="w3-center" colspan="2">VBA‚Äôs Logical Operators</th>
    </tr>
    <tr>
        <th>Operator</th>
        <th>What is does</th>
    </tr>
    <tr>
        <td>Not</td>
        <td>Performs a logical negation on an expression.</td>
    </tr>
    <tr>
        <td>And</td>
        <td>Performs a logical conjunction on two expressions.</td>
    </tr>
    <tr>
        <td>Or</td>
        <td>Performs a logical disjunction on two expressions.</td>
    </tr>
    <tr>
        <td>XoR</td>
        <td>Performs a logical exclusion on two expressions.</td>
    </tr>
    <tr>
        <td>Eqv</td>
        <td>Performs a logical equivalence on two expressions.</td>
    </tr>
    <tr>
        <td>Imp</td>
        <td>Performs a logical implication on two expressions.</td>
    </tr>
</table>

<p>The precedence order for <em>operators</em> in VBA is exactly the same as in <em>Excel formulas</em>.</p>

<p><em>Exponentiation</em> has the highest precedence. <em>multiplication</em> and <em>division</em> come next, followed by <em>addition</em> and <em>subtraction</em>.</p>

<p>You can use <em>parentheses</em> to change the natural precedence order, making whatever‚Äôs operation in parentheses come before any operator.</p>

<p>Take a look at this code:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">y</span>
</code></pre></div></div>

<p>When this code is executed, what‚Äôs the value of <code class="language-plaintext highlighter-rouge">z</code>?</p>

<p>If you answered <strong>13</strong>, you get a gold star that proves you understand the concept of operator precedence.</p>

<p>If you answered <strong>16</strong>, read this: The <em>multiplication</em> operation (5 * y) is performed first, and that result is added to <code class="language-plaintext highlighter-rouge">x</code>.</p>

<p>If you answered something other than <strong>13</strong> or <strong>16</strong>, I have no comment.</p>

<p>By the way, I can never remember how operator precedence works, so I tend to use parentheses even when they aren‚Äôt required.</p>

<p>For example, in real life I would write that last assignment statement like this:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Don‚Äôt be shy about using <em>parentheses</em> even if they aren‚Äôt required ‚Äî especially if doing so makes your code easier to understand. VBA doesn‚Äôt care if you use <em>extra parentheses</em>.</p>
</blockquote>

<p>Next post will be about <strong><em>VBA Arrays</em></strong>.</p>

:ET
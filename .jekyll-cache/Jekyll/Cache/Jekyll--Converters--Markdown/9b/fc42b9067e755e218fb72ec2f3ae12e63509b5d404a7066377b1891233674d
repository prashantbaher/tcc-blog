I"Ò<p>The <code class="language-plaintext highlighter-rouge">String</code> data type represents a series of characters. This topic introduces the basic concepts of strings in Visual Basic.</p>

<h2 id="string-variables">String Variables</h2>

<p>An instance of a string can be assigned a value that represents a series of characters as shown in below example:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Dim</span> <span class="nv">MyString</span> <span class="ow">As</span> <span class="kt">String</span>
<span class="n">MyString</span> <span class="o">=</span> <span class="s">"This is an example of the String data type"</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">String</code> variable can also accept any expression that evaluates to a string as shown in below example:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Dim</span> <span class="nv">OneString</span> <span class="ow">As</span> <span class="kt">String</span>
<span class="k">Dim</span> <span class="nv">TwoString</span> <span class="ow">As</span> <span class="kt">String</span>
<span class="n">OneString</span> <span class="o">=</span> <span class="s">"one, two, three, four, five"</span>
<span class="n">TwoString</span> <span class="o">=</span> <span class="n">OneString</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">' Output -&gt; "two".</span>

<span class="n">OneString</span> <span class="o">=</span> <span class="s">"1"</span>
<span class="n">TwoString</span> <span class="o">=</span> <span class="n">OneString</span> <span class="o">&amp;</span> <span class="s">"1"</span> <span class="c1">' Output -&gt; "11".</span>
</code></pre></div></div>

<p>Any <a href="https://binged.it/2T4EH0s">literal</a> that is assigned to a <code class="language-plaintext highlighter-rouge">String</code> variable must be enclosed in quotation marks (‚Äú‚Äù).</p>

<p>This means that a quotation mark (‚Äú‚Äù) within a string cannot be represented by a quotation mark.</p>

<p>For example, the following code causes a compiler error:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Dim</span> <span class="nv">myString</span> <span class="ow">As</span> <span class="kt">String</span>

<span class="c1">' This line would cause an error.</span>
<span class="n">myString</span> <span class="o">=</span> <span class="s">"He said, "</span><span class="n">Look</span> <span class="n">at</span> <span class="n">this</span> <span class="n">example!</span><span class="s">""</span>
</code></pre></div></div>

<p>This code causes an <em>error</em> because the compiler terminates the string after the second quotation mark, and the remainder of the string is interpreted as code.</p>

<p>This means compiler think <code class="language-plaintext highlighter-rouge">He said, </code> is a string and <code class="language-plaintext highlighter-rouge">Look at this example!</code> as a VB code.</p>

<p>But we want compiler to know that we want <code class="language-plaintext highlighter-rouge">He said, "Look at this example!"</code> as a string value.</p>

<p>To solve this problem, Visual Basic interprets two quotation marks in a string literal as one quotation mark in the string.</p>

<p>The following example shows the correct way to include a quotation mark in a string:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' The value of myString is: He said, "Look at this example!"</span>
<span class="n">myString</span> <span class="o">=</span> <span class="s">"He said, </span><span class="se">""</span><span class="s">Look at this example!</span><span class="se">""</span><span class="s"> "</span>
</code></pre></div></div>

<p>In the preceding example, the <em>two quotation marks</em> before and after the word <code class="language-plaintext highlighter-rouge">Look</code> become <em>one quotation mark</em> in the string.</p>

<h2 id="the-immutability-of-strings">The Immutability of Strings</h2>

<p>A string is <em>immutable</em>, which means its value cannot be changed once it has been created.</p>

<p>However, this does not prevent us from assigning more than one value to a string variable as shown in below example:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Dim</span> <span class="nv">myString</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"This string is immutable"</span>
<span class="n">myString</span> <span class="o">=</span> <span class="s">"Or is it?"</span>
</code></pre></div></div>

<p>Here, a <code class="language-plaintext highlighter-rouge">string</code> variable is created, given a value, and then its value is changed.</p>

<p>In the first line, an instance of type <code class="language-plaintext highlighter-rouge">String</code> is created and given the value <em>This string is immutable</em>.</p>

<p>In the second line of the example, a new instance is created and given the value <em>Or is it?</em>, and the string variable discards its reference to the first instance and stores a reference to the new instance.</p>

<p>Unlike other intrinsic data types, <code class="language-plaintext highlighter-rouge">String</code> is a reference type.</p>

<p>When a variable of reference type is passed as an argument to a function or subroutine, a reference to the memory address where the data is stored is passed instead of the actual value of the string.</p>

<p>So in the previous example, the name of the variable remains the same, but it points to a new and different instance of the String class, which holds the new value.</p>

<p>Next post will be about <strong><em>VBA Assignment Statements And Operators</em></strong>.</p>

:ET
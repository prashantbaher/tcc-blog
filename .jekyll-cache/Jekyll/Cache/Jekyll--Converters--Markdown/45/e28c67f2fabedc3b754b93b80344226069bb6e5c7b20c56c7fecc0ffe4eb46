I"€<p>A <em>variableâ€™s</em> scope determines which modules and procedures can use the variable.</p>

<h2 id="procedure-only-variables">Procedure-only Variables</h2>

<p>The <em>lowest</em> level of scope for a variable is at the <strong>procedure</strong> level.</p>

<p>A procedure is either a <code class="language-plaintext highlighter-rouge">Sub</code> or a <code class="language-plaintext highlighter-rouge">Function</code> procedure.</p>

<p>Variables declared with this scope can be used only in the procedure in which they are declared.</p>

<p>When the procedure ends, the variable no longer exists (it goes to the great big bucket in the sky), and your <strong>CAD</strong> application frees up its memory.</p>

<p>If you execute the procedure again, the variable comes back to life, but its previous value is lost.</p>

<p>The most common way to declare a <em>procedure-only</em> variable is with a <code class="language-plaintext highlighter-rouge">Dim</code> statement.</p>

<p><code class="language-plaintext highlighter-rouge">Dim</code> doesnâ€™t refer to the mental capacity of the VBA designers.</p>

<p>Rather, itâ€™s an old programming term thatâ€™s short for dimension, which simply means you are setting aside memory for a particular variable.</p>

<p>You usually place <code class="language-plaintext highlighter-rouge">Dim</code> statements immediately after the <code class="language-plaintext highlighter-rouge">Sub</code> or <code class="language-plaintext highlighter-rouge">Function</code> statement and before the procedureâ€™s code.</p>

<p>The following example shows some procedure-only variables declared by using <code class="language-plaintext highlighter-rouge">Dim</code> statements:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">MySub</span><span class="p">()</span>
  <span class="k">Dim</span> <span class="nv">x</span> <span class="ow">As</span> <span class="kt">Integer</span>
  <span class="k">Dim</span> <span class="nv">First</span> <span class="ow">As</span> <span class="kt">Long</span>
  <span class="k">Dim</span> <span class="nv">PartDimension</span> <span class="ow">As</span> <span class="k">Single</span>
  <span class="k">Dim</span> <span class="nv">myValue</span>
<span class="c1">' ...[The procedureâ€™s code goes here]...</span>
<span class="k">End</span> <span class="k">Sub</span> 
</code></pre></div></div>

<p>Notice that the last <code class="language-plaintext highlighter-rouge">Dim</code> statement in the preceding example doesnâ€™t declare a data type; it declares only the variable itself. The effect is that the variable <code class="language-plaintext highlighter-rouge">MyValue</code> is a <em>Variant</em>.</p>

<p>By the way, you can also declare several variables with a single <code class="language-plaintext highlighter-rouge">Dim</code> statement, as in the following example:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Dim</span> <span class="nv">x</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">,</span> <span class="n">y</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">,</span> <span class="n">z</span> <span class="ow">As</span> <span class="kt">Integer</span>
<span class="k">Dim</span> <span class="nv">First</span> <span class="ow">As</span> <span class="kt">Long</span><span class="p">,</span> <span class="n">Last</span> <span class="ow">As</span> <span class="kt">Double</span>
</code></pre></div></div>

<p>Unlike some languages, <strong>VBA</strong> doesnâ€™t allow you to declare a <em>group</em> of variables to be a particular <em>data type</em> by separating the variables with <strong>commas</strong>.</p>

<p>For example, though valid, the following statement does not declare all the variables as <em>Integers</em>:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Dim</span> <span class="nv">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="ow">As</span> <span class="kt">Integer</span>
</code></pre></div></div>

<p>In this example, only <code class="language-plaintext highlighter-rouge">k</code> is declared to be an <em>Integer</em>; the other variables are declared to be <em>Variants</em>.</p>

<p>If you declare a variable with <em>procedure-only</em> scope, other procedures in the same module can use the same variable name, but each instance of the variable is unique to its own procedure.</p>

<blockquote>
  <p>In general, variables declared at the <em>procedure level</em> are the most efficient because <strong>VBA</strong> frees up the memory they use when the procedure ends.</p>
</blockquote>

<h2 id="module-only-variables">Module-only Variables</h2>

<p>Sometimes, you want a <em>variable</em> to be available to <em>all procedures</em> in a module.</p>

<p>If so, just declare the <em>variable</em> (using <code class="language-plaintext highlighter-rouge">Dim</code> or <code class="language-plaintext highlighter-rouge">Private</code>) before the moduleâ€™s first <code class="language-plaintext highlighter-rouge">Sub</code> or <code class="language-plaintext highlighter-rouge">Function</code> statement â€” outside any procedures.</p>

<p>This is done in the <strong>Declarations</strong> section, at the <em>beginning</em> of your module.</p>

<p>This is also where the <code class="language-plaintext highlighter-rouge">Option Explicit</code> statement is located.</p>

<p>Below figure shows how you know when youâ€™re working with the <strong>Declarations</strong> section.</p>

<p><img src="/assets/vba-images/Programming_Concepts/1.VariableExamples.PNG" alt="Variable-Scope-Example" /></p>

<p>As shown in above image, I want a variable named <code class="language-plaintext highlighter-rouge">swApp</code>, so that it can available to all procedures in this module.</p>

<p>Hence I declare this variable in <strong>Declaration</strong> section of <strong>VBE</strong>.</p>

<p>Next post wil be about <strong><em>Public, Static and Variableâ€™s Life</em></strong>.</p>
:ET
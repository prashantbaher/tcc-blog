I"Á,<p><code class="language-plaintext highlighter-rouge">Visual Basic for application</code> (VBA) is a real, live programming language, it uses many elements common to all programming languages.</p>

<p>In subsequent topics, we go through several of these elements:</p>

<ul>
  <li>Comments</li>
  <li>Variables</li>
  <li>Constants</li>
  <li>Data types</li>
  <li>Arrays and few other concepts</li>
</ul>

<p>If youâ€™ve programmed with other languages, some of this topics will be familiar or if youâ€™re a programming <em>newbie</em>, itâ€™s time to roll up your sleeves and get busy.</p>

<h2 id="comments-in-vba-code">Comments in VBA Code</h2>

<p>A <code class="language-plaintext highlighter-rouge">comment</code> is the simplest type of <code class="language-plaintext highlighter-rouge">VBA statement</code> because <code class="language-plaintext highlighter-rouge">VBA</code> ignores these statements, they can consist of anything you want.</p>

<p>You can insert a <code class="language-plaintext highlighter-rouge">comment</code> to <em>remind</em> yourself why you did something or to <em>clarify</em> some particularly code you wrote.</p>

<p>Use <code class="language-plaintext highlighter-rouge">comments</code> liberally and extensively to describe what the code does (which isnâ€™t always obvious by reading the code itself).</p>

<p>Often, code that makes perfect sense today mystifies you tomorrow.</p>

<p>You begin a <code class="language-plaintext highlighter-rouge">comment</code> with an apostrophe (<em>â€˜</em>). <code class="language-plaintext highlighter-rouge">VBA</code> ignores any text that follows an apostrophe in a line of code.</p>

<p>You can use a complete line for your <code class="language-plaintext highlighter-rouge">comment</code> or insert your <code class="language-plaintext highlighter-rouge">comment</code> at the end of a line of code.</p>

<p>The following example shows a <code class="language-plaintext highlighter-rouge">VBA</code> procedure with three <code class="language-plaintext highlighter-rouge">comments</code>, although theyâ€™re not necessarily good comments:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">CommentDemo</span><span class="p">()</span>
<span class="c1">'  This procedure does nothing of value</span>
   <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1">'x represents nothing</span>
   <span class="c1">'Display the result</span>
   <span class="n">MsgBox</span> <span class="n">x</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>The <em>apostrophe</em> indicates a <code class="language-plaintext highlighter-rouge">comment</code> rule has one exception.</p>

<p><code class="language-plaintext highlighter-rouge">VBA</code> doesnâ€™t interpret an <em>apostrophe</em> inside a set of quotation marks as a <code class="language-plaintext highlighter-rouge">comment</code> indicator.</p>

<p>For example, the following statement doesnâ€™t contain a <code class="language-plaintext highlighter-rouge">comment</code>, even though it has an <em>apostrophe</em>:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MsgBox</span> <span class="o">=</span> <span class="s">"Can't continue."</span>
</code></pre></div></div>

<p>When youâ€™re writing code, you may want to test a procedure by excluding a particular statement or group of statements.</p>

<p>You could <em>delete</em> the statements and then <em>retype</em> them later but thatâ€™s a waste of time.</p>

<p>A <em>better</em> solution is to simply turn those statements into <code class="language-plaintext highlighter-rouge">comments</code> by inserting <em>apostrophes</em>.</p>

<p><code class="language-plaintext highlighter-rouge">VBA</code> ignores statements beginning with <em>apostrophes</em> when executing a routine.</p>

<p>To reactivate those <code class="language-plaintext highlighter-rouge">commented</code> statements, just remove the <em>apostrophes</em>.</p>

<p>Hereâ€™s a quick way to convert a block of statements to <code class="language-plaintext highlighter-rouge">comments</code>.</p>

<p>In the <code class="language-plaintext highlighter-rouge">VBE</code>, choose <strong>View -&gt; Toolbars -&gt; Edit</strong> to display the <em>Edit</em> toolbar.</p>

<p>To convert a block of statements to <code class="language-plaintext highlighter-rouge">comments</code>, select the statements and click the <code class="language-plaintext highlighter-rouge">Comment</code> Block button.</p>

<p>To remove the <em>apostrophes</em>, select the statements and click the <code class="language-plaintext highlighter-rouge">Uncomment</code> Block button.</p>

<p>Although <code class="language-plaintext highlighter-rouge">comments</code> can be helpful, not all comments are created equal.</p>

<p>For example, the following procedure uses lots of <code class="language-plaintext highlighter-rouge">comments</code>, but they add nothing of value.</p>

<p>In this case, the code is clear enough without the comments.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">BadComments</span><span class="p">()</span>
<span class="c1">'  Declare variables</span>
   <span class="k">Dim</span> <span class="nv">x</span> <span class="ow">As</span> <span class="kt">Integer</span>
   <span class="k">Dim</span> <span class="nv">y</span> <span class="ow">As</span> <span class="kt">Integer</span>
   <span class="k">Dim</span> <span class="nv">z</span> <span class="ow">As</span> <span class="kt">Integer</span>
<span class="c1">'  Start the routine</span>
   <span class="n">x</span> <span class="o">=</span> <span class="mi">100</span>    <span class="c1">'Assign 100 to x</span>
   <span class="n">y</span> <span class="o">=</span> <span class="mi">100</span>    <span class="c1">'Assign 100 to y</span>
<span class="c1">'  Add x and y and store in z</span>
   <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="c1">'  Show the result</span>
   <span class="n">MsgBox</span> <span class="n">z</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>Everyone develops his or her own style of commenting.</p>

<p>To be useful, however, <code class="language-plaintext highlighter-rouge">comments</code> should convey information thatâ€™s not immediately obvious from reading the code.</p>

<p>Otherwise, <code class="language-plaintext highlighter-rouge">comments</code> just chew up bytes and make files larger than necessary.</p>

<p>The following tips can help you make effective use of comments:</p>

<ul>
  <li>
    <p>Briefly describe the purpose of each <code class="language-plaintext highlighter-rouge">Sub</code> or <code class="language-plaintext highlighter-rouge">Function</code> procedure you write.</p>
  </li>
  <li>
    <p>Use <em>comments</em> to keep track of changes you make to a procedure.</p>
  </li>
  <li>
    <p>Use a <em>comment</em> to indicate that youâ€™re using a function or a construct in an unusual or nonstandard manner.</p>
  </li>
  <li>
    <p>Use <em>comments</em> to describe the variables you use, especially if you donâ€™t use meaningful variable names.</p>
  </li>
  <li>
    <p>Use a <em>comment</em> to describe any workarounds you develop to overcome bugs in your code.</p>
  </li>
  <li>
    <p>Write <em>comments</em> as you develop code, instead of saving the task for a final step.</p>
  </li>
  <li>
    <p>Depending on your work environment, consider adding a joke or two as a comment. The person who takes over your job when you get promoted might appreciate the humour.</p>
  </li>
</ul>

<h2 id="data-types-in-vba">Data types in VBA</h2>

<p>When I talk about <code class="language-plaintext highlighter-rouge">data type</code>, Iâ€™m referring to the manner in which a program stores data in memory - for example, as <code class="language-plaintext highlighter-rouge">integers</code>, <code class="language-plaintext highlighter-rouge">real numbers</code>, or <code class="language-plaintext highlighter-rouge">strings</code>.</p>

<p>Although <code class="language-plaintext highlighter-rouge">VBA</code> can take care of these details automatically, it does so at a cost (Thereâ€™s no free lunch).</p>

<p>Letting <code class="language-plaintext highlighter-rouge">VBA</code> handle your data typing results in <em>slower execution</em> and <em>inefficient memory</em> use.</p>

<p>For <em>small applications</em>, this usually doesnâ€™t present much of a problem.</p>

<p>But for <em>large or complex applications</em>, which may be slow or need to conserve every last byte of memory, you need to be on familiar terms with <code class="language-plaintext highlighter-rouge">data types</code>.</p>

<p><code class="language-plaintext highlighter-rouge">VBA</code> automatically handles all the <em>data</em> details, which makes life easier for programmers.</p>

<p>Not all programming languages provide this luxury.</p>

<p>For example, some languages are strictly typed, which means the programmer must explicitly define the data type for every variable used.</p>

<p><code class="language-plaintext highlighter-rouge">VBA</code> does not require that you declare the variables that you use, but itâ€™s definitely a good practice.</p>

<p><code class="language-plaintext highlighter-rouge">VBA</code> has a variety of built-in <em>data types</em>. Below table lists the most common types of data that VBA can handle.</p>

<table class="w3-table-all w3-mobile  w3-card-4">
    <tr>
        <th class="w3-center" colspan="3">VBAâ€™s Built-In Data Types</th>
    </tr>
    <tr>
        <th>Data Type</th>
        <th>Byte used</th>
        <th>Range of values</th>
    </tr>
    <tr>
        <td>Boolean</td>
        <td>2</td>
        <td>True or False</td>
    </tr>
    <tr>
        <td>Integer</td>
        <td>2</td>
        <td>â€“32,768 to 32,767</td>
    </tr>
    <tr>
        <td>Long</td>
        <td>4</td>
        <td>â€“2,147,483,648 to 2,147,483,647</td>
    </tr>
    <tr>
        <td>Single</td>
        <td>4</td>
        <td>â€“3.402823E38 to 1.401298E45</td>
    </tr>
    <tr>
        <td>Double (negative)</td>
        <td>8</td>
        <td>â€“1.79769313486232E308 to â€“4.94065645841247E-324</td>
    </tr>
    <tr>
        <td>Double (positive)</td>
        <td>8</td>
        <td>4.94065645841247Eâ€“324 to  1.79769313486232E308</td>
    </tr>
    <tr>
        <td>Currency</td>
        <td>8</td>
        <td>â€“922,337,203,685,477.5808 to 922,337,203,685,477.5807</td>
    </tr>
    <tr>
        <td>Date</td>
        <td>8</td>
        <td>1/1/100 to 12/31/9999</td>
    </tr>
    <tr>
        <td>String</td>
        <td>1 per char</td>
        <td>varies</td>
    </tr>
    <tr>
        <td>Object</td>
        <td>4</td>
        <td>Any defined object</td>
    </tr>
    <tr>
        <td>Variant</td>
        <td>Varies</td>
        <td>Any data type</td>
    </tr>
    <tr>
        <td>User defined</td>
        <td>Varies</td>
        <td>Varies</td>                    
    </tr>
</table>

<p>Next post will be about <strong><em>VBA Variables</em></strong>.</p>
:ET
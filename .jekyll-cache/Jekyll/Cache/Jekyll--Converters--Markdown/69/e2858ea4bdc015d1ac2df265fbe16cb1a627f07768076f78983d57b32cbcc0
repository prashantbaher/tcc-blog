I"|5<p>A <em>UserForm</em> is useful if your VBA macro needs to get information from a user.</p>

<p>For example, your macro may have some options that can be specified in a UserForm.</p>

<p>If only a few pieces of information are required (for example, a <em>Yes/No</em> answer or a text <em>string</em>), one of the techniques I describe in previous articles may do the job.</p>

<p>But if you need to obtain more information, you must create a UserForm.</p>

<p>To create a UserForm, you usually take the following general steps:</p>

<ul>
  <li>
    <p>Determine how the dialog box will be used and where it will be displayed in your VBA macro.</p>
  </li>
  <li>
    <p>Activate the VBE and insert a new UserForm object. A UserForm object holds a single UserForm.</p>
  </li>
  <li>
    <p>Add controls to the UserForm. Controls include items such as text boxes, buttons, check boxes, and list boxes.</p>
  </li>
  <li>
    <p>Use the Properties window to modify the properties for the controls or for the UserForm itself.</p>
  </li>
  <li>
    <p>Write <em>event-handler</em> procedures for the controls (for example, a macro that executes when the user clicks a button in the dialog box). These procedures are stored in the Code window for the UserForm object.</p>
  </li>
  <li>
    <p>Write a <em>procedure</em> (stored in a VBA module) that displays the dialog box to the user.</p>
  </li>
</ul>

<p>When you are designing a <em>UserForm</em>, you are creating what developers call the <strong>Graphical User Interface (GUI)</strong> to your application.</p>

<p>Take some time to consider what your form should look like and how your users are likely to want to interact with the elements on the UserForm.</p>

<p>Try to guide them through the steps they need to take on the form by carefully considering the arrangement and wording of the controls.</p>

<p>Like most things VBA-related, the more you do it, the easier it gets.</p>

<h2 id="userforms-working">Userforms Working</h2>

<p>Each dialog box that you create is stored in its own UserForm object — one dialog box per UserForm.</p>

<p>You create and access these UserForms in the Visual Basic Editor.</p>

<h2 id="inserting-a-new-userform">Inserting a new UserForm</h2>

<p>To insert a UserForm object with the following steps:</p>

<ol>
  <li>In the macro, you can insert User form with following 2 ways:</li>
</ol>

<ul>
  <li>
    <p>From “Menu Bar” -&gt; “UserForm”</p>
  </li>
  <li>
    <p>From “Standard Toolbar” by clicking “Insert UserForm” <img src="/assets/vba-images/Userforms/3.InsertUserformButtoninstandardToolbar.PNG" alt="A-new-userform-object" /></p>
  </li>
</ul>

<p>The VBE insert a new UserForm object with an empty dialog box.</p>

<ol>
  <li>If “Property window” is not available in your macro, press <code class="language-plaintext highlighter-rouge">F4</code> to display “Property window”.</li>
</ol>

<p>The VBE inserts a new UserForm object, which contains an empty dialog box.</p>

<p>Below figure shows a UserForm — an empty dialog box with some controls in Toolbox.</p>

<p><img src="/assets/vba-images/Userforms/1.Anewuserformobject.PNG" alt="Empty-userform-object" /></p>

<h2 id="adding-controls-to-a-userform">Adding controls to a UserForm</h2>

<p>When you activate a UserForm, the VBE displays the Toolbox in a floating window, as shown in above figure.</p>

<p>You use the tools in the Toolbox to add controls to your UserForm.</p>

<p>If the Toolbox doesn’t appear when you activate your UserForm, choose <strong>View -&gt; Toolbox</strong>.</p>

<p>To add a control, just click the desired control in the Toolbox and drag it into the dialog box to create the control.</p>

<p>After you add a control, you can move and resize it by using standard techniques.</p>

<p>Below table indicates the various tools, as well as their capabilities.</p>

<p>To determine which tool is which, hover your mouse pointer over the control and read the small pop-up description.</p>

<!--
<table class="w3-table-all w3-mobile w3-card-4">
    <tr>
        <th class="w3-center" colspan="2">ToolBox Control</th>
    </tr>
    <tr>
        <th>Controls</th>
        <th>What it does</tr>
    </tr>
    <tr>
        <td>Label</td>
        <td>Shows text</td>
    </tr>
    <tr>
        <td>TextBox</td>
        <td>Determines which of the file filters the dialog box displays by default.</td>
    </tr>
    <tr>
        <td>ComboBox</td>
        <td>
            Display a drop-down list.
        </td>
    </tr>
    <tr>
        <td>ListBox</td>
        <td>
            Display a list of items.
        </td>
    </tr>
    <tr>
        <td>CheckBox</td>
        <td>Useful for On/off or Yes/No options.</td>
    </tr>
    <tr>
        <td>OptionButton</td>
        <td>Used in groups; allows the user to select one of several options.</td>
    </tr>
    <tr>
        <td>ToggleButoon</td>
        <td>A button that is either on or off.</td>
    </tr>
    <tr>
        <td>Frame </td>
        <td>A container for other control.</td>
    </tr>
    <tr>
        <td>CommandButton</td>
        <td>A clickable button.</td>
    </tr>
    <tr>
        <td>TabStrip</td>
        <td>Display Tabs</td>
    </tr>
    <tr>
        <td>MultiPage</td>
        <td>A tabbed container for other objects.</td>
    </tr>
    <tr>
        <td>ScrollBar</td>
        <td>A draggable bar.</td>
    </tr>
    <tr>
        <td>SpinButton</td>
        <td>A clickable button often used for changing a value.</td>
    </tr>
    <tr>
        <td>Image</td>
        <td>Contains an image</td>
    </tr>
    <tr>
        <td>RefEdit</td>
        <td>Allows the user to select a range.</td>
    </tr>
</table>
-->

<table>
  <thead>
    <tr>
      <th>Controls</th>
      <th>What it does</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Label</td>
      <td>Shows text</td>
    </tr>
    <tr>
      <td>TextBox</td>
      <td>Determines which of the file filters the dialog box displays by default.</td>
    </tr>
    <tr>
      <td>ComboBox</td>
      <td>Display a drop-down list.</td>
    </tr>
    <tr>
      <td>ListBox</td>
      <td>Display a list of items.</td>
    </tr>
    <tr>
      <td>CheckBox</td>
      <td>Useful for On/off or Yes/No options.</td>
    </tr>
    <tr>
      <td>OptionButton</td>
      <td>Used in groups; allows the user to select one of several options.</td>
    </tr>
    <tr>
      <td>ToggleButoon</td>
      <td>A button that is either on or off.</td>
    </tr>
    <tr>
      <td>Frame</td>
      <td>A container for other control.</td>
    </tr>
    <tr>
      <td>CommandButton</td>
      <td>A clickable button.</td>
    </tr>
    <tr>
      <td>TabStrip</td>
      <td>Display Tabs</td>
    </tr>
    <tr>
      <td>MultiPage</td>
      <td>A tabbed container for other objects.</td>
    </tr>
    <tr>
      <td>ScrollBar</td>
      <td>A draggable bar.</td>
    </tr>
    <tr>
      <td>SpinButton</td>
      <td>A clickable button often used for changing a value.</td>
    </tr>
    <tr>
      <td>Image</td>
      <td>Contains an image</td>
    </tr>
    <tr>
      <td>RefEdit</td>
      <td>Allows the user to select a range.</td>
    </tr>
  </tbody>
</table>

<h2 id="changing-properties-for-a-userform-control">Changing properties for a UserForm control</h2>

<p>Every control you add to a UserForm has a number of properties that determine how the control looks or behaves.</p>

<p>In addition, the UserForm itsel also has its own set of properties.</p>

<p>You can change these properties with the <em>Properties window</em>.</p>

<p>Below figure shows the properties window when a <code class="language-plaintext highlighter-rouge">CommandButton</code> control is selected:</p>

<p><img src="/assets/vba-images/Userforms/2.UsethePropertiesWindowstoChangethePropertiesofUserFormControls.PNG" alt="Empty-userform-object" /></p>

<p>Properties for controls include the following:</p>

<ul>
  <li>Name</li>
  <li>Width</li>
  <li>Height</li>
  <li>Value</li>
  <li>Caption</li>
</ul>

<p>Each control has its own set of properties (although many controls have some common properties). To change a property using the Properties window:</p>

<ol>
  <li>Make sure that the correct control is selected in the UserForm.</li>
  <li>Make sure the Properties window is visible (press <code class="language-plaintext highlighter-rouge">F4</code> if it’s not).</li>
  <li>In the Properties window, click on the property that you want to change.</li>
  <li>Make the change in the right portion of the Properties window.</li>
</ol>

<p>If you select the <strong>UserForm</strong> itself (not a <strong>control</strong> on the UserForm), you can use the Properties window to adjust UserForm properties</p>

<blockquote>
  <p>Some of the UserForm properties serve as default settings for new controls you drag onto the UserForm. For example, if you change the Font property for a UserForm, controls that you add will use that same font. Controls that are already on the UserForm are not affected.</p>
</blockquote>

<h2 id="viewing-the-userform-code-window">Viewing the UserForm Code window</h2>

<p>Every UserForm object has a Code module that holds the VBA code (<em>the event-handler procedures</em>) executed when the user works with the dialog box.</p>

<p>To view the Code module, press <code class="language-plaintext highlighter-rouge">F7</code>.</p>

<p>The <em>Code window</em> is empty until you add some procedures. Press <code class="language-plaintext highlighter-rouge">Shift+F7</code> to return to the dialog box.</p>

<p>Here’s another way to switch between the Code window and the UserForm display:</p>

<ul>
  <li>
    <p>Use the View Code and View Object buttons in the Project window’s title bar.</p>
  </li>
  <li>
    <p>Or right-click the UserForm and choose View Code.</p>
  </li>
</ul>

<p>If you’re viewing code, <em>double-click</em> the UserForm name in the Project window to return to the UserForm.</p>

<h2 id="showing-the-userform">Showing the UserForm</h2>

<p>You display a UserForm by using the UserForm’s <code class="language-plaintext highlighter-rouge">Show</code> method in a VBA procedure.</p>

<p>The macro that displays the dialog box must be in a VBA module — not in the Code window for the UserForm.</p>

<p>The following procedure displays the dialog box named <code class="language-plaintext highlighter-rouge">UserForm1</code>:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Showing the UserForm</span>
<span class="k">Sub</span> <span class="nf">ShowDialogBox</span><span class="p">()</span>
  <span class="n">UserForm</span><span class="p">.</span><span class="n">Show</span>
  <span class="c1">'Other statements can go here</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>When Solidworks displays the dialog box, the <code class="language-plaintext highlighter-rouge">ShowDialogBox</code> macro halts until the user closes the dialog box.</p>

<p>Then VBA executes any remaining statements in the procedure.</p>

<p>Most of the time, you won’t have any more code in the procedure.</p>

<h2 id="using-information-from-a-userform">Using information from a UserForm</h2>

<p>The VBE provides a name for each control you add to a UserForm.</p>

<p>The control’s name corresponds to its <code class="language-plaintext highlighter-rouge">Name</code> property.</p>

<p>Use this name to refer to a particular control in your code.</p>

<p>For example, if you add a <code class="language-plaintext highlighter-rouge">CheckBox</code> control to a UserForm named <code class="language-plaintext highlighter-rouge">UserForm1</code>, the CheckBox control is named <code class="language-plaintext highlighter-rouge">CheckBox1</code> by default.</p>

<p>The following statement makes this control appear with a check mark:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">UserForm1</span><span class="p">.</span><span class="n">CheckBox1</span><span class="p">.</span><span class="n">Value</span> <span class="o">=</span> <span class="k">True</span>
</code></pre></div></div>

<p>Most of the time, you write the code for a UserForm in the UserForm’s code module.</p>

<p>If that’s the case, you can omit the UserForm object qualifier and write the statement like this:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CheckBox1</span><span class="p">.</span><span class="n">Value</span> <span class="o">=</span> <span class="k">True</span>
</code></pre></div></div>

<blockquote>
  <p>I recommend that you change the default name the VBE has given to your controls to something more meaningful.</p>
</blockquote>

<p>This will sum-up our tutorials on Visual Basic for Application. From now on I will give tutorials on how to use Solidworks commands with the help of VBA Macro.</p>

<p>If you want to know any explaination on any topic related to VBA, please drop a comment and I will try to give it to you.</p>

<h3 id="thank-you">Thank you!!!!</h3>

<h2 id="update">UPDATE:</h2>

<p>I have started VBA UserForm Example in this tutorials lists.</p>

<p>So if you want to learn how I use these Forms, you can watch them in UserForm Example List Post.</p>

<!-- This is post navigation bar 
<div class="w3-bar w3-margin-top w3-margin-bottom">
    <a href="/visual-basic/vba-other-dialog" class="w3-button w3-rose">&#10094; Previous</a>
    <a href="/visual-basic/open-part-from-userform" class="w3-button w3-rose w3-right">Next &#10095;</a>
</div>
-->
:ET
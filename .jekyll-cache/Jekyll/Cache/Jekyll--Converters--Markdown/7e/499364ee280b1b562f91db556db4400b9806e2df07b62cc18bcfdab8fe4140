I"zC<p>You’re probably already familiar with the VBA <code class="language-plaintext highlighter-rouge">MsgBox</code> function — I use it quite a bit in the examples.</p>

<p>The <code class="language-plaintext highlighter-rouge">MsgBox</code> function, which accepts the arguments shown in below table, is handy for displaying information and getting simple user input.</p>

<p>It’s able to get user input because it’s a function.</p>

<p>A <em>function</em>, as you recall, returns a value.</p>

<p>In the case of the <code class="language-plaintext highlighter-rouge">Msgbox</code> function, it uses a dialog box to get the value that it returns.</p>

<p>Keep reading to see exactly how it works.</p>

<p>Here’s a simplified version of the syntax for the MsgBox function:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' MsgBox Structure</span>
<span class="n">MsgBox</span><span class="p">(</span><span class="n">prompt</span><span class="err">[</span><span class="p">,</span> <span class="n">buttons</span><span class="err">][</span><span class="p">,</span> <span class="n">title</span><span class="err">]</span><span class="p">)</span>
</code></pre></div></div>
<!--
<table class="w3-table-all w3-mobile w3-card-4">
    <tr>
        <th class="w3-center" colspan="2">MsgBox Function Arguments</th>
    </tr>
    <tr>
        <th>Arguments</th>
        <th>What it does</tr>
    </tr>
    <tr>
        <td>prompt</td>
        <td>
            The text your application displays in the message box
        </td>
    </tr>
    <tr>
        <td>buttons</td>
        <td>
            A number that specifies which buttons (along with what icon) appear in the message box (optional)
        </td>
    </tr>
    <tr>
        <td>title</td>
        <td>
            The text that appears in the message box’s title bar (optional) displaying a simple message box
        </td>
    </tr>
</table>
-->

<table>
  <thead>
    <tr>
      <th>Arguments</th>
      <th>What it does</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>prompt</td>
      <td>The text your application displays in the message box</td>
    </tr>
    <tr>
      <td>buttons</td>
      <td>A number that specifies which buttons (along with what icon) appear in the message box (optional)</td>
    </tr>
    <tr>
      <td>title</td>
      <td>The text that appears in the message box’s title bar (optional) displaying a simple message box</td>
    </tr>
  </tbody>
</table>

<p>You can use the <em>MsgBox</em> function in two ways:</p>

<ul>
  <li>To simply show a message to the user. In this case, you don’t care about the result returned by the function.</li>
  <li>To get a response from the user. In this case, you do care about the result returned by the function. The result depends on the button that the user clicks.</li>
</ul>

<p>If you use the <em>MsgBox</em> function by itself, don’t include parentheses around the arguments.</p>

<p>The following example simply displays a message and does not return a result.</p>

<p>When the message is displayed, the code stops until the user clicks <code class="language-plaintext highlighter-rouge">OK</code>.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' MsgBox function Example</span>
<span class="k">Sub</span> <span class="nf">main</span><span class="p">()</span>
  <span class="n">MsgBox</span> <span class="s">"Hello, world!"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>Below figure shows how this message box looks:</p>

<p><img src="/assets/vba-images/Dialog_Boxes/ASimpleMessageBox.PNG" alt="A-Simple-Message-Box" /></p>

<h2 id="getting-a-response-from-a-message-box">Getting a response from a message box</h2>

<p>If you display a message box that has more than just an <strong>OK</strong> button, you’ll probably want to know which button the user clicks.</p>

<p>The <em>MsgBox function</em> can return a value that represents which button is clicked.</p>

<p>You can assign the result of the MsgBox function to a variable.</p>

<p>In the following code, I use some built-in constants that make it easy to work with the values returned by <code class="language-plaintext highlighter-rouge">MsgBox</code>:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' MsgBox built-in constants Example</span>
<span class="k">Sub</span> <span class="nf">GetAnswer</span><span class="p">()</span>
  <span class="k">Dim</span> <span class="nv">Ans</span> <span class="n">as</span> <span class="kt">Integer</span>
  <span class="n">Ans</span> <span class="o">=</span> <span class="n">MsgBox</span> <span class="p">(</span><span class="s">"Did you eat lunch?"</span><span class="p">,</span> <span class="n">vbYesNo</span><span class="p">)</span>
  <span class="k">Select</span> <span class="k">Case</span> <span class="n">Ans</span>
    <span class="k">Case</span> <span class="n">vbYes</span>
    <span class="c1">'......[Some code here]....</span>
    <span class="k">Case</span> <span class="n">vbNo</span>
    <span class="c1">'......[Some code here]....</span>
  <span class="k">End</span> <span class="k">Select</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>Below figure shows how it looks.</p>

<p>When you execute this procedure, the <code class="language-plaintext highlighter-rouge">Ans</code> variable is assigned a value of either <code class="language-plaintext highlighter-rouge">vbYes</code> or <code class="language-plaintext highlighter-rouge">vbNo</code>, depending on which button the user clicks.</p>

<p>The <code class="language-plaintext highlighter-rouge">Select</code> Case statement uses the <code class="language-plaintext highlighter-rouge">Ans</code> value to determine which action the code should perform.</p>

<p><img src="/assets/vba-images/Dialog_Boxes/ASimpleMessageBoxWithTwoButtons.PNG" alt="A-Simple-Message-Box-with-two-buttons" /></p>

<p>You can also use the <code class="language-plaintext highlighter-rouge">MsgBox</code> function result without using a variable, as the following example demonstrates:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' MsgBox without variable</span>
<span class="k">Sub</span> <span class="nf">GetAnswer2</span><span class="p">()</span>
  <span class="k">If</span> <span class="n">MsgBox</span> <span class="p">(</span><span class="s">"Continue?"</span><span class="p">,</span> <span class="n">vbYesNo</span><span class="p">)</span> <span class="o">=</span> <span class="n">vbYes</span> <span class="k">Then</span>
  <span class="c1">'......[Some code here]....</span>
  <span class="k">Else</span>
  <span class="c1">'......[Some code here]....</span>
  <span class="k">End</span> <span class="k">If</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<h2 id="customizing-message-boxes">Customizing message boxes</h2>

<p>The flexibility of the buttons argument makes it easy to customize your message boxes.</p>

<p>You can specify which buttons to display, determine whether an icon appears, and decide which button is the default (the default button is “clicked” if the user presses <code class="language-plaintext highlighter-rouge">Enter</code>).</p>

<p>Below table lists some of the built-in constants you can use for the buttons argument.</p>

<p>If you prefer, you can use the value rather than a constant (but I think using the built-in constants is a lot easier).</p>

<!--
<table class="w3-table-all w3-mobile w3-card-4">
    <tr>
        <th class="w3-center" colspan="3">Constants Used in the MsgBox Function</th>
    </tr>
    <tr>
        <th>Constant</th>
        <th>Value</th>
        <th>What it does</th>
    </tr>
    <tr>
        <td>vbOKOnly</td>
        <td>0</td>
        <td>Display OK button only.</td>
    </tr>
    <tr>
        <td>vbOKCancel</td>
        <td>1</td>
        <td>Display OK and Cancel buttons</td>
    </tr>
    <tr>
        <td>vbAbortRetryIgnore</td>
        <td>2</td>
        <td>Displays Abort, Retry, and Ignore buttons.</td>
    </tr>
    <tr>
        <td>vbYesNoCancel</td>
        <td>3</td>
        <td>Displays Yes, No, and Cancel buttons.</td>
    </tr>
    <tr>
        <td>vbYesNo</td>
        <td>4</td>
        <td>Displays Yes and No buttons.</td>
    </tr>
    <tr>
        <td>vbRetryCancel</td>
        <td>5</td>
        <td>Displays Retry and Cancel buttons.</td>
    </tr>
    <tr>
        <td>vbCritical</td>
        <td>16</td>
        <td>Displays Critical Message icon.</td>
    </tr>
    <tr>
        <td>vbQuestion</td>
        <td>32</td>
        <td>Displays Warning Query icon.</td>
    </tr>
    <tr>
        <td>vbExclamation</td>
        <td>48</td>
        <td>Displays Warning Message icon.</td>
    </tr>
    <tr>
        <td>vbInformation</td>
        <td>64</td>
        <td>Displays Information Message icon.</td>
    </tr>
    <tr>
        <td>vbDefaultButton1</td>
        <td>0</td>
        <td>First button is default.</td>
    </tr>
    <tr>
        <td>vbDefaultButton2</td>
        <td>256</td>
        <td>Second button is default.</td>
    </tr>
    <tr>
        <td>vbDefaultButton3</td>
        <td>512</td>
        <td>Third button is default.</td>
    </tr>
    <tr>
        <td>vbDefaultButton4</td>
        <td>768</td>
        <td>Fourth button is default.</td>
    </tr>
</table>
-->

<table>
  <thead>
    <tr>
      <th>Constant</th>
      <th>Value</th>
      <th>What it does</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>vbOKOnly</td>
      <td>0</td>
      <td>Display OK button only.</td>
    </tr>
    <tr>
      <td>vbOKCancel</td>
      <td>1</td>
      <td>Display OK and Cancel buttons</td>
    </tr>
    <tr>
      <td>vbAbortRetryIgnore</td>
      <td>2</td>
      <td>Displays Abort, Retry, and Ignore buttons.</td>
    </tr>
    <tr>
      <td>vbYesNoCancel</td>
      <td>3</td>
      <td>Displays Yes, No, and Cancel buttons.</td>
    </tr>
    <tr>
      <td>vbYesNo</td>
      <td>4</td>
      <td>Displays Yes and No buttons.</td>
    </tr>
    <tr>
      <td>vbRetryCancel</td>
      <td>5</td>
      <td>Displays Retry and Cancel buttons.</td>
    </tr>
    <tr>
      <td>vbCritical</td>
      <td>16</td>
      <td>Displays Critical Message icon.</td>
    </tr>
    <tr>
      <td>vbQuestion</td>
      <td>32</td>
      <td>Displays Warning Query icon.</td>
    </tr>
    <tr>
      <td>vbExclamation</td>
      <td>48</td>
      <td>Displays Warning Message icon.</td>
    </tr>
    <tr>
      <td>vbInformation</td>
      <td>64</td>
      <td>Displays Information Message icon.</td>
    </tr>
    <tr>
      <td>vbDefaultButton1</td>
      <td>0</td>
      <td>First button is default.</td>
    </tr>
    <tr>
      <td>vbDefaultButton2</td>
      <td>256</td>
      <td>Second button is default.</td>
    </tr>
    <tr>
      <td>vbDefaultButton3</td>
      <td>512</td>
      <td>Third button is default.</td>
    </tr>
    <tr>
      <td>vbDefaultButton4</td>
      <td>768</td>
      <td>Fourth button is default.</td>
    </tr>
  </tbody>
</table>

<p>For using more than one of these constants as an argument, just connect them with a <code class="language-plaintext highlighter-rouge">+</code> operator.</p>

<p>For example, to display a message box with <code class="language-plaintext highlighter-rouge">Yes</code> and <code class="language-plaintext highlighter-rouge">No</code> buttons and an exclamation icon, use the following expression as the second <em>MsgBox</em> argument:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Using multiple MsgBox built-in constants</span>
<span class="n">vbYesNo</span> <span class="o">+</span> <span class="n">vbExclamation</span>
</code></pre></div></div>

<p>Or, if you prefer to make your code less understandable, use a value of <em>52 (that is, 4 + 48)</em>.</p>

<p>The following example uses a combination of constants to display a message box with a <code class="language-plaintext highlighter-rouge">Yes button</code> and a <code class="language-plaintext highlighter-rouge">No button</code> (<code class="language-plaintext highlighter-rouge">vbYesNo</code>) as well as a question mark icon (<code class="language-plaintext highlighter-rouge">vbQuestion</code>).</p>

<p>The constant <code class="language-plaintext highlighter-rouge">vbDefaultButton2</code> designates the second button (<code class="language-plaintext highlighter-rouge">No</code>) as the default button — that is, the button that is clicked if the user presses <code class="language-plaintext highlighter-rouge">Enter</code>.</p>

<p>For simplicity, we assign these constants to the <code class="language-plaintext highlighter-rouge">Config</code> variable and then use <code class="language-plaintext highlighter-rouge">Config</code> as the second argument in the <em>MsgBox</em> function:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">' Using multiple MsgBox built-in constants</span>
<span class="k">Sub</span> <span class="nf">GetAnswer3</span><span class="p">()</span>
  <span class="k">Dim</span> <span class="nv">Config</span> <span class="ow">As</span> <span class="kt">Integer</span>
  <span class="k">Dim</span> <span class="nv">Ans</span> <span class="n">as</span> <span class="kt">Integer</span>
  <span class="n">Config</span> <span class="o">=</span> <span class="n">vbYesNo</span> <span class="o">+</span> <span class="n">vbQuestion</span> <span class="o">+</span> <span class="n">vbDefaultButton2</span>
  <span class="n">Ans</span> <span class="o">=</span> <span class="n">MsgBox</span><span class="p">(</span><span class="s">"Is part opened?"</span><span class="p">,</span> <span class="n">Config</span><span class="p">)</span>
  <span class="k">If</span> <span class="n">Ans</span> <span class="o">=</span> <span class="n">vbYes</span> <span class="k">Then</span> <span class="n">OpenPart</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div></div>

<p>Below figure shows the message box application displays when you execute the <code class="language-plaintext highlighter-rouge">GetAnswer3</code> procedure.</p>

<p>If the user clicks the <em>Yes button</em>, the routine executes the procedure named <code class="language-plaintext highlighter-rouge">OpenPart</code> (which is not shown).</p>

<p>If the user clicks the <em>No button</em> (or presses <code class="language-plaintext highlighter-rouge">Enter</code>), the routine ends with no action.</p>

<p>Because I omitted the title argument in the <em>MsgBox</em> function, our application uses the default title, in my case it is <em>Solidworks</em>.</p>

<p><img src="/assets/vba-images/Dialog_Boxes/MsgBoxfunctionsbutton.PNG" alt="MsgBox-function-button" /></p>

<p>Previous examples have used constants (such as <code class="language-plaintext highlighter-rouge">vbYes</code> and <code class="language-plaintext highlighter-rouge">vbNo</code>) for the return value of a <em>MsgBox</em> function.</p>

<p>Besides these two constants, below table lists a few others.</p>

<!--
<table class="w3-table-all w3-mobile w3-card-4">
    <tr>
        <th class="w3-center" colspan="3">Constants Used as Return Values for the MsgBox Function</th>
    </tr>
    <tr>
        <th>Constant</th>
        <th>Value</th>
        <th>What it does</th>
    </tr>
    <tr>
        <td>vbOK</td>
        <td>1</td>
        <td>User clicked OK.</td>
    </tr>
    <tr>
        <td>vbCancel</td>
        <td>2</td>
        <td>User clicked Cancel.</td>
    </tr>
    <tr>
        <td>vbAbort</td>
        <td>3</td>
        <td>User clicked Abort.</td>
    </tr>
    <tr>
        <td>vbRetry</td>
        <td>4</td>
        <td>User clicked Retry.</td>
    </tr>
    <tr>
        <td>vbIgnore</td>
        <td>5</td>
        <td>User clicked Ignore.</td>
    </tr>
    <tr>
        <td>vbYes</td>
        <td>6</td>
        <td>User clicked Yes.</td>
    </tr>
    <tr>
        <td>vbNo</td>
        <td>7</td>
        <td>User clicked No.</td>
    </tr>
</table>
-->

<table>
  <thead>
    <tr>
      <th>Constant</th>
      <th>Value</th>
      <th>What it does</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>vbOK</td>
      <td>1</td>
      <td>User clicked OK.</td>
    </tr>
    <tr>
      <td>vbCancel</td>
      <td>2</td>
      <td>User clicked Cancel.</td>
    </tr>
    <tr>
      <td>vbAbort</td>
      <td>3</td>
      <td>User clicked Abort.</td>
    </tr>
    <tr>
      <td>vbRetry</td>
      <td>4</td>
      <td>User clicked Retry.</td>
    </tr>
    <tr>
      <td>vbIgnore</td>
      <td>5</td>
      <td>User clicked Ignore.</td>
    </tr>
    <tr>
      <td>vbYes</td>
      <td>6</td>
      <td>User clicked Yes.</td>
    </tr>
    <tr>
      <td>vbNo</td>
      <td>7</td>
      <td>User clicked No.</td>
    </tr>
  </tbody>
</table>

<p>Next post will be about <strong><em>VBA InputBox Function</em></strong>.</p>

:ET
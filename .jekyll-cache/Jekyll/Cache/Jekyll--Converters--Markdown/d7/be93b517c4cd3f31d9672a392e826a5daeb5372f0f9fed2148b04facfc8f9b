I"3<p>A variable’s value may (and usually does) change while your procedure is executing.</p>

<p>That’s why they call it a <strong>variable</strong>.</p>

<p>Sometimes you need to refer to a <strong>value</strong> or <strong>string</strong> that never changes.</p>

<p>In such a case, you need a <strong>constant</strong> — a named element whose value doesn’t change.</p>

<p>As shown in the following examples, you declare <strong>constants</strong> by using the <code class="language-plaintext highlighter-rouge">Const</code> statement.</p>

<p>The declaration statement also gives the constant its value:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Const</span> <span class="nv">BlockLength</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="mf">4.</span>
<span class="k">Const</span> <span class="nv">BlockThickness</span> <span class="o">=</span> <span class="p">.</span><span class="err">5</span>
<span class="n">Const</span> <span class="n">PartName</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Part Name:"</span>
<span class="k">Public</span> <span class="k">Const</span> <span class="nv">AppName</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Part Calculation"</span>
</code></pre></div></div>

<p>Using <em>constants</em> in place of hard-coded <em>values</em> or <em>strings</em> is an excellent programming practice.</p>

<p>For example, if your procedure needs to refer to a specific value (such as <em>sheet thickness</em>) several times.</p>

<p>It is better to declare the value as a <em>constant</em> and refer to its <em>name</em> rather than the <em>value</em>.</p>

<p>This makes your code more readable and easier to change.</p>

<p>When sheet thickness changes, you have to change only one statement rather than several.</p>

<p>Like variables, constants have a scope. Keep these points in mind:</p>

<ul>
  <li>To make a <em>constant</em> available within only a <em>single procedure</em>, declare the constant after the procedure’s <code class="language-plaintext highlighter-rouge">Sub</code> or <code class="language-plaintext highlighter-rouge">Function</code> statement.</li>
  <li>To make a <em>constant</em> available to <em>all procedures</em> in a module, declare the constant in the <strong>Declarations</strong> section for the module.</li>
  <li>To make a <em>constant</em> available to <em>all modules</em>, use the <code class="language-plaintext highlighter-rouge">Public</code> keyword and declare the constant in the <strong>Declarations</strong> section of any module.</li>
</ul>

<p>If you attempt to change the value of a constant in a <strong>VBA routine</strong>, you get an error.</p>

<p>This isn’t too surprising because a Constant is <code class="language-plaintext highlighter-rouge">constant</code>.</p>

<p>Unlike a variable, the value of a constant <em>does not</em> vary.</p>

<p>If you need to change the value of a constant while your code is running, what you really need is a variable.</p>

<h2 id="pre-made-constants">Pre-made constants</h2>

<p>Your <strong>CAD Application</strong> and <strong>VBA</strong> contain many predefined constants, which you can use without the need to declare them yourself.</p>

<p>The macro recorder (in <em>Solidworks</em>) usually uses constants rather than actual values.</p>

<p>In general, you don’t need to know the value of these constants to use them.</p>

<p>The following simple procedure uses a <strong>built-in</strong> constant <code class="language-plaintext highlighter-rouge">swDefaultTemplatePart</code> to select the default part template while opening a new file.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set</span> <span class="n">swPart</span> <span class="o">=</span> <span class="n">swApp</span><span class="p">.</span><span class="n">NewDocument</span><span class="p">(</span><span class="n">swApp</span><span class="p">.</span><span class="n">GetUserPreferenceStringValue</span> <span class="n">_</span>
    <span class="p">(</span><span class="n">swUserPreferenceStringValue_e</span><span class="p">.</span><span class="n">swDefaultTemplatePart</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>In above example, <em>Solidworks</em> did not record these constants.</p>

<p>It simply generates the direct path to open part document.</p>

<p>To find the actual value of a built-in constant, use the “Immediate window” in the VBE, and execute a VBA statement such as the following:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">?</span><span class="n">swDefaultTemplatePart</span>
</code></pre></div></div>

<blockquote>
  <p>If the Immediate window isn’t visible, press <code class="language-plaintext highlighter-rouge">Ctrl+G</code>. The question mark is a shortcut for typing <code class="language-plaintext highlighter-rouge">Print</code>.</p>
</blockquote>

<p>Next post will be about <strong><em>VBA Strings Basics</em></strong>.</p>

:ET